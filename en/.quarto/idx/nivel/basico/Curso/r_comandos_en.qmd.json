{"title":"2 - Basic R commands","markdown":{"yaml":{"title":"2 - Basic R commands","format":"html","toc":true,"number-sections":true,"lang":"en"},"headingText":"An overview of the RStudio interface","containsRefs":false,"markdown":"\n\n\n<div class = \"reminder-objetivos\">\nObjectives:\\\n1. Understand the purpose of the windows and tabs in RStudio\\\n2. Understand the logic of R commands and attributes\\\n3. Use commands by script\n\n</div>\n\n\n\n| R is a command line program. This is a bit tedious, as we have already seen, because any mistake in typing a command results in the code reading being interrupted. But on the other hand, and also as we have already seen, *chained and commented command lines allow the reproduction and modification of code snippets converging to any product*, in this case, educational objects for high school, and *without the need to memorize mouse clicks and technical operations*.\n\n| Unlike *Jmol*, however, `R` is quite strict in its syntax, and it is not possible to mix upper and lower case letters, or singular and plural forms. For the code to work, it must be typed correctly. But *you can easily increase or reduce the space between commands*, which makes no difference to the `R` compiler.\n\n| Some operations are performed alternatively by *mouse*, *command line*, or both, depending on the action. Below are some basic features for reproducing code for educational objects, without detailed descriptions of the *R & RStudio* operation itself, to simplify and make this work more objective. \n\n| If you would like to learn more about both programs, either the installed or cloud version, we suggest the numerous websites and tutorials available on the internet, as well as hundreds of books already written on the subject, and online courses on various teaching platforms.\n\n\\\n\n\n\\\n| *Rstudio* does nothing more than provide a *graphical user interface* (GUI) for *R*, which is a program executed by its own code language, similar to *Jmol*. Several operations can also be performed without commands or code, such as opening and saving a file, or viewing and saving a graph, for example. Let's take a look at the main window of *Rstudio*.\n\n![Basic RStudio window. A - command input area (*prompt*); B - work tab area (directory, graphs, packages, etc.); C - files that appear in the tab of the same name; D - administration tab area (environment, command history, etc.).](rstudioWindows2.png)\n\n| For our work, however, an additional area will be useful, the *script area*, which can be accessed as follows:\n\n\n\n```{r, eval=FALSE}\nFile --> New File --> RScript...\n\n or by shortcut: Ctrl + Shift + N\n\n```\n\n\\\n\n![](rstudioScript.png)\n\\\n\n| Note that the main window has now been divided into two parts, including the new tab for *scripts*.\n\\\n\n![Main window of *RStudio* containing the tab for creating and executing *scripts*.](rstudioScriptAberta.png)\n\\\n\n\n## How commands work in `R`\n\n| All commands in `R` consist of a *name* followed by *arguments*, enclosed in parentheses. Here are some examples\n\n```{r, eval=FALSE}\ncommand(argument 1, argument 2, argument 3, ...)\n\nExamples:\nplot(x,y)\nmean(z)\nread.csv(file = \"my.data.csv\")\n```\n\\\n\n\n## Creating a *script* in `R`\n\n| To produce a *script* in `R`, the best way is to write the command lines in a similar way to what was done with the 3D molecular viewer *Jmol* in its *Console*, separating them by individual lines. Here is an example of a simple calculation:\n\n```{r}\nx = 5\nx^2 +7\n```\n\\\n\n| To run the *script* above, simply copy and paste it into the open *script* area. Here's a **golden tip**. Notice that in the upper right corner of the *script* there is a *paste icon* for the *script* text. Just click on this icon and the text will be copied.\n\n| Now just paste it into the open *script* tab (in the cloud, for example) and execute it as follows.\n\n\\\n\n## Executing a *script* in `R`\n\n| There are a few ways to execute a *script*, as in the example above, in `R`. Here are the most common ones:\n\n```{r, eval=FALSE}\n1. If you want to execute a few lines of a *script*, you can select the lines and click Ctrl + Enter ;\n\n2. If you want to execute the entire *script*, select all the text (Ctrl + A) followed by the above action, Ctrl + Enter ;\nOptionally, you can click on the \"-->Source\" icon ;\n\n3. If you want to execute only one line, just click on the line followed by Ctrl + Enter ;\nOptionally, you can click on the \"-->Run\" icon ;\n\n```\n\n\\\n\n<div class=\"reminder-markdown\">\n\n**Now it's up to you:**\n\nFrom the script run and transcribed below:\\\nx = 5 \\\nx^2 +7 \\\n\nModify the second command line to calculate \"x\" using other operations. Suggestions: \\\nsqrt(x); square root \\\nlog10(x); base 10 logarithm \\\nsin(x); sine \n\n</div>\n\n\n## Some recommendations for typing in an `R` script:\n\n| There are some basic assumptions for an `R` *script* to be read clearly by its developer, as well as compiled correctly by the program:\n\n1. *Typing*: whenever there is an error in the *script* in *Rstudio*, a red cross will appear on the left side of the command line; once the error is corrected, the sign disappears;\n2. Comments: so that the script can also be read by a human being, it is advisable to add comments to the command lines (starting with #) - one of the basics of Reproducible Teaching;\n3. *Indentation*: allow \"indentation\" when the line is a little long by clicking the *Enter* key after a separation of arguments by *\"comma\"*. This way, the line continues just below, but with a small shift to the right. This makes the code easier to read.\n4. *Names*: `R` commands are in English. Therefore, you should avoid using variables and file names with accents or graphic symbols in Portuguese (e.g., *รง*, *~*). In addition, `R` is a code compiler. If you define a compound name for a file or variable, i.e., with a space between the terms (as is normal in everyday language, e.g., my file), `R` will try to execute the terms separately (e.g., \"my\" and then \"file\"), which will cause the reading to be interrupted and an error message to appear. Therefore, for variable and file names, give preference to one of the three types of **common conventions used in programming**, namely:\n\n* separation by *underline, \" \\_ \"* or hyphen; e.g.: my_variable, my-variable\n* separation by capital letters; e.g.: myVariable\n* separation by dots; e.g.: my.variable\n\n","srcMarkdownNoYaml":"\n\n\n<div class = \"reminder-objetivos\">\nObjectives:\\\n1. Understand the purpose of the windows and tabs in RStudio\\\n2. Understand the logic of R commands and attributes\\\n3. Use commands by script\n\n</div>\n\n\n\n| R is a command line program. This is a bit tedious, as we have already seen, because any mistake in typing a command results in the code reading being interrupted. But on the other hand, and also as we have already seen, *chained and commented command lines allow the reproduction and modification of code snippets converging to any product*, in this case, educational objects for high school, and *without the need to memorize mouse clicks and technical operations*.\n\n| Unlike *Jmol*, however, `R` is quite strict in its syntax, and it is not possible to mix upper and lower case letters, or singular and plural forms. For the code to work, it must be typed correctly. But *you can easily increase or reduce the space between commands*, which makes no difference to the `R` compiler.\n\n| Some operations are performed alternatively by *mouse*, *command line*, or both, depending on the action. Below are some basic features for reproducing code for educational objects, without detailed descriptions of the *R & RStudio* operation itself, to simplify and make this work more objective. \n\n| If you would like to learn more about both programs, either the installed or cloud version, we suggest the numerous websites and tutorials available on the internet, as well as hundreds of books already written on the subject, and online courses on various teaching platforms.\n\n\\\n\n## An overview of the RStudio interface\n\n\\\n| *Rstudio* does nothing more than provide a *graphical user interface* (GUI) for *R*, which is a program executed by its own code language, similar to *Jmol*. Several operations can also be performed without commands or code, such as opening and saving a file, or viewing and saving a graph, for example. Let's take a look at the main window of *Rstudio*.\n\n![Basic RStudio window. A - command input area (*prompt*); B - work tab area (directory, graphs, packages, etc.); C - files that appear in the tab of the same name; D - administration tab area (environment, command history, etc.).](rstudioWindows2.png)\n\n| For our work, however, an additional area will be useful, the *script area*, which can be accessed as follows:\n\n\n\n```{r, eval=FALSE}\nFile --> New File --> RScript...\n\n or by shortcut: Ctrl + Shift + N\n\n```\n\n\\\n\n![](rstudioScript.png)\n\\\n\n| Note that the main window has now been divided into two parts, including the new tab for *scripts*.\n\\\n\n![Main window of *RStudio* containing the tab for creating and executing *scripts*.](rstudioScriptAberta.png)\n\\\n\n\n## How commands work in `R`\n\n| All commands in `R` consist of a *name* followed by *arguments*, enclosed in parentheses. Here are some examples\n\n```{r, eval=FALSE}\ncommand(argument 1, argument 2, argument 3, ...)\n\nExamples:\nplot(x,y)\nmean(z)\nread.csv(file = \"my.data.csv\")\n```\n\\\n\n\n## Creating a *script* in `R`\n\n| To produce a *script* in `R`, the best way is to write the command lines in a similar way to what was done with the 3D molecular viewer *Jmol* in its *Console*, separating them by individual lines. Here is an example of a simple calculation:\n\n```{r}\nx = 5\nx^2 +7\n```\n\\\n\n| To run the *script* above, simply copy and paste it into the open *script* area. Here's a **golden tip**. Notice that in the upper right corner of the *script* there is a *paste icon* for the *script* text. Just click on this icon and the text will be copied.\n\n| Now just paste it into the open *script* tab (in the cloud, for example) and execute it as follows.\n\n\\\n\n## Executing a *script* in `R`\n\n| There are a few ways to execute a *script*, as in the example above, in `R`. Here are the most common ones:\n\n```{r, eval=FALSE}\n1. If you want to execute a few lines of a *script*, you can select the lines and click Ctrl + Enter ;\n\n2. If you want to execute the entire *script*, select all the text (Ctrl + A) followed by the above action, Ctrl + Enter ;\nOptionally, you can click on the \"-->Source\" icon ;\n\n3. If you want to execute only one line, just click on the line followed by Ctrl + Enter ;\nOptionally, you can click on the \"-->Run\" icon ;\n\n```\n\n\\\n\n<div class=\"reminder-markdown\">\n\n**Now it's up to you:**\n\nFrom the script run and transcribed below:\\\nx = 5 \\\nx^2 +7 \\\n\nModify the second command line to calculate \"x\" using other operations. Suggestions: \\\nsqrt(x); square root \\\nlog10(x); base 10 logarithm \\\nsin(x); sine \n\n</div>\n\n\n## Some recommendations for typing in an `R` script:\n\n| There are some basic assumptions for an `R` *script* to be read clearly by its developer, as well as compiled correctly by the program:\n\n1. *Typing*: whenever there is an error in the *script* in *Rstudio*, a red cross will appear on the left side of the command line; once the error is corrected, the sign disappears;\n2. Comments: so that the script can also be read by a human being, it is advisable to add comments to the command lines (starting with #) - one of the basics of Reproducible Teaching;\n3. *Indentation*: allow \"indentation\" when the line is a little long by clicking the *Enter* key after a separation of arguments by *\"comma\"*. This way, the line continues just below, but with a small shift to the right. This makes the code easier to read.\n4. *Names*: `R` commands are in English. Therefore, you should avoid using variables and file names with accents or graphic symbols in Portuguese (e.g., *รง*, *~*). In addition, `R` is a code compiler. If you define a compound name for a file or variable, i.e., with a space between the terms (as is normal in everyday language, e.g., my file), `R` will try to execute the terms separately (e.g., \"my\" and then \"file\"), which will cause the reading to be interrupted and an error message to appear. Therefore, for variable and file names, give preference to one of the three types of **common conventions used in programming**, namely:\n\n* separation by *underline, \" \\_ \"* or hyphen; e.g.: my_variable, my-variable\n* separation by capital letters; e.g.: myVariable\n* separation by dots; e.g.: my.variable\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"number-sections":true,"output-file":"r_comandos_en.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":{"light":"flatly"},"title":"2 - Basic R commands"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}