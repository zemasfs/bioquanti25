{"title":"5 - Molecule workshop","markdown":{"yaml":{"title":"5 - Molecule workshop","format":"html","toc":true,"number-sections":true,"lang":"en"},"headingText":"Measurements","containsRefs":false,"markdown":"\n\n\n\n| *Jmol* allows you to calculate distances and angles in a molecular model. To illustrate this, it may be interesting to load a *water model* (`load $water`), whose distances and angles are found in some chemistry textbooks.\n\n\n### For distances\n\n| In the example of the water molecule, to determine the distance of an O-H bond, for example, execute:\n\n```{r, eval=FALSE}\n1. Double-click on the first atom;\n2. Drag the mouse to the second atom;\n3. Click on the second atom\n```\n\n\n| Trying this for the distance of the O-H bond, the program returns the value 0.097 nm, or 0.97 Angstroms, the conventional value for this type of covalent bond.\n\n![Measuring distance within the molecule.](aguaDist.png)\n\n\n### For angles\n\n| For the same water molecule, try to determine the bond angle:\n\n```{r, eval = FALSE}\n\n1. Double-click on the first atom (e.g., H);\n2. Drag to the second atom (e.g., O);\n3. Click on the second atom;\n4. Drag to the third atom (e.g., the other H);\n5. Click on the third atom\n```\n\n| Note that the system returns a value of 114°, which is close to the expected value for the molecule (109.5°) or the measured value (104.5°). This approximation is due to the construction of the water model.\n\n![Measuring angle within the molecule.](aguaAng.png)\n\n| To clear the measurements, use the command:\n\n```{r, eval=FALSE}\nmeasure off\n```\n\n\n## Molecular characteristics\n\n| There is a lot of tangible information about a molecular model in *Jmol*. Here are some examples of the most basic information for the molecule of a component of *shoyo* sauce, glutamate:\n\n\n### Charges\n\n| Sometimes it can be interesting to show the polarity of molecules based on their charge distribution. In *Jmol* there are two types of charges, *effective charge (`formaCharge`) and partial charge (`partialcharge`)*. We can illustrate the charge distribution in a surfactant molecule, such as hexadecanoate.\n\n![Example of a 16-carbon surfactant, hexadecenoic acid. Source: MAPA: high school - 3rd semester, 3rd year, p.63. Natural sciences and their technologies.](hexadecanoate_mapa.png)\n\n\n| To do this, type the following commands in the *Console*:\n\n```{r, eval=FALSE}\nload $hexadecanoate\ncalculate partialCharge # calculation of partial charges of the model\nlabel %P # presentation of charges (labeling)\n```\n\n\n| A feature of *Jmol* that makes it more efficient to execute actions is the sequential arrangement of commands. This way, it is not necessary to click *Enter* for each command, just separate the commands with semicolons (*;*) as illustrated below, to calculate the partial charges of the glutamate molecule:\n\n![Presentation of partial charges in the glutamate model, a component of Shoyo sauce, also illustrating a sequence of actions in Jmol.](glu.png)\n\n\n| Similarly, the obtaining of *formal charges* in the model can be illustrated. In this case, transparent coloring was added for better visualization of the negative unit charge of the carboxylic acid:\n\n```{r, eval=FALSE}\ncalculate formalcharges # calculation of partial charges of the model\nlabel %C # presentation of charges (labeling)\n```\n\n![Illustration of the commands in sequence for viewing formal charges in the glutamate molecule.](gluFormal.png)\n\n| Note that the commands in the figure mix upper and lower case letters, unlike the command line that precedes them. This is a **cool feature of *Jmol*, which does not care about font capitalization**. In other words, it does not matter if you use lower case, upper case, or a combination of both; *Jmol* performs the action in the same way.\n\n\n#### Scripts & Reproducible Teaching\n\n| The example above shows a simple way to concatenate commands, facilitating the automatic and sequential execution of a set of them. However, the command line view is somewhat impaired by the separation with *\";\"*, which can cause visual pollution when there are several commands.\n\n| The workaround involves arranging the commands in a *script* format. This is nothing more than a piece of code containing one command per line, which improves the visualization of the code as a whole. In addition, the *script* has the added advantage of allowing comments to be inserted between command lines, also allowing for better appropriation of the code and its learning.\n\nThese characteristics of a *command line with explanatory comments* give *Jmol* its aspect for *programming* sequential actions, and consequently establish one of the basic premises for *Reproducible Teaching*: the writing of code snippets in single-line commands, written as in a notepad, with comments on the program's actions on each line. \n\n\nAs an example for a *script* involving the actions for glutamate above, just copy the snippet below and paste it into the *JSmol* *Console*, then execute it.\n\n```{r, eval=FALSE}\nload $glu # loading micromolecule \nwireframe only # exclusive rendering of rods\ncalculate partialCharge # partial charge\nlabel %P \n```\n\n| Another aspect inherent to the *Reproducible Teaching* initiative is the *possibility of evaluating the code with some changes*, aiming at a slightly modified final product. Try repeating the above snippet, but for effective charges, that is:\n\n```{r, eval=FALSE}\nload $glu # loading micromolecule \ncpk only # exclusive rendering by filled space\ncalculate formalCharge # effective charge \nlabel %C \n```\n\n\n| In addition, you can change more commands in the code to create a result that is completely different from the original. This defines another feature of *Reproducible Teaching*, namely *code snippet creation*. To illustrate, here is an excerpt based on the previous one, but for energy minimization and restructuring of the molecule's orbitals.\n\n```{r, eval=FALSE}\nload $glu # micromolecule loading \ncpk only # exclusive rendering by filled space\nminimize # command for structure energy minimization \n```\n\n\n## Molecular characteristics\n\n\n| Sometimes it is also interesting to introduce the class to the concept of *weak forces* that permeate molecular interactions, as illustrated below.\n\n\n![[Some weak forces in molecular interaction. Source: MAPA: high school - 2nd semester, 1st year, p.75. Natural sciences and their technologies.](interacao_mapa.png)\n\n\n| In addition to structural prediction for *partial charge and formal charge*, *Jmol* also allows you to highlight *weak forces* in the model, such as *van der Waals clouds* and *hydrogen bonds*, as follows.\n\n\n### Van der Waals cloud\n\n```{r, eval=FALSE}\ndots on # van der Waals cloud on the atoms of the model (remove with \"dots off\")\ncalculate hbonds # identifies hydrogen bonds in the model\n```\n\n| To illustrate, copy and paste the following snippet into the *Console*:\n\n```{r, eval=FALSE}\nload $water\ndots on # van der Waals cloud on the water structure\ndots ionic # ionic cloud over the model\n```\n\n![Example of the overlap of van der Waals clouds on the atoms of the water molecule.](vanderwaals.png)\n\n![Illustrating the representation of the ionic cloud for the water model.](ionic.png) \n\\\n\n### Hydrogen bonds\n\\\n\n```{r, eval=FALSE}\nload=1djf # loads a peptide model\ncalculate hbonds # displays the H bonds present in the structure\n```\n\n\\\n\n![Example of hydrogen bonds in a peptide model.](ligacoesH.png)\n\n## Surfaces\n\n| In addition to the van der Waals surface (*dots on*) seen above, *Jmol* is capable of representing some surfaces for molecular models. The larger the molecule, the greater the internal calculation to generate the surface, which can make it difficult to visualize. Thus, illustrating a simple command for the surface of a water molecule:\n\n\n```{r, eval=FALSE}\nisosurface molecular # molecular surface that includes the solvent\n```\n\n![Molecular surface for the water model.](isosurfMolec.png)\n","srcMarkdownNoYaml":"\n\n\n## Measurements\n\n| *Jmol* allows you to calculate distances and angles in a molecular model. To illustrate this, it may be interesting to load a *water model* (`load $water`), whose distances and angles are found in some chemistry textbooks.\n\n\n### For distances\n\n| In the example of the water molecule, to determine the distance of an O-H bond, for example, execute:\n\n```{r, eval=FALSE}\n1. Double-click on the first atom;\n2. Drag the mouse to the second atom;\n3. Click on the second atom\n```\n\n\n| Trying this for the distance of the O-H bond, the program returns the value 0.097 nm, or 0.97 Angstroms, the conventional value for this type of covalent bond.\n\n![Measuring distance within the molecule.](aguaDist.png)\n\n\n### For angles\n\n| For the same water molecule, try to determine the bond angle:\n\n```{r, eval = FALSE}\n\n1. Double-click on the first atom (e.g., H);\n2. Drag to the second atom (e.g., O);\n3. Click on the second atom;\n4. Drag to the third atom (e.g., the other H);\n5. Click on the third atom\n```\n\n| Note that the system returns a value of 114°, which is close to the expected value for the molecule (109.5°) or the measured value (104.5°). This approximation is due to the construction of the water model.\n\n![Measuring angle within the molecule.](aguaAng.png)\n\n| To clear the measurements, use the command:\n\n```{r, eval=FALSE}\nmeasure off\n```\n\n\n## Molecular characteristics\n\n| There is a lot of tangible information about a molecular model in *Jmol*. Here are some examples of the most basic information for the molecule of a component of *shoyo* sauce, glutamate:\n\n\n### Charges\n\n| Sometimes it can be interesting to show the polarity of molecules based on their charge distribution. In *Jmol* there are two types of charges, *effective charge (`formaCharge`) and partial charge (`partialcharge`)*. We can illustrate the charge distribution in a surfactant molecule, such as hexadecanoate.\n\n![Example of a 16-carbon surfactant, hexadecenoic acid. Source: MAPA: high school - 3rd semester, 3rd year, p.63. Natural sciences and their technologies.](hexadecanoate_mapa.png)\n\n\n| To do this, type the following commands in the *Console*:\n\n```{r, eval=FALSE}\nload $hexadecanoate\ncalculate partialCharge # calculation of partial charges of the model\nlabel %P # presentation of charges (labeling)\n```\n\n\n| A feature of *Jmol* that makes it more efficient to execute actions is the sequential arrangement of commands. This way, it is not necessary to click *Enter* for each command, just separate the commands with semicolons (*;*) as illustrated below, to calculate the partial charges of the glutamate molecule:\n\n![Presentation of partial charges in the glutamate model, a component of Shoyo sauce, also illustrating a sequence of actions in Jmol.](glu.png)\n\n\n| Similarly, the obtaining of *formal charges* in the model can be illustrated. In this case, transparent coloring was added for better visualization of the negative unit charge of the carboxylic acid:\n\n```{r, eval=FALSE}\ncalculate formalcharges # calculation of partial charges of the model\nlabel %C # presentation of charges (labeling)\n```\n\n![Illustration of the commands in sequence for viewing formal charges in the glutamate molecule.](gluFormal.png)\n\n| Note that the commands in the figure mix upper and lower case letters, unlike the command line that precedes them. This is a **cool feature of *Jmol*, which does not care about font capitalization**. In other words, it does not matter if you use lower case, upper case, or a combination of both; *Jmol* performs the action in the same way.\n\n\n#### Scripts & Reproducible Teaching\n\n| The example above shows a simple way to concatenate commands, facilitating the automatic and sequential execution of a set of them. However, the command line view is somewhat impaired by the separation with *\";\"*, which can cause visual pollution when there are several commands.\n\n| The workaround involves arranging the commands in a *script* format. This is nothing more than a piece of code containing one command per line, which improves the visualization of the code as a whole. In addition, the *script* has the added advantage of allowing comments to be inserted between command lines, also allowing for better appropriation of the code and its learning.\n\nThese characteristics of a *command line with explanatory comments* give *Jmol* its aspect for *programming* sequential actions, and consequently establish one of the basic premises for *Reproducible Teaching*: the writing of code snippets in single-line commands, written as in a notepad, with comments on the program's actions on each line. \n\n\nAs an example for a *script* involving the actions for glutamate above, just copy the snippet below and paste it into the *JSmol* *Console*, then execute it.\n\n```{r, eval=FALSE}\nload $glu # loading micromolecule \nwireframe only # exclusive rendering of rods\ncalculate partialCharge # partial charge\nlabel %P \n```\n\n| Another aspect inherent to the *Reproducible Teaching* initiative is the *possibility of evaluating the code with some changes*, aiming at a slightly modified final product. Try repeating the above snippet, but for effective charges, that is:\n\n```{r, eval=FALSE}\nload $glu # loading micromolecule \ncpk only # exclusive rendering by filled space\ncalculate formalCharge # effective charge \nlabel %C \n```\n\n\n| In addition, you can change more commands in the code to create a result that is completely different from the original. This defines another feature of *Reproducible Teaching*, namely *code snippet creation*. To illustrate, here is an excerpt based on the previous one, but for energy minimization and restructuring of the molecule's orbitals.\n\n```{r, eval=FALSE}\nload $glu # micromolecule loading \ncpk only # exclusive rendering by filled space\nminimize # command for structure energy minimization \n```\n\n\n## Molecular characteristics\n\n\n| Sometimes it is also interesting to introduce the class to the concept of *weak forces* that permeate molecular interactions, as illustrated below.\n\n\n![[Some weak forces in molecular interaction. Source: MAPA: high school - 2nd semester, 1st year, p.75. Natural sciences and their technologies.](interacao_mapa.png)\n\n\n| In addition to structural prediction for *partial charge and formal charge*, *Jmol* also allows you to highlight *weak forces* in the model, such as *van der Waals clouds* and *hydrogen bonds*, as follows.\n\n\n### Van der Waals cloud\n\n```{r, eval=FALSE}\ndots on # van der Waals cloud on the atoms of the model (remove with \"dots off\")\ncalculate hbonds # identifies hydrogen bonds in the model\n```\n\n| To illustrate, copy and paste the following snippet into the *Console*:\n\n```{r, eval=FALSE}\nload $water\ndots on # van der Waals cloud on the water structure\ndots ionic # ionic cloud over the model\n```\n\n![Example of the overlap of van der Waals clouds on the atoms of the water molecule.](vanderwaals.png)\n\n![Illustrating the representation of the ionic cloud for the water model.](ionic.png) \n\\\n\n### Hydrogen bonds\n\\\n\n```{r, eval=FALSE}\nload=1djf # loads a peptide model\ncalculate hbonds # displays the H bonds present in the structure\n```\n\n\\\n\n![Example of hydrogen bonds in a peptide model.](ligacoesH.png)\n\n## Surfaces\n\n| In addition to the van der Waals surface (*dots on*) seen above, *Jmol* is capable of representing some surfaces for molecular models. The larger the molecule, the greater the internal calculation to generate the surface, which can make it difficult to visualize. Thus, illustrating a simple command for the surface of a water molecule:\n\n\n```{r, eval=FALSE}\nisosurface molecular # molecular surface that includes the solvent\n```\n\n![Molecular surface for the water model.](isosurfMolec.png)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"number-sections":true,"output-file":"jmol_oficina_en.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.29","theme":{"light":"flatly"},"title":"5 - Molecule workshop"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}