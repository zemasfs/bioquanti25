{"title":"Chemistry","markdown":{"yaml":{"title":"Chemistry","number-sections":true,"toc":true,"lang":"en","class":"fundo-basico"},"headingText":"Ideal Gas Law (EM13CNT101, EM13CNT204, EM13CNT205, EM13CNT207, EM13CNT303)","containsRefs":false,"markdown":"\n\n<!-- ########### IDEAL GAS LAW ################## -->\n\n<div class=\"quim-fundo\"> <!--modifies for each area-->\n\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Dados:\nR = 8.314 # J/(mol*K), constante geral dos gases ideias\nV = seq(0,22.4, length.out=50)  # vetor de \"Volume\" (em litros), com 50 pontos\nT = 298 # K, temperatura absoluta\n\n\n# Equação\n# pV = RT; p = RT/V\np = R*T/V\n\nlibrary(plotly)\nlibrary(magrittr) # biblioteca para o operador pipe \"%>%\"\nplot_ly(x = V, y = ~R*T/V, type = 'scatter', mode='lines') %>%\n  layout(\n    title = \"Transformação Isotérmica de um Gás\",\n    xaxis = list(title = \"Volume V, L\", range=c(-1,24)),\n    yaxis = list(title = \"Pressão p, Pascal\")\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Dados:\nR = 8.314 # J/(mol*K), constante geral dos gases ideias\nV = seq(0,22.4, length.out=50)  # vetor de \"Volume\" (em litros), com 50 pontos\nT = 298 # K, temperatura absoluta\n\n\n# Equação\n# pV = RT; p = RT/V\np = R*T/V\n\nlibrary(plotly)\nlibrary(magrittr) # biblioteca para o operador pipe \"%>%\"\nplot_ly(x = V, y = ~R*T/V, type = 'scatter', mode='lines') %>%\n  layout(\n    title = \"Transformação Isotérmica de um Gás\",\n    xaxis = list(title = \"Volume V, L\", range=c(-1,24)),\n    yaxis = list(title = \"Pressão p, Pascal\")\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\nplot_ly(x = V, y = ~R*T/V, type = 'scatter', mode='lines', line = list(color = \"red\", width = 3)) %>% # Changing the color and width of the line\n```\n\n</div>\n\n\\\n<!-- ########### REAGENT AND PRODUCT CURVE ################# -->\n\n<div class=\"quim-fundo\"> <!--modifies for each area-->\n\n## Reagent consumption and product formation curves (EM13CNT301, EM13MAT304, EM13CNT306)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\nlibrary(gifski)\n\n# Dados simulados de tempo, reagente e produto\ntempo <- seq(0, 10, length.out = 100)           # 0 a 10 segundos\nreagente <- 100 * exp(-0.3 * tempo)             # Decaimento exponencial\nproduto <- 100 * (1 - exp(-0.3 * tempo))        # Formação de produto\n\n# Criando um dataframe para o gráfico\ndados <- data.frame(Tempo = tempo, Reagente = reagente, Produto = produto)\n\n# Gráfico animado de consumo de reagente e formação de produto\np <- ggplot(dados, aes(x = Tempo)) +\n  geom_line(aes(y = Reagente, color = \"Reagente\"), linewidth = 1.2) +\n  geom_line(aes(y = Produto, color = \"Produto\"), linewidth = 1.2) +\n  scale_color_manual(values = c(\"Reagente\" = \"blue\", \"Produto\" = \"red\")) +\n  labs(title = \"Consumo de Reagente e Formação de Produto ao Longo do Tempo\",\n       x = \"Tempo (s)\", y = \"Quantidade (mol)\", color = \"Substância\") +\n  transition_reveal(Tempo) +\n  theme_minimal()\n\n# Exibindo o gráfico animado\nanimate(p, renderer = gifski_renderer())\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\nlibrary(gifski)\n\n# Dados simulados de tempo, reagente e produto\ntempo <- seq(0, 10, length.out = 100)           # 0 a 10 segundos\nreagente <- 100 * exp(-0.3 * tempo)             # Decaimento exponencial\nproduto <- 100 * (1 - exp(-0.3 * tempo))        # Formação de produto\n\n# Criando um dataframe para o gráfico\ndados <- data.frame(Tempo = tempo, Reagente = reagente, Produto = produto)\n\n# Gráfico animado de consumo de reagente e formação de produto\np <- ggplot(dados, aes(x = Tempo)) +\n  geom_line(aes(y = Reagente, color = \"Reagente\"), linewidth = 1.2) +\n  geom_line(aes(y = Produto, color = \"Produto\"), linewidth = 1.2) +\n  scale_color_manual(values = c(\"Reagente\" = \"blue\", \"Produto\" = \"red\")) +\n  labs(title = \"Consumo de Reagente e Formação de Produto ao Longo do Tempo\",\n       x = \"Tempo (s)\", y = \"Quantidade (mol)\", color = \"Substância\") +\n  transition_reveal(Tempo) +\n  theme_minimal()\n\n# Exibindo o gráfico animado\nanimate(p, renderer = gifski_renderer())\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\nscale_color_manual(values ​​= c(\"Reagent\" = \"green\", \"Product\" = \"purple\")) + # Change in colors\n\n```\n\n</div>\n\n\\\n<!-- ########### DISSOCIATION EQUILIBRIUM ################## -->\n\n<div class=\"quim-fundo\"> <!--modifies for each area-->\n\n## Dissociation equilibrium of weak acids and bases (EM13CNT303, EM13MAT305, EM13CNT304)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Parâmetro inicial de Ka para ácido fraco e dados para pH e concentração\nKa <- 1e-5  # Constante de acidez padrão\n\n# Valores de pH e concentrações\npH_values <- seq(0, 14, 0.1)\nconc_H <- 10^(-pH_values)       # Concentração H+ para cada pH\nconc_OH <- 1e-14 / conc_H       # Concentração OH- com base no produto iônico da água\nconc_HA <- conc_H / (Ka + conc_H)  # Concentração HA para ácido fraco\nconc_A <- Ka * conc_HA             # Concentração A- \n\n# Data frame combinado\ndados_acidez <- data.frame(pH = pH_values, conc_H = conc_H, conc_OH = conc_OH, conc_HA = conc_HA, conc_A = conc_A)\n\n# Gráfico combinado interativo\nplot_ly(dados_acidez) %>%\n  add_lines(x = ~pH, y = ~conc_H, name = \"Concentração H+\", line = list(color = \"blue\")) %>%\n  add_lines(x = ~pH, y = ~conc_OH, name = \"Concentração OH-\", line = list(color = \"red\")) %>%\n  add_lines(x = ~pH, y = ~conc_HA, name = \"Concentração HA (ácido)\", line = list(color = \"purple\")) %>%\n  add_lines(x = ~pH, y = ~conc_A, name = \"Concentração A- (base conjugada)\", line = list(color = \"green\")) %>%\n  layout(\n    title = \"Curvas de Acidez, Basicidade e Dissociação de Ácido\",\n    xaxis = list(title = \"pH\"),\n    yaxis = list(title = \"Concentração (mol/L)\", type = \"log\"),\n    sliders = list(\n      list(\n        active = 5, \n        currentvalue = list(prefix = \"Ka = \"),\n        steps = lapply(seq(1e-7, 1e-3, length.out = 10), function(k) {\n          list(label = format(k, scientific = TRUE), method = \"update\",\n               args = list(list(\n                 y = list(\n                   10^(-pH_values),                    # Atualizar H+\n                   1e-14 / 10^(-pH_values),            # Atualizar OH-\n                   10^(-pH_values) / (k + 10^(-pH_values)), # Atualizar HA\n                   k * (10^(-pH_values) / (k + 10^(-pH_values))) # Atualizar A-\n                 )\n               )))\n        })\n      )\n    )\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Parâmetro inicial de Ka para ácido fraco e dados para pH e concentração\nKa <- 1e-5  # Constante de acidez padrão\n\n# Valores de pH e concentrações\npH_values <- seq(0, 14, 0.1)\nconc_H <- 10^(-pH_values)       # Concentração H+ para cada pH\nconc_OH <- 1e-14 / conc_H       # Concentração OH- com base no produto iônico da água\nconc_HA <- conc_H / (Ka + conc_H)  # Concentração HA para ácido fraco\nconc_A <- Ka * conc_HA             # Concentração A- \n\n# Data frame combinado\ndados_acidez <- data.frame(pH = pH_values, conc_H = conc_H, conc_OH = conc_OH, conc_HA = conc_HA, conc_A = conc_A)\n\n# Gráfico combinado interativo\nplot_ly(dados_acidez) %>%\n  add_lines(x = ~pH, y = ~conc_H, name = \"Concentração H+\", line = list(color = \"blue\")) %>%\n  add_lines(x = ~pH, y = ~conc_OH, name = \"Concentração OH-\", line = list(color = \"red\")) %>%\n  add_lines(x = ~pH, y = ~conc_HA, name = \"Concentração HA (ácido)\", line = list(color = \"purple\")) %>%\n  add_lines(x = ~pH, y = ~conc_A, name = \"Concentração A- (base conjugada)\", line = list(color = \"green\")) %>%\n  layout(\n    title = \"Curvas de Acidez, Basicidade e Dissociação de Ácido\",\n    xaxis = list(title = \"pH\"),\n    yaxis = list(title = \"Concentração (mol/L)\", type = \"log\"),\n    sliders = list(\n      list(\n        active = 5, \n        currentvalue = list(prefix = \"Ka = \"),\n        steps = lapply(seq(1e-7, 1e-3, length.out = 10), function(k) {\n          list(label = format(k, scientific = TRUE), method = \"update\",\n               args = list(list(\n                 y = list(\n                   10^(-pH_values),                    # Atualizar H+\n                   1e-14 / 10^(-pH_values),            # Atualizar OH-\n                   10^(-pH_values) / (k + 10^(-pH_values)), # Atualizar HA\n                   k * (10^(-pH_values) / (k + 10^(-pH_values))) # Atualizar A-\n                 )\n               )))\n        })\n      )\n    )\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\nadd_lines(x = ~pH, y = ~conc_H, name = \"H+ Concentration\", line = list(color = \"blue\", width = 2)) %>% # Increase the line thickness\nadd_lines(x = ~pH, y = ~conc_OH, name = \"OH- Concentration\", line = list(color = \"red\", width = 2)) %>% # Increase the line thickness\nadd_lines(x = ~pH, y = ~conc_HA, name = \"HA (acid) Concentration\", line = list(color = \"purple\", width = 2)) %>% # Increase the line thickness\nadd_lines(x = ~pH, y = ~conc_A, name = \"H+ Concentration\", line = list(color = \"purple\", width = 2)) %>% # Increase the line thickness\nadd_lines(x = ~pH, y = ~conc_A, name = \"H+ Concentration\", line = list(color = \"red ... A- (conjugate base)\", line = list(color = \"green\", width = 2)) %>% # Increase line thickness\n\n```\n\n</div>\n\n\\\n<!-- ########### RADIOACTIVE DECAY ################## -->\n\n<div class=\"quim-fundo\"> <!--modifies for each area-->\n\n## Radioactive decay and half-life (EM13CNT306, EM13MAT305, EM13CNT301)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Initial parameters\nN0 <- 100 # Initial amount\ntime <- seq(0, 50, by = 0.5) # Time interval\n\n# Decay function\nradioactive_decay <- function(t, half_life) {\nN0 * 0.5^(t / half_life)\n}\n\n# Plot with plotly\nfig <- plot_ly(x = ~time, y = ~radioactive_decay(time, 10), type = 'scatter', mode = 'lines', name = \"Decay\")\n\n# Adding the slider\nfig <- fig %>% layout(\ntitle = \"Radioactive Decay\",\nxaxis = list(title = \"Time\"),\nyaxis = list(title = \"Amount Remaining\"),\nsliders = list(list(\ncurrentvalue = list(prefix = \"Half-life = \"),\nsteps = lapply(seq(5, 30, by = 5), function(half_life) {\nlist(label = as.character(half_life), method = \"update\",\nargs = list(list(y = list(radioactive_decay(time, half_life)))))\n})\n))\n)\nfig\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Initial parameters\nN0 <- 100 # Initial quantity\ntime <- seq(0, 50, by = 0.5) # Time interval\n\n# Decay function\nradioactive_decay <- function(t, half_life) {\nN0 * 0.5^(t / half_life)\n}\n\n# Plot with plotly\nfig <- plot_ly(x = ~time, y = ~radioactive_decay(time, 10), type = 'scatter', mode = 'lines', name = \"Decay\")\n\n# Adding the slider\nfig <- fig %>% layout(\ntitle = \"Radioactive Decay\",\nxaxis = list(title = \"Time\"),\nyaxis = list(title = \"Remaining Amount\"),\nsliders = list(list(\ncurrentvalue = list(prefix = \"Half-life = \"),\nsteps = lapply(seq(5, 30, by = 5), function(half_life) {\nlist(label = as.character(half_life), method = \"update\",\nargs = list(list(y = list(radioactive_decay(time, half_life)))))\n})\n))\n)\n\nfig\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\nargs = list(list(y = list(radioactive_decay(time, half_life))), list(line = list(color = 'green'))))\n\n```\n\n</div>\n\n\\\n<!-- ########### H2O2 DECOMPOSITION ################## -->\n\n<div class=\"fundo-quim\"> <!--modifies for each area-->\n\n## Hydrogen peroxide decomposition (EM13CNT301, EM13MAT305, EM13CNT303)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Initial parameters\nH2O2_0 <- 1 # Initial H2O2 concentration\ntime <- seq(0, 10, 0.1) # Time interval\n\n# Decomposition function\ndecomposition <- function(t, k) H2O2_0 * exp(-k * t)\n\n# Plot with slider\nfig <- plot_ly(x = ~time, y = ~decomposition(time, 0.3), type = 'scatter', mode = 'lines') %>%\nlayout(\ntitle = \"H2O2 Decomposition\",\nxaxis = list(title = \"Time (hours)\"),\nyaxis = list(title = \"H2O2 Concentration (mol/L)\"),\nsliders = list(list(\ncurrentvalue = list(prefix = \"k = \"),\nsteps = lapply(seq(0.1, 1, 0.1), function(k) {\nlist(label = k, method = \"update\", args = list(list(y = list(decomposition(time, k)))))\n})\n))\n)\n\nfig\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Initial parameters\nH2O2_0 <- 1 # Initial concentration of H2O2\ntime <- seq(0, 10, 0.1) # Time interval\n\n# Decomposition function\ndecomposition <- function(t, k) H2O2_0 * exp(-k * t)\n\n# Plot with slider\nfig <- plot_ly(x = ~time, y = ~decomposition(time, 0.3), type = 'scatter', mode = 'lines') %>%\n layout(\n title = \"Decomposition of H2O2\",\n xaxis = list(title = \"Time (hours)\"),\n yaxis = list(title = \"H2O2 concentration (mol/L)\"),\n sliders = list(list(\n currentvalue = list(prefix = \"k = \"),\n steps = lapply(seq(0.1, 1, 0.1), function(k) {\n list(label = k, method = \"update\", args = list(list(y = list(decomposition(time, k)))))\n })\n ))\n )\n\nfig\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\nlist(label = k, method = \"update\", args = list(list(y = list(decomposition(time, k))), list(line = list(color = 'red'))))\n```\n\n</div>\n\n\\\n<!-- ########### PROUST'S LAW AND STOICHIOMETRY ################# -->\n\n<div class=\"quim-fundo\"> <!--modify for each area-->\n\n## Proust's law and reaction stoichiometry in 3D representation (EM13CNT101, EM13CNT202, EM13CNT201)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Initial amounts of reactants\nH2_mol <- 0:5 # Amount of H2 in mol\nO2_mol <- 0:5 # Amount of O2 in mol\n\n# Function to calculate H2O formed based on the stoichiometry 2:1:2\nform_H2O <- function(H2, O2) {\nmin(2 * H2, O2) / 2\n}\n\n# Data for the graph\ndata <- expand.grid(H2 = H2_mol, O2 = O2_mol)\ndata$H2O <- mapply(form_H2O, data$H2, data$O2)\n\n# Interactive graph with sliders for H2 and O2\nfig <- plot_ly(data, x = ~H2, y = ~O2, z = ~H2O, type = 'mesh3d', mode = 'markers') %>%\nlayout(\ntitle = \"Reaction Stoichiometry (Proust's Law)\",\nscene = list(\nxaxis = list(title = \"Amount of H2 (mol)\"),\nyaxis = list(title = \"Amount of O2 (mol)\"),\nzaxis = list(title = \"Amount of H2O formed (mol)\")\n)\n)\nfig\n```\n\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Initial quantities of reactants\nH2_mol <- 0:5 # Amount of H2 in mol\nO2_mol <- 0:5 # Amount of O2 in mol\n\n# Function to calculate H2O formed based on stoichiometry 2:1:2\nform_H2O <- function(H2, O2) {\nmin(2 * H2, O2) / 2\n}\n\n# Data for the graph\ndata <- expand.grid(H2 = H2_mol, O2 = O2_mol)\ndata$H2O <- mapply(form_H2O, data$H2, data$O2)\n\n# Interactive graph with sliders for H2 and O2\nfig <- plot_ly(data, x = ~H2, y = ~O2, z = ~H2O, type = 'mesh3d', mode = 'markers') %>%\nlayout(\ntitle = \"Reaction Stoichiometry (Proust's Law)\",\nscene = list(\nxaxis = list(title = \"Amount of H2 (mol)\"),\nyaxis = list(title = \"Amount of O2 (mol)\"),\nzaxis = list(title = \"Amount of H2O formed (mol)\")\n)\n)\n\nfig\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\nfig <- plot_ly(data, x = ~H2, y = ~O2, z = ~H2O, type = 'mesh3d', mode = 'markers',\nmarker = list(color = ~H2O, colorscale = 'Viridis', size = 10)) %>%\n\n```\n\n</div>\n\n\\\n<!-- ########### EQUILIBRIUM CONSTANT ################# -->\n\n<div class=\"quim-fundo\"> <!--modify for each area-->\n\n## Concentration of reactants and equilibrium dissociation constant (EM13CNT201, EM13CNT202, EM13CNT204)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Load required packages\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Set initial parameters\nA <- 1 # Concentration of A\nB <- 1 # Concentration of B\n\n# Function to calculate product concentrations based on constant K\ncalc_products <- function(K) sqrt(K * A * B)\n\n# Create the data set for different values ​​of K\ndata <- data.frame(\nK = seq(0.5, 3, by = 0.1)\n)\ndata$C <- calc_products(data$K)\ndata$D <- data$C\n\n# Transform data for bar visualization\ndata_long <- data.frame(\nK = rep(data$K, each = 4),\nSubstance = rep(c(\"A\", \"B\", \"C\", \"D\"), times = length(data$K)),\nConcentration = c(rep(A, length(data$K)), rep(B, length(data$K)), data$C, data$D)\n)\n# Create animated graph\np <- ggplot(data_long, aes(x = Substance, y = Concentration, fill = Substance)) +\ngeom_bar(stat = \"identity\", position = \"dodge\") +\nlabs(title = 'Chemical Equilibrium - Equilibrium Constant (K): {closest_state}',\nx = 'Substances', y = 'Concentration (mol/L)') +\ntransition_states(K, transition_length = 2, state_length = 1) + ease_aes('linear')\n\n# Display the graph\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Load required packages\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Set the initial parameters\nA <- 1 # Concentration of A\nB <- 1 # Concentration of B\n\n# Function to calculate the concentrations of products based on the constant K\ncalc_products <- function(K) sqrt(K * A * B)\n\n# Create the dataset for different values ​​of K\ndata <- data.frame(\nK = seq(0.5, 3, by = 0.1)\n)\ndata$C <- calc_products(data$K)\ndata$D <- data$C\n\n# Transform data to display bars\ndata_long <- data.frame(\nK = rep(data$K, each = 4),\nSubstance = rep(c(\"A\", \"B\", \"C\", \"D\"), times = length(data$K)),\nConcentration = c(rep(A, length(data$K)), rep(B, length(data$K)), data$C, data$D)\n)\n\n# Create animated graph\np <- ggplot(data_long, aes(x = Substance, y = Concentration, fill = Substance)) +\ngeom_bar(stat = \"identity\", position = \"dodge\") +\nlabs(title = 'Chemical Equilibrium - Equilibrium Constant (K): {closest_state}',\nx = 'Substances', y = 'Concentration (mol/L)') +\ntransition_states(K, transition_length = 2, state_length = 1) +\nease_aes('linear')\n\n# Show the graph\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval =FALSE}\nscale_fill_manual(values ​​= c(\"A\" = \"blue\", \"B\" = \"green\", \"C\" = \"red\", \"D\" = \"purple\")) # Defined a custom color palette\n\n```\n\n</div>\n\n\\\n\n","srcMarkdownNoYaml":"\n\n<!-- ########### IDEAL GAS LAW ################## -->\n\n<div class=\"quim-fundo\"> <!--modifies for each area-->\n\n## Ideal Gas Law (EM13CNT101, EM13CNT204, EM13CNT205, EM13CNT207, EM13CNT303)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Dados:\nR = 8.314 # J/(mol*K), constante geral dos gases ideias\nV = seq(0,22.4, length.out=50)  # vetor de \"Volume\" (em litros), com 50 pontos\nT = 298 # K, temperatura absoluta\n\n\n# Equação\n# pV = RT; p = RT/V\np = R*T/V\n\nlibrary(plotly)\nlibrary(magrittr) # biblioteca para o operador pipe \"%>%\"\nplot_ly(x = V, y = ~R*T/V, type = 'scatter', mode='lines') %>%\n  layout(\n    title = \"Transformação Isotérmica de um Gás\",\n    xaxis = list(title = \"Volume V, L\", range=c(-1,24)),\n    yaxis = list(title = \"Pressão p, Pascal\")\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Dados:\nR = 8.314 # J/(mol*K), constante geral dos gases ideias\nV = seq(0,22.4, length.out=50)  # vetor de \"Volume\" (em litros), com 50 pontos\nT = 298 # K, temperatura absoluta\n\n\n# Equação\n# pV = RT; p = RT/V\np = R*T/V\n\nlibrary(plotly)\nlibrary(magrittr) # biblioteca para o operador pipe \"%>%\"\nplot_ly(x = V, y = ~R*T/V, type = 'scatter', mode='lines') %>%\n  layout(\n    title = \"Transformação Isotérmica de um Gás\",\n    xaxis = list(title = \"Volume V, L\", range=c(-1,24)),\n    yaxis = list(title = \"Pressão p, Pascal\")\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\nplot_ly(x = V, y = ~R*T/V, type = 'scatter', mode='lines', line = list(color = \"red\", width = 3)) %>% # Changing the color and width of the line\n```\n\n</div>\n\n\\\n<!-- ########### REAGENT AND PRODUCT CURVE ################# -->\n\n<div class=\"quim-fundo\"> <!--modifies for each area-->\n\n## Reagent consumption and product formation curves (EM13CNT301, EM13MAT304, EM13CNT306)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\nlibrary(gifski)\n\n# Dados simulados de tempo, reagente e produto\ntempo <- seq(0, 10, length.out = 100)           # 0 a 10 segundos\nreagente <- 100 * exp(-0.3 * tempo)             # Decaimento exponencial\nproduto <- 100 * (1 - exp(-0.3 * tempo))        # Formação de produto\n\n# Criando um dataframe para o gráfico\ndados <- data.frame(Tempo = tempo, Reagente = reagente, Produto = produto)\n\n# Gráfico animado de consumo de reagente e formação de produto\np <- ggplot(dados, aes(x = Tempo)) +\n  geom_line(aes(y = Reagente, color = \"Reagente\"), linewidth = 1.2) +\n  geom_line(aes(y = Produto, color = \"Produto\"), linewidth = 1.2) +\n  scale_color_manual(values = c(\"Reagente\" = \"blue\", \"Produto\" = \"red\")) +\n  labs(title = \"Consumo de Reagente e Formação de Produto ao Longo do Tempo\",\n       x = \"Tempo (s)\", y = \"Quantidade (mol)\", color = \"Substância\") +\n  transition_reveal(Tempo) +\n  theme_minimal()\n\n# Exibindo o gráfico animado\nanimate(p, renderer = gifski_renderer())\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\nlibrary(gifski)\n\n# Dados simulados de tempo, reagente e produto\ntempo <- seq(0, 10, length.out = 100)           # 0 a 10 segundos\nreagente <- 100 * exp(-0.3 * tempo)             # Decaimento exponencial\nproduto <- 100 * (1 - exp(-0.3 * tempo))        # Formação de produto\n\n# Criando um dataframe para o gráfico\ndados <- data.frame(Tempo = tempo, Reagente = reagente, Produto = produto)\n\n# Gráfico animado de consumo de reagente e formação de produto\np <- ggplot(dados, aes(x = Tempo)) +\n  geom_line(aes(y = Reagente, color = \"Reagente\"), linewidth = 1.2) +\n  geom_line(aes(y = Produto, color = \"Produto\"), linewidth = 1.2) +\n  scale_color_manual(values = c(\"Reagente\" = \"blue\", \"Produto\" = \"red\")) +\n  labs(title = \"Consumo de Reagente e Formação de Produto ao Longo do Tempo\",\n       x = \"Tempo (s)\", y = \"Quantidade (mol)\", color = \"Substância\") +\n  transition_reveal(Tempo) +\n  theme_minimal()\n\n# Exibindo o gráfico animado\nanimate(p, renderer = gifski_renderer())\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\nscale_color_manual(values ​​= c(\"Reagent\" = \"green\", \"Product\" = \"purple\")) + # Change in colors\n\n```\n\n</div>\n\n\\\n<!-- ########### DISSOCIATION EQUILIBRIUM ################## -->\n\n<div class=\"quim-fundo\"> <!--modifies for each area-->\n\n## Dissociation equilibrium of weak acids and bases (EM13CNT303, EM13MAT305, EM13CNT304)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Parâmetro inicial de Ka para ácido fraco e dados para pH e concentração\nKa <- 1e-5  # Constante de acidez padrão\n\n# Valores de pH e concentrações\npH_values <- seq(0, 14, 0.1)\nconc_H <- 10^(-pH_values)       # Concentração H+ para cada pH\nconc_OH <- 1e-14 / conc_H       # Concentração OH- com base no produto iônico da água\nconc_HA <- conc_H / (Ka + conc_H)  # Concentração HA para ácido fraco\nconc_A <- Ka * conc_HA             # Concentração A- \n\n# Data frame combinado\ndados_acidez <- data.frame(pH = pH_values, conc_H = conc_H, conc_OH = conc_OH, conc_HA = conc_HA, conc_A = conc_A)\n\n# Gráfico combinado interativo\nplot_ly(dados_acidez) %>%\n  add_lines(x = ~pH, y = ~conc_H, name = \"Concentração H+\", line = list(color = \"blue\")) %>%\n  add_lines(x = ~pH, y = ~conc_OH, name = \"Concentração OH-\", line = list(color = \"red\")) %>%\n  add_lines(x = ~pH, y = ~conc_HA, name = \"Concentração HA (ácido)\", line = list(color = \"purple\")) %>%\n  add_lines(x = ~pH, y = ~conc_A, name = \"Concentração A- (base conjugada)\", line = list(color = \"green\")) %>%\n  layout(\n    title = \"Curvas de Acidez, Basicidade e Dissociação de Ácido\",\n    xaxis = list(title = \"pH\"),\n    yaxis = list(title = \"Concentração (mol/L)\", type = \"log\"),\n    sliders = list(\n      list(\n        active = 5, \n        currentvalue = list(prefix = \"Ka = \"),\n        steps = lapply(seq(1e-7, 1e-3, length.out = 10), function(k) {\n          list(label = format(k, scientific = TRUE), method = \"update\",\n               args = list(list(\n                 y = list(\n                   10^(-pH_values),                    # Atualizar H+\n                   1e-14 / 10^(-pH_values),            # Atualizar OH-\n                   10^(-pH_values) / (k + 10^(-pH_values)), # Atualizar HA\n                   k * (10^(-pH_values) / (k + 10^(-pH_values))) # Atualizar A-\n                 )\n               )))\n        })\n      )\n    )\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Parâmetro inicial de Ka para ácido fraco e dados para pH e concentração\nKa <- 1e-5  # Constante de acidez padrão\n\n# Valores de pH e concentrações\npH_values <- seq(0, 14, 0.1)\nconc_H <- 10^(-pH_values)       # Concentração H+ para cada pH\nconc_OH <- 1e-14 / conc_H       # Concentração OH- com base no produto iônico da água\nconc_HA <- conc_H / (Ka + conc_H)  # Concentração HA para ácido fraco\nconc_A <- Ka * conc_HA             # Concentração A- \n\n# Data frame combinado\ndados_acidez <- data.frame(pH = pH_values, conc_H = conc_H, conc_OH = conc_OH, conc_HA = conc_HA, conc_A = conc_A)\n\n# Gráfico combinado interativo\nplot_ly(dados_acidez) %>%\n  add_lines(x = ~pH, y = ~conc_H, name = \"Concentração H+\", line = list(color = \"blue\")) %>%\n  add_lines(x = ~pH, y = ~conc_OH, name = \"Concentração OH-\", line = list(color = \"red\")) %>%\n  add_lines(x = ~pH, y = ~conc_HA, name = \"Concentração HA (ácido)\", line = list(color = \"purple\")) %>%\n  add_lines(x = ~pH, y = ~conc_A, name = \"Concentração A- (base conjugada)\", line = list(color = \"green\")) %>%\n  layout(\n    title = \"Curvas de Acidez, Basicidade e Dissociação de Ácido\",\n    xaxis = list(title = \"pH\"),\n    yaxis = list(title = \"Concentração (mol/L)\", type = \"log\"),\n    sliders = list(\n      list(\n        active = 5, \n        currentvalue = list(prefix = \"Ka = \"),\n        steps = lapply(seq(1e-7, 1e-3, length.out = 10), function(k) {\n          list(label = format(k, scientific = TRUE), method = \"update\",\n               args = list(list(\n                 y = list(\n                   10^(-pH_values),                    # Atualizar H+\n                   1e-14 / 10^(-pH_values),            # Atualizar OH-\n                   10^(-pH_values) / (k + 10^(-pH_values)), # Atualizar HA\n                   k * (10^(-pH_values) / (k + 10^(-pH_values))) # Atualizar A-\n                 )\n               )))\n        })\n      )\n    )\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\nadd_lines(x = ~pH, y = ~conc_H, name = \"H+ Concentration\", line = list(color = \"blue\", width = 2)) %>% # Increase the line thickness\nadd_lines(x = ~pH, y = ~conc_OH, name = \"OH- Concentration\", line = list(color = \"red\", width = 2)) %>% # Increase the line thickness\nadd_lines(x = ~pH, y = ~conc_HA, name = \"HA (acid) Concentration\", line = list(color = \"purple\", width = 2)) %>% # Increase the line thickness\nadd_lines(x = ~pH, y = ~conc_A, name = \"H+ Concentration\", line = list(color = \"purple\", width = 2)) %>% # Increase the line thickness\nadd_lines(x = ~pH, y = ~conc_A, name = \"H+ Concentration\", line = list(color = \"red ... A- (conjugate base)\", line = list(color = \"green\", width = 2)) %>% # Increase line thickness\n\n```\n\n</div>\n\n\\\n<!-- ########### RADIOACTIVE DECAY ################## -->\n\n<div class=\"quim-fundo\"> <!--modifies for each area-->\n\n## Radioactive decay and half-life (EM13CNT306, EM13MAT305, EM13CNT301)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Initial parameters\nN0 <- 100 # Initial amount\ntime <- seq(0, 50, by = 0.5) # Time interval\n\n# Decay function\nradioactive_decay <- function(t, half_life) {\nN0 * 0.5^(t / half_life)\n}\n\n# Plot with plotly\nfig <- plot_ly(x = ~time, y = ~radioactive_decay(time, 10), type = 'scatter', mode = 'lines', name = \"Decay\")\n\n# Adding the slider\nfig <- fig %>% layout(\ntitle = \"Radioactive Decay\",\nxaxis = list(title = \"Time\"),\nyaxis = list(title = \"Amount Remaining\"),\nsliders = list(list(\ncurrentvalue = list(prefix = \"Half-life = \"),\nsteps = lapply(seq(5, 30, by = 5), function(half_life) {\nlist(label = as.character(half_life), method = \"update\",\nargs = list(list(y = list(radioactive_decay(time, half_life)))))\n})\n))\n)\nfig\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Initial parameters\nN0 <- 100 # Initial quantity\ntime <- seq(0, 50, by = 0.5) # Time interval\n\n# Decay function\nradioactive_decay <- function(t, half_life) {\nN0 * 0.5^(t / half_life)\n}\n\n# Plot with plotly\nfig <- plot_ly(x = ~time, y = ~radioactive_decay(time, 10), type = 'scatter', mode = 'lines', name = \"Decay\")\n\n# Adding the slider\nfig <- fig %>% layout(\ntitle = \"Radioactive Decay\",\nxaxis = list(title = \"Time\"),\nyaxis = list(title = \"Remaining Amount\"),\nsliders = list(list(\ncurrentvalue = list(prefix = \"Half-life = \"),\nsteps = lapply(seq(5, 30, by = 5), function(half_life) {\nlist(label = as.character(half_life), method = \"update\",\nargs = list(list(y = list(radioactive_decay(time, half_life)))))\n})\n))\n)\n\nfig\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\nargs = list(list(y = list(radioactive_decay(time, half_life))), list(line = list(color = 'green'))))\n\n```\n\n</div>\n\n\\\n<!-- ########### H2O2 DECOMPOSITION ################## -->\n\n<div class=\"fundo-quim\"> <!--modifies for each area-->\n\n## Hydrogen peroxide decomposition (EM13CNT301, EM13MAT305, EM13CNT303)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Initial parameters\nH2O2_0 <- 1 # Initial H2O2 concentration\ntime <- seq(0, 10, 0.1) # Time interval\n\n# Decomposition function\ndecomposition <- function(t, k) H2O2_0 * exp(-k * t)\n\n# Plot with slider\nfig <- plot_ly(x = ~time, y = ~decomposition(time, 0.3), type = 'scatter', mode = 'lines') %>%\nlayout(\ntitle = \"H2O2 Decomposition\",\nxaxis = list(title = \"Time (hours)\"),\nyaxis = list(title = \"H2O2 Concentration (mol/L)\"),\nsliders = list(list(\ncurrentvalue = list(prefix = \"k = \"),\nsteps = lapply(seq(0.1, 1, 0.1), function(k) {\nlist(label = k, method = \"update\", args = list(list(y = list(decomposition(time, k)))))\n})\n))\n)\n\nfig\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Initial parameters\nH2O2_0 <- 1 # Initial concentration of H2O2\ntime <- seq(0, 10, 0.1) # Time interval\n\n# Decomposition function\ndecomposition <- function(t, k) H2O2_0 * exp(-k * t)\n\n# Plot with slider\nfig <- plot_ly(x = ~time, y = ~decomposition(time, 0.3), type = 'scatter', mode = 'lines') %>%\n layout(\n title = \"Decomposition of H2O2\",\n xaxis = list(title = \"Time (hours)\"),\n yaxis = list(title = \"H2O2 concentration (mol/L)\"),\n sliders = list(list(\n currentvalue = list(prefix = \"k = \"),\n steps = lapply(seq(0.1, 1, 0.1), function(k) {\n list(label = k, method = \"update\", args = list(list(y = list(decomposition(time, k)))))\n })\n ))\n )\n\nfig\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\nlist(label = k, method = \"update\", args = list(list(y = list(decomposition(time, k))), list(line = list(color = 'red'))))\n```\n\n</div>\n\n\\\n<!-- ########### PROUST'S LAW AND STOICHIOMETRY ################# -->\n\n<div class=\"quim-fundo\"> <!--modify for each area-->\n\n## Proust's law and reaction stoichiometry in 3D representation (EM13CNT101, EM13CNT202, EM13CNT201)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Initial amounts of reactants\nH2_mol <- 0:5 # Amount of H2 in mol\nO2_mol <- 0:5 # Amount of O2 in mol\n\n# Function to calculate H2O formed based on the stoichiometry 2:1:2\nform_H2O <- function(H2, O2) {\nmin(2 * H2, O2) / 2\n}\n\n# Data for the graph\ndata <- expand.grid(H2 = H2_mol, O2 = O2_mol)\ndata$H2O <- mapply(form_H2O, data$H2, data$O2)\n\n# Interactive graph with sliders for H2 and O2\nfig <- plot_ly(data, x = ~H2, y = ~O2, z = ~H2O, type = 'mesh3d', mode = 'markers') %>%\nlayout(\ntitle = \"Reaction Stoichiometry (Proust's Law)\",\nscene = list(\nxaxis = list(title = \"Amount of H2 (mol)\"),\nyaxis = list(title = \"Amount of O2 (mol)\"),\nzaxis = list(title = \"Amount of H2O formed (mol)\")\n)\n)\nfig\n```\n\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Initial quantities of reactants\nH2_mol <- 0:5 # Amount of H2 in mol\nO2_mol <- 0:5 # Amount of O2 in mol\n\n# Function to calculate H2O formed based on stoichiometry 2:1:2\nform_H2O <- function(H2, O2) {\nmin(2 * H2, O2) / 2\n}\n\n# Data for the graph\ndata <- expand.grid(H2 = H2_mol, O2 = O2_mol)\ndata$H2O <- mapply(form_H2O, data$H2, data$O2)\n\n# Interactive graph with sliders for H2 and O2\nfig <- plot_ly(data, x = ~H2, y = ~O2, z = ~H2O, type = 'mesh3d', mode = 'markers') %>%\nlayout(\ntitle = \"Reaction Stoichiometry (Proust's Law)\",\nscene = list(\nxaxis = list(title = \"Amount of H2 (mol)\"),\nyaxis = list(title = \"Amount of O2 (mol)\"),\nzaxis = list(title = \"Amount of H2O formed (mol)\")\n)\n)\n\nfig\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\nfig <- plot_ly(data, x = ~H2, y = ~O2, z = ~H2O, type = 'mesh3d', mode = 'markers',\nmarker = list(color = ~H2O, colorscale = 'Viridis', size = 10)) %>%\n\n```\n\n</div>\n\n\\\n<!-- ########### EQUILIBRIUM CONSTANT ################# -->\n\n<div class=\"quim-fundo\"> <!--modify for each area-->\n\n## Concentration of reactants and equilibrium dissociation constant (EM13CNT201, EM13CNT202, EM13CNT204)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Load required packages\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Set initial parameters\nA <- 1 # Concentration of A\nB <- 1 # Concentration of B\n\n# Function to calculate product concentrations based on constant K\ncalc_products <- function(K) sqrt(K * A * B)\n\n# Create the data set for different values ​​of K\ndata <- data.frame(\nK = seq(0.5, 3, by = 0.1)\n)\ndata$C <- calc_products(data$K)\ndata$D <- data$C\n\n# Transform data for bar visualization\ndata_long <- data.frame(\nK = rep(data$K, each = 4),\nSubstance = rep(c(\"A\", \"B\", \"C\", \"D\"), times = length(data$K)),\nConcentration = c(rep(A, length(data$K)), rep(B, length(data$K)), data$C, data$D)\n)\n# Create animated graph\np <- ggplot(data_long, aes(x = Substance, y = Concentration, fill = Substance)) +\ngeom_bar(stat = \"identity\", position = \"dodge\") +\nlabs(title = 'Chemical Equilibrium - Equilibrium Constant (K): {closest_state}',\nx = 'Substances', y = 'Concentration (mol/L)') +\ntransition_states(K, transition_length = 2, state_length = 1) + ease_aes('linear')\n\n# Display the graph\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Load required packages\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Set the initial parameters\nA <- 1 # Concentration of A\nB <- 1 # Concentration of B\n\n# Function to calculate the concentrations of products based on the constant K\ncalc_products <- function(K) sqrt(K * A * B)\n\n# Create the dataset for different values ​​of K\ndata <- data.frame(\nK = seq(0.5, 3, by = 0.1)\n)\ndata$C <- calc_products(data$K)\ndata$D <- data$C\n\n# Transform data to display bars\ndata_long <- data.frame(\nK = rep(data$K, each = 4),\nSubstance = rep(c(\"A\", \"B\", \"C\", \"D\"), times = length(data$K)),\nConcentration = c(rep(A, length(data$K)), rep(B, length(data$K)), data$C, data$D)\n)\n\n# Create animated graph\np <- ggplot(data_long, aes(x = Substance, y = Concentration, fill = Substance)) +\ngeom_bar(stat = \"identity\", position = \"dodge\") +\nlabs(title = 'Chemical Equilibrium - Equilibrium Constant (K): {closest_state}',\nx = 'Substances', y = 'Concentration (mol/L)') +\ntransition_states(K, transition_length = 2, state_length = 1) +\nease_aes('linear')\n\n# Show the graph\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval =FALSE}\nscale_fill_manual(values ​​= c(\"A\" = \"blue\", \"B\" = \"green\", \"C\" = \"red\", \"D\" = \"purple\")) # Defined a custom color palette\n\n```\n\n</div>\n\n\\\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"number-sections":true,"toc":true,"output-file":"quimica_en.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.29","theme":{"light":"flatly"},"title":"Chemistry","class":"fundo-basico"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}