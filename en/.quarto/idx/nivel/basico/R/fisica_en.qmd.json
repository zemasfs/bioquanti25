{"title":"Physics","markdown":{"yaml":{"title":"Physics","number-sections":true,"toc":true,"lang":"en","class":"fundo-basico"},"headingText":"Electric field and distance (EM13MAT305, EM13CNT302)","containsRefs":false,"markdown":"\n\n<!-- ############## ELECTRIC FIELD AND DISTANCE ################ -->\n\n<div class=\"fis-fundo\"> <!--modifies for each area-->\n\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Constant k0 (approximately 8.99 × 10^9 N m²/C²)\nk0 <- 8.99e9\n\n# Distance values ​​(avoiding d = 0 to avoid dividing by zero)\nd <- seq(0.1, 10, length.out = 100)\n\n# Function to calculate the electric field\ncalcular_field <- function(Q, d) {\nk0 * Q / d^2\n}\n\n# Initial values ​​of Q\nQ_inicial <- 1e-6 # Initial charge in Coulombs\n\n# Interactive graph with slider to change Q\nplot_ly(x = ~d, y = ~calcular_field(Q_inicial, d), type = 'scatter', mode = 'lines') %>%\nlayout(\ntitle = 'Electric Field (E) as a Function of Distance (d)',\nxaxis = list(title = 'Distance (m)'),\nyaxis = list(title = 'Electric Field (N/C)', type = 'log'),\nsliders = list(\nlist(\nactive = 0,\ncurrentvalue = list(prefix = \"Charge (Q): \"),\nsteps = lapply(seq(1e-7, 1e-5, length.out = 10), function(Q_value) {\nlist(\nlabel = sprintf(\"%.1e\", Q_value),\nmethod = \"restyle\",\nargs = list('y', list(calcular_field(Q_value, d)))\n)\n})\n)\n)\n)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Constant k0 (approximately 8.99 × 10^9 N m²/C²)\nk0 <- 8.99e9\n\n# Distance values ​​(avoiding d = 0 to avoid dividing by zero)\nd <- seq(0.1, 10, length.out = 100)\n\n# Function to calculate the electric field\ncalcular_campo <- function(Q, d) {\nk0 * Q / d^2\n}\n\n# Initial values ​​of Q\nQ_inicial <- 1e-6 # Initial charge in Coulombs\n\n# Interactive graph with slider to change Q\nplot_ly(x = ~d, y = ~calcular_campo(Q_inicial, d), type = 'scatter', mode = 'lines') %>%\nlayout(\ntitle = 'Electric Field (E) as a Function of Distance (d)',\nxaxis = list(title = 'Distance (m)'),\nyaxis = list(title = 'Electric Field (N/C)', type = 'log'),\nsliders = list(\nlist(\nactive = 0,\ncurrentvalue = list(prefix = \"Charge (Q): \"),\n steps = lapply(seq(1e-7, 1e-5, length.out = 10), function(Q_value) {\n list(\n label = sprintf(\"%.1e\", Q_value),\n method = \"restyle\",\n args = list('y', list(calcular_campo(Q_value, d)))\n )\n })\n )\n )\n )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\nxaxis = list(title = 'Distance (m)', range = c(0, 10)), # Define the range for the X axis\nyaxis = list(title = 'Electric Field (N/C)', type = 'log', range = c(1e3, 1e12)), # Adjust the scale of the Y axis\n\n```\n\n</div>\n\n\\\n<!-- ############## MRUV ################ -->\n\n<div class=\"fis-fundo\"> <!--modifies for each area-->\n\n## Uniformly varied rectilinear motion - MRUV (EM13CNT203, EM13CNT204)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Função para calcular a posição em MRUV\ncalcular_mruv <- function(s0, v0, a, t) {\n  s0 + v0 * t + 0.5 * a * t^2\n}\n\n# Dados\ns0 <- 0\nv0 <- 5\nt <- seq(0, 10, length.out = 100)\na_values <- seq(0, 5, by = 1)\n\n# Criando um dataframe com os dados\ndados_mruv <- data.frame()\nfor (a in a_values) {\n  for (time in t) {\n    pos <- calcular_mruv(s0, v0, a, time)\n    dados_mruv <- rbind(dados_mruv, data.frame(Tempo = time, Posição = pos, Aceleração = a))\n  }\n}\n\n# Gráfico animado para MRUV\nggplot(dados_mruv, aes(x = Tempo, y = Posição, group = Aceleração)) +\n  geom_line(aes(color = as.factor(Aceleração))) +\n  labs(title = 'MRUV: Posição em Função do Tempo',\n       subtitle = 'Aceleração = {frame_time} m/s²',\n       x = 'Tempo (s)', y = 'Posição (m)', color = 'Aceleração') +\n  transition_time(Aceleração) +\n  ease_aes('linear')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Função para calcular a posição em MRUV\ncalcular_mruv <- function(s0, v0, a, t) {\n  s0 + v0 * t + 0.5 * a * t^2\n}\n\n# Dados\ns0 <- 0\nv0 <- 5\nt <- seq(0, 10, length.out = 100)\na_values <- seq(0, 5, by = 1)\n\n# Criando um dataframe com os dados\ndados_mruv <- data.frame()\nfor (a in a_values) {\n  for (time in t) {\n    pos <- calcular_mruv(s0, v0, a, time)\n    dados_mruv <- rbind(dados_mruv, data.frame(Tempo = time, Posição = pos, Aceleração = a))\n  }\n}\n\n# Gráfico animado para MRUV\nggplot(dados_mruv, aes(x = Tempo, y = Posição, group = Aceleração)) +\n  geom_line(aes(color = as.factor(Aceleração))) +\n  labs(title = 'MRUV: Posição em Função do Tempo',\n       subtitle = 'Aceleração = {frame_time} m/s²',\n       x = 'Tempo (s)', y = 'Posição (m)', color = 'Aceleração') +\n  transition_time(Aceleração) +\n  ease_aes('linear')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Inside the ggplot() function\nscale_color_manual(values ​​= c(\"0\" = \"blue\", \"1\" = \"red\", \"2\" = \"green\", \"3\" = \"purple\", \"4\" = \"orange\", \"5\" = \"brown\")) + # Define specific colors for each acceleration\n\n```\n\n</div>\n\n\\\n<!-- ############## GRAVITATIONAL FORCE AND DISTANCE ############### -->\n\n<div class=\"fis-fundo\"> <!--modifies for each area-->\n\n## Gravitational force and distance (EM13CNT401, EM13CNT402)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Função para calcular a força gravitacional\ncalcular_gravitacional <- function(m1, m2, d) {\n  G <- 6.67e-11\n  G * m1 * m2 / d^2\n}\n\n# Dados\nm1 <- 5.97e24  # Massa da Terra em kg\nm2_values <- seq(1e22, 1e24, length.out = 5)\nd <- seq(1e6, 4e8, length.out = 100)\n\n# Criando um dataframe com os dados\ndados_gravitacional <- data.frame()\nfor (m2 in m2_values) {\n  for (distancia in d) {\n    forca <- calcular_gravitacional(m1, m2, distancia)\n    dados_gravitacional <- rbind(dados_gravitacional, data.frame(Distância = distancia, Força = forca, Massa = m2))\n  }\n}\n\n# Gráfico animado para força gravitacional\nggplot(dados_gravitacional, aes(x = Distância, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força Gravitacional em Função da Distância',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Distância (m)', y = 'Força Gravitacional (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Função para calcular a força gravitacional\ncalcular_gravitacional <- function(m1, m2, d) {\n  G <- 6.67e-11\n  G * m1 * m2 / d^2\n}\n\n# Dados\nm1 <- 5.97e24  # Massa da Terra em kg\nm2_values <- seq(1e22, 1e24, length.out = 5)\nd <- seq(1e6, 4e8, length.out = 100)\n\n# Criando um dataframe com os dados\ndados_gravitacional <- data.frame()\nfor (m2 in m2_values) {\n  for (distancia in d) {\n    forca <- calcular_gravitacional(m1, m2, distancia)\n    dados_gravitacional <- rbind(dados_gravitacional, data.frame(Distância = distancia, Força = forca, Massa = m2))\n  }\n}\n\n# Gráfico animado para força gravitacional\nggplot(dados_gravitacional, aes(x = Distância, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força Gravitacional em Função da Distância',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Distância (m)', y = 'Força Gravitacional (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Inside the ggplot() function\ntheme_minimal() + # Simple theme\n\n```\n\n</div>\n\n\\\n<!-- ############## 2nd. NEWTON'S LAW ################ -->\n\n<div class=\"fis-fundo\"> <!--modify for each area-->\n\n## 2nd. Newton's Law - Mass and Acceleration (EM13CNT202, EM13CNT203)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Função para calcular a força\ncalcular_forca <- function(m, a) {\n  m * a\n}\n\n# Dados\na <- seq(0, 10, length.out = 100)\nm_values <- seq(1, 20, by = 5)\n\n# Criando um dataframe com os dados\ndados_newton <- data.frame()\nfor (m in m_values) {\n  for (aceleracao in a) {\n    forca <- calcular_forca(m, aceleracao)\n    dados_newton <- rbind(dados_newton, data.frame(Aceleração = aceleracao, Força = forca, Massa = m))\n  }\n}\n\n# Gráfico animado para Segunda Lei de Newton\nggplot(dados_newton, aes(x = Aceleração, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força (F) em Função da Aceleração (a)',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Aceleração (m/s²)', y = 'Força (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Função para calcular a força\ncalcular_forca <- function(m, a) {\n  m * a\n}\n\n# Dados\na <- seq(0, 10, length.out = 100)\nm_values <- seq(1, 20, by = 5)\n\n# Criando um dataframe com os dados\ndados_newton <- data.frame()\nfor (m in m_values) {\n  for (aceleracao in a) {\n    forca <- calcular_forca(m, aceleracao)\n    dados_newton <- rbind(dados_newton, data.frame(Aceleração = aceleracao, Força = forca, Massa = m))\n  }\n}\n\n# Gráfico animado para Segunda Lei de Newton\nggplot(dados_newton, aes(x = Aceleração, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força (F) em Função da Aceleração (a)',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Aceleração (m/s²)', y = 'Força (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\ngeom_line(aes(color = as.factor(Massa)), size = 1) + # Lines with default thickness\n```\n\n</div>\n\n\\\n<!-- ############## OHM'S LAW ################ -->\n\n<div class=\"fis-fundo\"> <!--modify for each area-->\n\n## Ohm's Law - resistance, potential, and current (EM13CNT303, EM13CNT304)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados\nresistencias <- seq(1, 10, by = 1)  # Resistência de 1 a 10 Ohms\ncorrente <- seq(0, 5, length.out = 100)  # Corrente de 0 a 5 Amperes\ndados <- data.frame()\n\n# Criando um dataframe com os dados\nfor (R in resistencias) {\n  for (I in corrente) {\n    V <- I * R  # Calculando a Tensão\n    P <- V * I  # Calculando a Potência\n    dados <- rbind(dados, data.frame(Corrente = I, Resistência = R, Tensão = V, Potência = P))\n  }\n}\n\n# Gráfico animado para Lei de Ohm e Potência\np <- ggplot(dados, aes(x = Corrente, y = Tensão)) +\n  geom_line(aes(color = as.factor(Resistência), group = Resistência)) +\n  geom_point(aes(size = Potência), alpha = 0.5) +\n  labs(title = 'Lei de Ohm: Tensão vs Corrente',\n       subtitle = 'Resistência = {frame_time} Ohms',\n       x = 'Corrente (A)', y = 'Tensão (V)', color = 'Resistência', size = 'Potência (W)') +\n  transition_time(Resistência) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados\nresistencias <- seq(1, 10, by = 1)  # Resistência de 1 a 10 Ohms\ncorrente <- seq(0, 5, length.out = 100)  # Corrente de 0 a 5 Amperes\ndados <- data.frame()\n\n# Criando um dataframe com os dados\nfor (R in resistencias) {\n  for (I in corrente) {\n    V <- I * R  # Calculando a Tensão\n    P <- V * I  # Calculando a Potência\n    dados <- rbind(dados, data.frame(Corrente = I, Resistência = R, Tensão = V, Potência = P))\n  }\n}\n\n# Gráfico animado para Lei de Ohm e Potência\np <- ggplot(dados, aes(x = Corrente, y = Tensão)) +\n  geom_line(aes(color = as.factor(Resistência), group = Resistência)) +\n  geom_point(aes(size = Potência), alpha = 0.5) +\n  labs(title = 'Lei de Ohm: Tensão vs Corrente',\n       subtitle = 'Resistência = {frame_time} Ohms',\n       x = 'Corrente (A)', y = 'Tensão (V)', color = 'Resistência', size = 'Potência (W)') +\n  transition_time(Resistência) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\ngeom_point(aes(size = Power), alpha = 0.6) + # Points with size according to power\n\n```\n\n</div>\n\n\\\n<!-- ############## POWER AND ENERGY CONSUMPTION ############### -->\n\n<div class=\"fis-fundo\"> <!--modify for each area-->\n\n## Electricity and residential consumption (EM13CNT405, EM13CNT306)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados dos eletrodomésticos (potência em kW)\neletrodomesticos <- data.frame(\n  Nome = c(\"Lâmpada\", \"Ventilador\", \"Geladeira\", \"Computador\"),\n  Potencia = c(0.1, 0.15, 0.2, 0.5)  # Potências em kW\n)\n\n# Tempo (em horas) para o qual calculamos o consumo\ntempo <- seq(0, 24, length.out = 100)  # 0 a 24 horas\n\n# Criando um dataframe com o consumo de energia\ndados_consumo <- data.frame()\n\nfor (i in 1:nrow(eletrodomesticos)) {\n  consumo <- eletrodomesticos$Potencia[i] * tempo  # Consumo em kWh\n  dados_consumo <- rbind(dados_consumo, \n                          data.frame(Tempo = tempo, \n                                     Consumo = consumo, \n                                     Eletrodomestico = eletrodomesticos$Nome[i]))\n}\n\n# Gráfico animado para o consumo de energia\np <- ggplot(dados_consumo, aes(x = Tempo, y = Consumo, color = Eletrodomestico, group = Eletrodomestico)) +\n  geom_line(size = 1.2) +\n  labs(title = 'Consumo de Energia Residencial (kWh)',\n       x = 'Tempo (horas)', y = 'Consumo (kWh)', color = 'Eletrodoméstico') +\n  transition_states(Eletrodomestico, transition_length = 2, state_length = 1) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados dos eletrodomésticos (potência em kW)\neletrodomesticos <- data.frame(\n  Nome = c(\"Lâmpada\", \"Ventilador\", \"Geladeira\", \"Computador\"),\n  Potencia = c(0.1, 0.15, 0.2, 0.5)  # Potências em kW\n)\n\n# Tempo (em horas) para o qual calculamos o consumo\ntempo <- seq(0, 24, length.out = 100)  # 0 a 24 horas\n\n# Criando um dataframe com o consumo de energia\ndados_consumo <- data.frame()\n\nfor (i in 1:nrow(eletrodomesticos)) {\n  consumo <- eletrodomesticos$Potencia[i] * tempo  # Consumo em kWh\n  dados_consumo <- rbind(dados_consumo, \n                          data.frame(Tempo = tempo, \n                                     Consumo = consumo, \n                                     Eletrodomestico = eletrodomesticos$Nome[i]))\n}\n\n# Gráfico animado para o consumo de energia\np <- ggplot(dados_consumo, aes(x = Tempo, y = Consumo, color = Eletrodomestico, group = Eletrodomestico)) +\n  geom_line(size = 1.2) +\n  labs(title = 'Consumo de Energia Residencial (kWh)',\n       x = 'Tempo (horas)', y = 'Consumo (kWh)', color = 'Eletrodoméstico') +\n  transition_states(Eletrodomestico, transition_length = 2, state_length = 1) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\ngeom_line(size = 1.4) + # Lines with a little more thickness for better visibility\n\n```\n\n</div>\n\n\\\n<!-- ############## TEMPERATURE CONVERSION ################ -->\n\n<div class=\"fis-fundo\"> <!--modifies for each area-->\n\n## Temperature conversion - Celsius, Kelvin, and Fahrenheit (EM13MAT403, EM13CNT205)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Temperature range in Celsius\ncelsius <- seq(-100, 100, by = 1)\n\n# Calculating conversions\ntemp_data <- data.frame(\nCelsius = celsius,\nFahrenheit = celsius * 9/5 + 32,\nKelvin = celsius + 273.15\n)\n\n# Rearranging data for better visualization\ntemp_data_long <- reshape2::melt(temp_data, id.vars = \"Celsius\")\n\n# Animated graph\np <- ggplot(temp_data_long, aes(x = Celsius, y = value, color = variable)) +\ngeom_line(size = 1.2) +\nlabs(title = 'Temperature Conversion',\nx = 'Temperature in Celsius', y = 'Converted Temperature',\ncolor = 'Scale') +\ntransition_reveal(Celsius) +\nease_aes('linear')\n\n# Displaying the graph\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Temperature range in Celsius\ncelsius <- seq(-100, 100, by = 1)\n\n# Calculating the conversions\ntemp_data <- data.frame(\nCelsius = celsius,\nFahrenheit = celsius * 9/5 + 32,\nKelvin = celsius + 273.15\n)\n\n# Rearranging the data for better visualization\ntemp_data_long <- reshape2::melt(temp_data, id.vars = \"Celsius\")\n\n# Animated graph\np <- ggplot(temp_data_long, aes(x = Celsius, y = value, color = variable)) +\ngeom_line(size = 1.2) +\nlabs(title = 'Temperature Conversion',\nx = 'Temperature to Celsius', y = 'Converted Temperature',\ncolor = 'Scale') +\ntransition_reveal(Celsius) +\nease_aes('linear')\n\n# Displaying the graph\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\nease_aes('cubic-in-out') + # Change in animation for smoother transition\n\n```\n\n</div>\n\n\\\n<!-- ############## THERMAL EXPANSION ############### -->\n\n<div class=\"fis-fundo\"> <!--modifies for each area-->\n\n## Thermal expansion - superficial, volumetric, and liquids (EM13CNT304, EM13CNT305)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(plotly)\n\n# Valores iniciais\narea_inicial <- 100  # Área inicial (cm^2)\nvolume_inicial <- 100  # Volume inicial (cm^3)\nbeta <- 1.2e-5  # Coeficiente de dilatação superficial\ngama_solido <- 3.6e-5  # Coeficiente de dilatação volumétrica\ngama_liquido <- 4.0e-5  # Coeficiente de dilatação volumétrica de líquidos\n\n# Variação de temperatura (0 a 100 °C)\ndelta_T <- seq(0, 100, by = 1)\n\n# Cálculo das dilatações\ndilatacao_superficial <- area_inicial * beta * delta_T\ndilatacao_volumetrica <- volume_inicial * gama_solido * delta_T\ndilatacao_liquido <- volume_inicial * gama_liquido * delta_T\n\n# Dataframes para gráficos\ndados_superficie <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_superficial)\ndados_volumetrica <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_volumetrica)\ndados_liquido <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_liquido)\n\n# Criando os gráficos\ngrafico_superficie <- ggplot(dados_superficie, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Dilatação Superficial\", x = \"Temperatura (°C)\", y = \"ΔA (cm^2)\")\n\ngrafico_volumetrica <- ggplot(dados_volumetrica, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"red\") +\n  labs(title = \"Dilatação Volumétrica\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\ngrafico_liquido <- ggplot(dados_liquido, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"green\") +\n  labs(title = \"Dilatação de Líquidos\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\n# Exibindo os gráficos lado a lado\nggplotly(grafico_superficie + grafico_volumetrica + grafico_liquido)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(patchwork)\n\n# Valores iniciais\narea_inicial <- 100  # Área inicial (cm^2)\nvolume_inicial <- 100  # Volume inicial (cm^3)\nbeta <- 1.2e-5  # Coeficiente de dilatação superficial\ngama_solido <- 3.6e-5  # Coeficiente de dilatação volumétrica\ngama_liquido <- 4.0e-5  # Coeficiente de dilatação volumétrica de líquidos\n\n# Variação de temperatura (0 a 100 °C)\ndelta_T <- seq(0, 100, by = 1)\n\n# Cálculo das dilatações\ndilatacao_superficial <- area_inicial * beta * delta_T\ndilatacao_volumetrica <- volume_inicial * gama_solido * delta_T\ndilatacao_liquido <- volume_inicial * gama_liquido * delta_T\n\n# Dataframes para gráficos\ndados_superficie <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_superficial)\ndados_volumetrica <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_volumetrica)\ndados_liquido <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_liquido)\n\n# Criando os gráficos\ngrafico_superficie <- ggplot(dados_superficie, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Dilatação Superficial\", x = \"Temperatura (°C)\", y = \"ΔA (cm^2)\")\n\ngrafico_volumetrica <- ggplot(dados_volumetrica, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"red\") +\n  labs(title = \"Dilatação Volumétrica\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\ngrafico_liquido <- ggplot(dados_liquido, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"green\") +\n  labs(title = \"Dilatação de Líquidos\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\n# Exibindo os gráficos lado a lado\ngrafico_superficie + grafico_volumetrica + grafico_liquido\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Below geom_line()\ngeom_point(color = \"blue\", size = 2) + # Adding points\n\n```\n\n</div>\n\n\\\n<div class=\"fis-fundo\"> <!--modifies for each area-->\n\n## Alternating Current - Capacitor (EM13CNT202)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Values ​​of x\nx <- seq(0, 5 * pi, length.out = 100)\n\nplot_ly() %>%\nadd_trace(x = x, y = sin(x), mode = 'lines', name = 'Potential') %>%\nadd_trace(x = 1.4*x, y = 0.9*cos(x)-0.4, mode = 'lines', name = 'Current') %>%\nlayout(\ntitle = 'Voltage and Current in a Capacitor',\nxaxis = list(title = 'Angle (radians)', range=c(0.15)),\nyaxis = list(title = 'Value'),\nshowlegend = TRUE\n)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Values ​​of x\nx <- seq(0.5 * pi, length.out = 100)\n\nplot_ly() %>%\nadd_trace(x = x, y = sin(x), mode = 'lines', name = 'Potential') %>%\nadd_trace(x = 1.4*x, y = 0.9*cos(x)-0.4, mode = 'lines', name = 'Current') %>%\nlayout(\ntitle = 'Voltage and Current in a Capacitor',\nxaxis = list(title = 'Angle (radians)', range=c(0.15)),\nyaxis = list(title = 'Value'),\nshowlegend = TRUE\n)\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the following commands in the code snippet:\n\n```{r, eval = FALSE}\nadd_trace(x = x, y = sin(x), mode = 'lines', name = 'Potencial',\nline = list(color = 'blue', width = 2, dash = 'dot')) %>% # Blue dotted line\n\n```\n\n</div>\n\n\\\n<!-- ### HEAT ENGINE EFFICIENCY AND TEMPERATURE -->\n\n<div class=\"fis-fundo\"> <!--modify for each area-->\n\n## Heat engine efficiency as a function of temperature (EM13CNT102, EM13CNT103)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Function to generate data and graph based on half-efficiency temperature (or saturation temperature)\ngenerate_plot_data <- function(b) {\na <- 1 # maximum efficiency of the heat engine\nx <- seq(0, 300, length.out = 100) # temperature range\ny <- a * x / (b + x) # equation that relates temperature to efficiency (maximum = 1)\ndata.frame(x, y)\n}\n\n# Initialize the graph with b = 1\ninitial_b <- 1 # initial value of b (half-saturation temperature)\nplot_data <- generate_plot_data(initial_b)\n\n# Creating the initial graph using the ggplot2 package\np <- ggplot(plot_data, aes(x = x, y = y)) +\ngeom_line() +\nlabs(title = paste(\"Efficiency of a heat engine as a function of temperature\"),\nx = \"Temperature (C)\",\ny = \"Fraction of Efficiency\") +\ntheme_minimal() +\nylim(0, 1)\n\n# Converting to a plotly object\nfig <- ggplotly(p)\n\n# Defining the steps for the slider\nsteps <- lapply(seq(0, 100, by = 10), function(b) {\nlist(\nlabel = as.character(b), method = \"restyle\",\nargs = list(\nlist(\nx = list(generate_plot_data(b)$x),\ny = list(generate_plot_data(b)$y)\n),\nlist(title = paste(\"Yield as a function of half-saturation value:\", b))\n)\n)\n})\n\n# Adding the slider for the parameter 'b' (half-saturation temperature)\nfig <- fig %>%\nlayout(\nsliders = list(\nlist(\nactive = 0,\ncurrentvalue = list(prefix = \"Half-Saturation: \"),\nsteps = steps\n)\n)\n)\n\n# Visualize the graph\nfig\n\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Function to generate data and graph based on half-efficiency temperature (or saturation temperature)\ngenerate_plot_data <- function(b) {\na <- 1 # maximum efficiency of the heat engine\nx <- seq(0, 300, length.out = 100) # temperature range\ny <- a * x / (b + x) # equation that relates temperature to efficiency (maximum = 1)\ndata.frame(x, y)\n}\n\n# Initialize the graph with b = 1\ninitial_b <- 1 # initial value of b (half-saturation temperature)\nplot_data <- generate_plot_data(initial_b)\n\n# Creating the initial graph using the ggplot2 package\np <- ggplot(plot_data, aes(x = x, y = y)) +\ngeom_line() +\nlabs(title = paste(\"Efficiency of a heat engine as a function of temperature\"),\nx = \"Temperature (C)\",\ny = \"Fraction of Efficiency\") +\ntheme_minimal() +\nylim(0, 1)\n\n# Converting to a plotly object\nfig <- ggplotly(p)\n\n# Defining the steps for the slider\nsteps <- lapply(seq(0, 100, by = 10), function(b) {\nlist(\nlabel = as.character(b),\nmethod = \"restyle\",\nargs = list(\nlist(\nx = list(generate_plot_data(b)$x),\ny = list(generate_plot_data(b)$y)\n),\nlist(title = paste(\"Efficiency as a function of half-saturation value:\", b)) )\n)\n})\n\n# Adding the slider for the 'b' parameter (half-saturation temperature)\nfig <- fig %>%\nlayout(\nsliders = list(\nlist(\nactive = 0,\ncurrentvalue = list(prefix = \"Half-Saturation: \"),\nsteps = steps\n)\n)\n)\n\n# View the graph\nfig\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Inside steps\nlist(\nx = list(generate_plot_data(b)$x),\ny = list(generate_plot_data(b)$y),\nline = list(color = colorRampPalette(c(\"blue\", \"green\"))(11)[b/10 + 1]) # Color range varying from blue to green\n),\n\n```\n\n</div>\n\n\\\n","srcMarkdownNoYaml":"\n\n<!-- ############## ELECTRIC FIELD AND DISTANCE ################ -->\n\n<div class=\"fis-fundo\"> <!--modifies for each area-->\n\n## Electric field and distance (EM13MAT305, EM13CNT302)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Constant k0 (approximately 8.99 × 10^9 N m²/C²)\nk0 <- 8.99e9\n\n# Distance values ​​(avoiding d = 0 to avoid dividing by zero)\nd <- seq(0.1, 10, length.out = 100)\n\n# Function to calculate the electric field\ncalcular_field <- function(Q, d) {\nk0 * Q / d^2\n}\n\n# Initial values ​​of Q\nQ_inicial <- 1e-6 # Initial charge in Coulombs\n\n# Interactive graph with slider to change Q\nplot_ly(x = ~d, y = ~calcular_field(Q_inicial, d), type = 'scatter', mode = 'lines') %>%\nlayout(\ntitle = 'Electric Field (E) as a Function of Distance (d)',\nxaxis = list(title = 'Distance (m)'),\nyaxis = list(title = 'Electric Field (N/C)', type = 'log'),\nsliders = list(\nlist(\nactive = 0,\ncurrentvalue = list(prefix = \"Charge (Q): \"),\nsteps = lapply(seq(1e-7, 1e-5, length.out = 10), function(Q_value) {\nlist(\nlabel = sprintf(\"%.1e\", Q_value),\nmethod = \"restyle\",\nargs = list('y', list(calcular_field(Q_value, d)))\n)\n})\n)\n)\n)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Constant k0 (approximately 8.99 × 10^9 N m²/C²)\nk0 <- 8.99e9\n\n# Distance values ​​(avoiding d = 0 to avoid dividing by zero)\nd <- seq(0.1, 10, length.out = 100)\n\n# Function to calculate the electric field\ncalcular_campo <- function(Q, d) {\nk0 * Q / d^2\n}\n\n# Initial values ​​of Q\nQ_inicial <- 1e-6 # Initial charge in Coulombs\n\n# Interactive graph with slider to change Q\nplot_ly(x = ~d, y = ~calcular_campo(Q_inicial, d), type = 'scatter', mode = 'lines') %>%\nlayout(\ntitle = 'Electric Field (E) as a Function of Distance (d)',\nxaxis = list(title = 'Distance (m)'),\nyaxis = list(title = 'Electric Field (N/C)', type = 'log'),\nsliders = list(\nlist(\nactive = 0,\ncurrentvalue = list(prefix = \"Charge (Q): \"),\n steps = lapply(seq(1e-7, 1e-5, length.out = 10), function(Q_value) {\n list(\n label = sprintf(\"%.1e\", Q_value),\n method = \"restyle\",\n args = list('y', list(calcular_campo(Q_value, d)))\n )\n })\n )\n )\n )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\nxaxis = list(title = 'Distance (m)', range = c(0, 10)), # Define the range for the X axis\nyaxis = list(title = 'Electric Field (N/C)', type = 'log', range = c(1e3, 1e12)), # Adjust the scale of the Y axis\n\n```\n\n</div>\n\n\\\n<!-- ############## MRUV ################ -->\n\n<div class=\"fis-fundo\"> <!--modifies for each area-->\n\n## Uniformly varied rectilinear motion - MRUV (EM13CNT203, EM13CNT204)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Função para calcular a posição em MRUV\ncalcular_mruv <- function(s0, v0, a, t) {\n  s0 + v0 * t + 0.5 * a * t^2\n}\n\n# Dados\ns0 <- 0\nv0 <- 5\nt <- seq(0, 10, length.out = 100)\na_values <- seq(0, 5, by = 1)\n\n# Criando um dataframe com os dados\ndados_mruv <- data.frame()\nfor (a in a_values) {\n  for (time in t) {\n    pos <- calcular_mruv(s0, v0, a, time)\n    dados_mruv <- rbind(dados_mruv, data.frame(Tempo = time, Posição = pos, Aceleração = a))\n  }\n}\n\n# Gráfico animado para MRUV\nggplot(dados_mruv, aes(x = Tempo, y = Posição, group = Aceleração)) +\n  geom_line(aes(color = as.factor(Aceleração))) +\n  labs(title = 'MRUV: Posição em Função do Tempo',\n       subtitle = 'Aceleração = {frame_time} m/s²',\n       x = 'Tempo (s)', y = 'Posição (m)', color = 'Aceleração') +\n  transition_time(Aceleração) +\n  ease_aes('linear')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Função para calcular a posição em MRUV\ncalcular_mruv <- function(s0, v0, a, t) {\n  s0 + v0 * t + 0.5 * a * t^2\n}\n\n# Dados\ns0 <- 0\nv0 <- 5\nt <- seq(0, 10, length.out = 100)\na_values <- seq(0, 5, by = 1)\n\n# Criando um dataframe com os dados\ndados_mruv <- data.frame()\nfor (a in a_values) {\n  for (time in t) {\n    pos <- calcular_mruv(s0, v0, a, time)\n    dados_mruv <- rbind(dados_mruv, data.frame(Tempo = time, Posição = pos, Aceleração = a))\n  }\n}\n\n# Gráfico animado para MRUV\nggplot(dados_mruv, aes(x = Tempo, y = Posição, group = Aceleração)) +\n  geom_line(aes(color = as.factor(Aceleração))) +\n  labs(title = 'MRUV: Posição em Função do Tempo',\n       subtitle = 'Aceleração = {frame_time} m/s²',\n       x = 'Tempo (s)', y = 'Posição (m)', color = 'Aceleração') +\n  transition_time(Aceleração) +\n  ease_aes('linear')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Inside the ggplot() function\nscale_color_manual(values ​​= c(\"0\" = \"blue\", \"1\" = \"red\", \"2\" = \"green\", \"3\" = \"purple\", \"4\" = \"orange\", \"5\" = \"brown\")) + # Define specific colors for each acceleration\n\n```\n\n</div>\n\n\\\n<!-- ############## GRAVITATIONAL FORCE AND DISTANCE ############### -->\n\n<div class=\"fis-fundo\"> <!--modifies for each area-->\n\n## Gravitational force and distance (EM13CNT401, EM13CNT402)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Função para calcular a força gravitacional\ncalcular_gravitacional <- function(m1, m2, d) {\n  G <- 6.67e-11\n  G * m1 * m2 / d^2\n}\n\n# Dados\nm1 <- 5.97e24  # Massa da Terra em kg\nm2_values <- seq(1e22, 1e24, length.out = 5)\nd <- seq(1e6, 4e8, length.out = 100)\n\n# Criando um dataframe com os dados\ndados_gravitacional <- data.frame()\nfor (m2 in m2_values) {\n  for (distancia in d) {\n    forca <- calcular_gravitacional(m1, m2, distancia)\n    dados_gravitacional <- rbind(dados_gravitacional, data.frame(Distância = distancia, Força = forca, Massa = m2))\n  }\n}\n\n# Gráfico animado para força gravitacional\nggplot(dados_gravitacional, aes(x = Distância, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força Gravitacional em Função da Distância',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Distância (m)', y = 'Força Gravitacional (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Função para calcular a força gravitacional\ncalcular_gravitacional <- function(m1, m2, d) {\n  G <- 6.67e-11\n  G * m1 * m2 / d^2\n}\n\n# Dados\nm1 <- 5.97e24  # Massa da Terra em kg\nm2_values <- seq(1e22, 1e24, length.out = 5)\nd <- seq(1e6, 4e8, length.out = 100)\n\n# Criando um dataframe com os dados\ndados_gravitacional <- data.frame()\nfor (m2 in m2_values) {\n  for (distancia in d) {\n    forca <- calcular_gravitacional(m1, m2, distancia)\n    dados_gravitacional <- rbind(dados_gravitacional, data.frame(Distância = distancia, Força = forca, Massa = m2))\n  }\n}\n\n# Gráfico animado para força gravitacional\nggplot(dados_gravitacional, aes(x = Distância, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força Gravitacional em Função da Distância',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Distância (m)', y = 'Força Gravitacional (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Inside the ggplot() function\ntheme_minimal() + # Simple theme\n\n```\n\n</div>\n\n\\\n<!-- ############## 2nd. NEWTON'S LAW ################ -->\n\n<div class=\"fis-fundo\"> <!--modify for each area-->\n\n## 2nd. Newton's Law - Mass and Acceleration (EM13CNT202, EM13CNT203)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Função para calcular a força\ncalcular_forca <- function(m, a) {\n  m * a\n}\n\n# Dados\na <- seq(0, 10, length.out = 100)\nm_values <- seq(1, 20, by = 5)\n\n# Criando um dataframe com os dados\ndados_newton <- data.frame()\nfor (m in m_values) {\n  for (aceleracao in a) {\n    forca <- calcular_forca(m, aceleracao)\n    dados_newton <- rbind(dados_newton, data.frame(Aceleração = aceleracao, Força = forca, Massa = m))\n  }\n}\n\n# Gráfico animado para Segunda Lei de Newton\nggplot(dados_newton, aes(x = Aceleração, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força (F) em Função da Aceleração (a)',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Aceleração (m/s²)', y = 'Força (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Função para calcular a força\ncalcular_forca <- function(m, a) {\n  m * a\n}\n\n# Dados\na <- seq(0, 10, length.out = 100)\nm_values <- seq(1, 20, by = 5)\n\n# Criando um dataframe com os dados\ndados_newton <- data.frame()\nfor (m in m_values) {\n  for (aceleracao in a) {\n    forca <- calcular_forca(m, aceleracao)\n    dados_newton <- rbind(dados_newton, data.frame(Aceleração = aceleracao, Força = forca, Massa = m))\n  }\n}\n\n# Gráfico animado para Segunda Lei de Newton\nggplot(dados_newton, aes(x = Aceleração, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força (F) em Função da Aceleração (a)',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Aceleração (m/s²)', y = 'Força (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\ngeom_line(aes(color = as.factor(Massa)), size = 1) + # Lines with default thickness\n```\n\n</div>\n\n\\\n<!-- ############## OHM'S LAW ################ -->\n\n<div class=\"fis-fundo\"> <!--modify for each area-->\n\n## Ohm's Law - resistance, potential, and current (EM13CNT303, EM13CNT304)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados\nresistencias <- seq(1, 10, by = 1)  # Resistência de 1 a 10 Ohms\ncorrente <- seq(0, 5, length.out = 100)  # Corrente de 0 a 5 Amperes\ndados <- data.frame()\n\n# Criando um dataframe com os dados\nfor (R in resistencias) {\n  for (I in corrente) {\n    V <- I * R  # Calculando a Tensão\n    P <- V * I  # Calculando a Potência\n    dados <- rbind(dados, data.frame(Corrente = I, Resistência = R, Tensão = V, Potência = P))\n  }\n}\n\n# Gráfico animado para Lei de Ohm e Potência\np <- ggplot(dados, aes(x = Corrente, y = Tensão)) +\n  geom_line(aes(color = as.factor(Resistência), group = Resistência)) +\n  geom_point(aes(size = Potência), alpha = 0.5) +\n  labs(title = 'Lei de Ohm: Tensão vs Corrente',\n       subtitle = 'Resistência = {frame_time} Ohms',\n       x = 'Corrente (A)', y = 'Tensão (V)', color = 'Resistência', size = 'Potência (W)') +\n  transition_time(Resistência) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados\nresistencias <- seq(1, 10, by = 1)  # Resistência de 1 a 10 Ohms\ncorrente <- seq(0, 5, length.out = 100)  # Corrente de 0 a 5 Amperes\ndados <- data.frame()\n\n# Criando um dataframe com os dados\nfor (R in resistencias) {\n  for (I in corrente) {\n    V <- I * R  # Calculando a Tensão\n    P <- V * I  # Calculando a Potência\n    dados <- rbind(dados, data.frame(Corrente = I, Resistência = R, Tensão = V, Potência = P))\n  }\n}\n\n# Gráfico animado para Lei de Ohm e Potência\np <- ggplot(dados, aes(x = Corrente, y = Tensão)) +\n  geom_line(aes(color = as.factor(Resistência), group = Resistência)) +\n  geom_point(aes(size = Potência), alpha = 0.5) +\n  labs(title = 'Lei de Ohm: Tensão vs Corrente',\n       subtitle = 'Resistência = {frame_time} Ohms',\n       x = 'Corrente (A)', y = 'Tensão (V)', color = 'Resistência', size = 'Potência (W)') +\n  transition_time(Resistência) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\ngeom_point(aes(size = Power), alpha = 0.6) + # Points with size according to power\n\n```\n\n</div>\n\n\\\n<!-- ############## POWER AND ENERGY CONSUMPTION ############### -->\n\n<div class=\"fis-fundo\"> <!--modify for each area-->\n\n## Electricity and residential consumption (EM13CNT405, EM13CNT306)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados dos eletrodomésticos (potência em kW)\neletrodomesticos <- data.frame(\n  Nome = c(\"Lâmpada\", \"Ventilador\", \"Geladeira\", \"Computador\"),\n  Potencia = c(0.1, 0.15, 0.2, 0.5)  # Potências em kW\n)\n\n# Tempo (em horas) para o qual calculamos o consumo\ntempo <- seq(0, 24, length.out = 100)  # 0 a 24 horas\n\n# Criando um dataframe com o consumo de energia\ndados_consumo <- data.frame()\n\nfor (i in 1:nrow(eletrodomesticos)) {\n  consumo <- eletrodomesticos$Potencia[i] * tempo  # Consumo em kWh\n  dados_consumo <- rbind(dados_consumo, \n                          data.frame(Tempo = tempo, \n                                     Consumo = consumo, \n                                     Eletrodomestico = eletrodomesticos$Nome[i]))\n}\n\n# Gráfico animado para o consumo de energia\np <- ggplot(dados_consumo, aes(x = Tempo, y = Consumo, color = Eletrodomestico, group = Eletrodomestico)) +\n  geom_line(size = 1.2) +\n  labs(title = 'Consumo de Energia Residencial (kWh)',\n       x = 'Tempo (horas)', y = 'Consumo (kWh)', color = 'Eletrodoméstico') +\n  transition_states(Eletrodomestico, transition_length = 2, state_length = 1) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados dos eletrodomésticos (potência em kW)\neletrodomesticos <- data.frame(\n  Nome = c(\"Lâmpada\", \"Ventilador\", \"Geladeira\", \"Computador\"),\n  Potencia = c(0.1, 0.15, 0.2, 0.5)  # Potências em kW\n)\n\n# Tempo (em horas) para o qual calculamos o consumo\ntempo <- seq(0, 24, length.out = 100)  # 0 a 24 horas\n\n# Criando um dataframe com o consumo de energia\ndados_consumo <- data.frame()\n\nfor (i in 1:nrow(eletrodomesticos)) {\n  consumo <- eletrodomesticos$Potencia[i] * tempo  # Consumo em kWh\n  dados_consumo <- rbind(dados_consumo, \n                          data.frame(Tempo = tempo, \n                                     Consumo = consumo, \n                                     Eletrodomestico = eletrodomesticos$Nome[i]))\n}\n\n# Gráfico animado para o consumo de energia\np <- ggplot(dados_consumo, aes(x = Tempo, y = Consumo, color = Eletrodomestico, group = Eletrodomestico)) +\n  geom_line(size = 1.2) +\n  labs(title = 'Consumo de Energia Residencial (kWh)',\n       x = 'Tempo (horas)', y = 'Consumo (kWh)', color = 'Eletrodoméstico') +\n  transition_states(Eletrodomestico, transition_length = 2, state_length = 1) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\ngeom_line(size = 1.4) + # Lines with a little more thickness for better visibility\n\n```\n\n</div>\n\n\\\n<!-- ############## TEMPERATURE CONVERSION ################ -->\n\n<div class=\"fis-fundo\"> <!--modifies for each area-->\n\n## Temperature conversion - Celsius, Kelvin, and Fahrenheit (EM13MAT403, EM13CNT205)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Temperature range in Celsius\ncelsius <- seq(-100, 100, by = 1)\n\n# Calculating conversions\ntemp_data <- data.frame(\nCelsius = celsius,\nFahrenheit = celsius * 9/5 + 32,\nKelvin = celsius + 273.15\n)\n\n# Rearranging data for better visualization\ntemp_data_long <- reshape2::melt(temp_data, id.vars = \"Celsius\")\n\n# Animated graph\np <- ggplot(temp_data_long, aes(x = Celsius, y = value, color = variable)) +\ngeom_line(size = 1.2) +\nlabs(title = 'Temperature Conversion',\nx = 'Temperature in Celsius', y = 'Converted Temperature',\ncolor = 'Scale') +\ntransition_reveal(Celsius) +\nease_aes('linear')\n\n# Displaying the graph\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Temperature range in Celsius\ncelsius <- seq(-100, 100, by = 1)\n\n# Calculating the conversions\ntemp_data <- data.frame(\nCelsius = celsius,\nFahrenheit = celsius * 9/5 + 32,\nKelvin = celsius + 273.15\n)\n\n# Rearranging the data for better visualization\ntemp_data_long <- reshape2::melt(temp_data, id.vars = \"Celsius\")\n\n# Animated graph\np <- ggplot(temp_data_long, aes(x = Celsius, y = value, color = variable)) +\ngeom_line(size = 1.2) +\nlabs(title = 'Temperature Conversion',\nx = 'Temperature to Celsius', y = 'Converted Temperature',\ncolor = 'Scale') +\ntransition_reveal(Celsius) +\nease_aes('linear')\n\n# Displaying the graph\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\nease_aes('cubic-in-out') + # Change in animation for smoother transition\n\n```\n\n</div>\n\n\\\n<!-- ############## THERMAL EXPANSION ############### -->\n\n<div class=\"fis-fundo\"> <!--modifies for each area-->\n\n## Thermal expansion - superficial, volumetric, and liquids (EM13CNT304, EM13CNT305)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(plotly)\n\n# Valores iniciais\narea_inicial <- 100  # Área inicial (cm^2)\nvolume_inicial <- 100  # Volume inicial (cm^3)\nbeta <- 1.2e-5  # Coeficiente de dilatação superficial\ngama_solido <- 3.6e-5  # Coeficiente de dilatação volumétrica\ngama_liquido <- 4.0e-5  # Coeficiente de dilatação volumétrica de líquidos\n\n# Variação de temperatura (0 a 100 °C)\ndelta_T <- seq(0, 100, by = 1)\n\n# Cálculo das dilatações\ndilatacao_superficial <- area_inicial * beta * delta_T\ndilatacao_volumetrica <- volume_inicial * gama_solido * delta_T\ndilatacao_liquido <- volume_inicial * gama_liquido * delta_T\n\n# Dataframes para gráficos\ndados_superficie <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_superficial)\ndados_volumetrica <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_volumetrica)\ndados_liquido <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_liquido)\n\n# Criando os gráficos\ngrafico_superficie <- ggplot(dados_superficie, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Dilatação Superficial\", x = \"Temperatura (°C)\", y = \"ΔA (cm^2)\")\n\ngrafico_volumetrica <- ggplot(dados_volumetrica, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"red\") +\n  labs(title = \"Dilatação Volumétrica\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\ngrafico_liquido <- ggplot(dados_liquido, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"green\") +\n  labs(title = \"Dilatação de Líquidos\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\n# Exibindo os gráficos lado a lado\nggplotly(grafico_superficie + grafico_volumetrica + grafico_liquido)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(patchwork)\n\n# Valores iniciais\narea_inicial <- 100  # Área inicial (cm^2)\nvolume_inicial <- 100  # Volume inicial (cm^3)\nbeta <- 1.2e-5  # Coeficiente de dilatação superficial\ngama_solido <- 3.6e-5  # Coeficiente de dilatação volumétrica\ngama_liquido <- 4.0e-5  # Coeficiente de dilatação volumétrica de líquidos\n\n# Variação de temperatura (0 a 100 °C)\ndelta_T <- seq(0, 100, by = 1)\n\n# Cálculo das dilatações\ndilatacao_superficial <- area_inicial * beta * delta_T\ndilatacao_volumetrica <- volume_inicial * gama_solido * delta_T\ndilatacao_liquido <- volume_inicial * gama_liquido * delta_T\n\n# Dataframes para gráficos\ndados_superficie <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_superficial)\ndados_volumetrica <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_volumetrica)\ndados_liquido <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_liquido)\n\n# Criando os gráficos\ngrafico_superficie <- ggplot(dados_superficie, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Dilatação Superficial\", x = \"Temperatura (°C)\", y = \"ΔA (cm^2)\")\n\ngrafico_volumetrica <- ggplot(dados_volumetrica, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"red\") +\n  labs(title = \"Dilatação Volumétrica\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\ngrafico_liquido <- ggplot(dados_liquido, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"green\") +\n  labs(title = \"Dilatação de Líquidos\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\n# Exibindo os gráficos lado a lado\ngrafico_superficie + grafico_volumetrica + grafico_liquido\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Below geom_line()\ngeom_point(color = \"blue\", size = 2) + # Adding points\n\n```\n\n</div>\n\n\\\n<div class=\"fis-fundo\"> <!--modifies for each area-->\n\n## Alternating Current - Capacitor (EM13CNT202)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Values ​​of x\nx <- seq(0, 5 * pi, length.out = 100)\n\nplot_ly() %>%\nadd_trace(x = x, y = sin(x), mode = 'lines', name = 'Potential') %>%\nadd_trace(x = 1.4*x, y = 0.9*cos(x)-0.4, mode = 'lines', name = 'Current') %>%\nlayout(\ntitle = 'Voltage and Current in a Capacitor',\nxaxis = list(title = 'Angle (radians)', range=c(0.15)),\nyaxis = list(title = 'Value'),\nshowlegend = TRUE\n)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Values ​​of x\nx <- seq(0.5 * pi, length.out = 100)\n\nplot_ly() %>%\nadd_trace(x = x, y = sin(x), mode = 'lines', name = 'Potential') %>%\nadd_trace(x = 1.4*x, y = 0.9*cos(x)-0.4, mode = 'lines', name = 'Current') %>%\nlayout(\ntitle = 'Voltage and Current in a Capacitor',\nxaxis = list(title = 'Angle (radians)', range=c(0.15)),\nyaxis = list(title = 'Value'),\nshowlegend = TRUE\n)\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the following commands in the code snippet:\n\n```{r, eval = FALSE}\nadd_trace(x = x, y = sin(x), mode = 'lines', name = 'Potencial',\nline = list(color = 'blue', width = 2, dash = 'dot')) %>% # Blue dotted line\n\n```\n\n</div>\n\n\\\n<!-- ### HEAT ENGINE EFFICIENCY AND TEMPERATURE -->\n\n<div class=\"fis-fundo\"> <!--modify for each area-->\n\n## Heat engine efficiency as a function of temperature (EM13CNT102, EM13CNT103)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Function to generate data and graph based on half-efficiency temperature (or saturation temperature)\ngenerate_plot_data <- function(b) {\na <- 1 # maximum efficiency of the heat engine\nx <- seq(0, 300, length.out = 100) # temperature range\ny <- a * x / (b + x) # equation that relates temperature to efficiency (maximum = 1)\ndata.frame(x, y)\n}\n\n# Initialize the graph with b = 1\ninitial_b <- 1 # initial value of b (half-saturation temperature)\nplot_data <- generate_plot_data(initial_b)\n\n# Creating the initial graph using the ggplot2 package\np <- ggplot(plot_data, aes(x = x, y = y)) +\ngeom_line() +\nlabs(title = paste(\"Efficiency of a heat engine as a function of temperature\"),\nx = \"Temperature (C)\",\ny = \"Fraction of Efficiency\") +\ntheme_minimal() +\nylim(0, 1)\n\n# Converting to a plotly object\nfig <- ggplotly(p)\n\n# Defining the steps for the slider\nsteps <- lapply(seq(0, 100, by = 10), function(b) {\nlist(\nlabel = as.character(b), method = \"restyle\",\nargs = list(\nlist(\nx = list(generate_plot_data(b)$x),\ny = list(generate_plot_data(b)$y)\n),\nlist(title = paste(\"Yield as a function of half-saturation value:\", b))\n)\n)\n})\n\n# Adding the slider for the parameter 'b' (half-saturation temperature)\nfig <- fig %>%\nlayout(\nsliders = list(\nlist(\nactive = 0,\ncurrentvalue = list(prefix = \"Half-Saturation: \"),\nsteps = steps\n)\n)\n)\n\n# Visualize the graph\nfig\n\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Function to generate data and graph based on half-efficiency temperature (or saturation temperature)\ngenerate_plot_data <- function(b) {\na <- 1 # maximum efficiency of the heat engine\nx <- seq(0, 300, length.out = 100) # temperature range\ny <- a * x / (b + x) # equation that relates temperature to efficiency (maximum = 1)\ndata.frame(x, y)\n}\n\n# Initialize the graph with b = 1\ninitial_b <- 1 # initial value of b (half-saturation temperature)\nplot_data <- generate_plot_data(initial_b)\n\n# Creating the initial graph using the ggplot2 package\np <- ggplot(plot_data, aes(x = x, y = y)) +\ngeom_line() +\nlabs(title = paste(\"Efficiency of a heat engine as a function of temperature\"),\nx = \"Temperature (C)\",\ny = \"Fraction of Efficiency\") +\ntheme_minimal() +\nylim(0, 1)\n\n# Converting to a plotly object\nfig <- ggplotly(p)\n\n# Defining the steps for the slider\nsteps <- lapply(seq(0, 100, by = 10), function(b) {\nlist(\nlabel = as.character(b),\nmethod = \"restyle\",\nargs = list(\nlist(\nx = list(generate_plot_data(b)$x),\ny = list(generate_plot_data(b)$y)\n),\nlist(title = paste(\"Efficiency as a function of half-saturation value:\", b)) )\n)\n})\n\n# Adding the slider for the 'b' parameter (half-saturation temperature)\nfig <- fig %>%\nlayout(\nsliders = list(\nlist(\nactive = 0,\ncurrentvalue = list(prefix = \"Half-Saturation: \"),\nsteps = steps\n)\n)\n)\n\n# View the graph\nfig\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Inside steps\nlist(\nx = list(generate_plot_data(b)$x),\ny = list(generate_plot_data(b)$y),\nline = list(color = colorRampPalette(c(\"blue\", \"green\"))(11)[b/10 + 1]) # Color range varying from blue to green\n),\n\n```\n\n</div>\n\n\\\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"number-sections":true,"toc":true,"output-file":"fisica_en.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":{"light":"flatly"},"title":"Physics","class":"fundo-basico"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}