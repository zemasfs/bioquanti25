{"title":"Human Sciences","markdown":{"yaml":{"title":"Human Sciences","number-sections":true,"toc":true,"lang":"en","class":"fundo-basico"},"headingText":"Relationship between area and population in Brazilian municipalities (EM13MAT405, EM13MAT407, EM13CHS101, EM13CHS104, EM13CNT301)","containsRefs":false,"markdown":"\n\n<!-- ############# BRAZILIAN AREA AND POPULATION ################# --->\n\n<div class=\"hum-fundo\"> <!--modifies for each area-->\n\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nurl <- \"https://raw.githubusercontent.com/turicas/rows/refs/heads/develop/examples/data/brazilian-cities.csv\" # define the link to the data\ndata <- read.csv(url) # read the data file\n\nlibrary(plotly)\nplot_ly(data, x = ~area, y = ~inhabitants,\ntype = \"scatter\",\nmode = 'markers',\nmarker = list(line = list(width = 1)),\ntext = ~paste(\"City: \", city, \"<br>State: \", state), # Text on hover\nhoverinfo = 'text', # Show only the defined text\nframe = ~state)%>%\nlayout(\ntitle = \"Area and population distribution in Brazilian cities\",\nxaxis = list(title = \"States\", type = \"log\"),\nyaxis = list(title = \"Population\", type = \"log\"),\nshowlegend = FALSE\n) %>%\nanimation_opts(\nframe = 500, # Animation speed\ntransition = 0,\nredraw = FALSE\n)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nurl <- \"https://raw.githubusercontent.com/turicas/rows/refs/heads/develop/examples/data/brazilian-cities.csv\" # define the link to the data\ndata <- read.csv(url) # read the data file\n\nlibrary(plotly)\nplot_ly(data, x = ~area, y = ~inhabitants,\ntype = \"scatter\", mode = 'markers',\nmarker = list(line = list(width = 1)),\ntext = ~paste(\"City: \", city, \"<br>State: \", state), # Text on hover\nhoverinfo = 'text', # Show only the defined text\nframe = ~state)%>%\nlayout(\ntitle = \"Area and population distribution in Brazilian cities\",\nxaxis = list(title = \"States\", type = \"log\"),\nyaxis = list(title = \"Population\", type = \"log\"),\nshowlegend = FALSE\n) %>%\nanimation_opts(\nframe = 500, # Animation speed\ntransition = 0,\nredraw = FALSE\n)\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\nlayout(\ntitle = \"Area and Population Distribution in Brazilian Cities\",\nxaxis = list(title = \"Area (log)\", type = \"log\"), # Logarithmic scale\nyaxis = list(title = \"Population (log)\", type = \"log\"),\nshowlegend = FALSE\n) %>%\n\n```\n\n</div>\n\n\\\n<!-- ############# ALCOHOL CONSUMPTION - MAP ################ --->\n\n<div class=\"hum-fundo\"> <!--modify for each area-->\n\n## Population alcohol consumption in 2010 (EM13CHS301, EM13CNT205)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Example of dataframe with dummy values\ndf <- read.csv(\"https://raw.githubusercontent.com/plotly/datasets/refs/heads/master/2010_alcohol_consumption_by_country.csv\")\n\n# Creating the choropleth map with the adjusted color scale\nplot_ly(\ndata = df,\nlocations = ~location,\nlocationmode = \"country names\",\nz = ~alcohol, # Variable that determines the colors\ntype = \"choropleth\",\ncolorscale = \"Viridis\") # other scales: # other scales: RdBu, Inferno, Blues, Cividis, Greens, ...\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Example of dataframe with dummy values\ndf <- read.csv(\"https://raw.githubusercontent.com/plotly/datasets/refs/heads/master/2010_alcohol_consumption_by_country.csv\")\n\n# Creating the choropleth map with the adjusted color scale\nplot_ly(\ndata = df,\nlocations = ~location,\nlocationmode = \"country names\",\nz = ~alcohol, # Variable that determines the colors\ntype = \"choropleth\",\ncolorscale = \"Viridis\") # other scales: # other scales: RdBu, Inferno, Blues, Cividis, Greens, ...\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Color change\ncolorscale = \"Blues\"\n\n```\n\n</div>\n\n\\\n<!-- ############# CO2 EMISSIONS ################# --->\n\n<div class=\"hum-fundo\"> <!--modifica para cada Ã¡rea-->\n\n## Greenhouse effect and CO$_{2}$ emissions in Brazil (EM13CN09, EM13CHS104)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\nlibrary(magrittr) # required libraries\n\n# 1) Getting the data from the internet\n\nurl <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define the link to the data\ndata <- read.csv(url) # read the data file\n\n# 2) Building the graph with animation\n\nplot_ly(data, x = ~Year, y = ~Mean,\ntype = \"bar\",\nmarker = list(line = list(width = 10)),\nframe = ~Year) %>%\nanimation_opts(\nframe = 150, # Animation speed\ntransition = 0,\nredraw = TRUE\n) %>%\nlayout(\ntitle = \"Global temperature fluctuation\",\nxaxis = list(title = \"Years\"),\nyaxis = list(title = \"Temperature difference, C\"))\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\nlibrary(magrittr) # required libraries\n# 1) Getting data from the internet\nurl <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define the link to the data\ndata <- read.csv(url) # read the data file\n\n# 2) Building the graph with animation\n\nplot_ly(data, x = ~Year, y = ~Mean,\ntype = \"bar\",\nmarker = list(line = list(width = 10)),\nframe = ~Year) %>%\nanimation_opts(\nframe = 150, # Animation speed\ntransition = 0,\nredraw = TRUE\n) %>%\nlayout(\ntitle = \"Global Temperature Fluctuation\",\nxaxis = list(title = \"Years\"),\nyaxis = list(title = \"Temperature Difference, C\"))\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\nframe = 100, # Adjusted animation speed\n\n```\n\n</div>\n\n\\\n<!-- ####### OIL PRODUCTION - MAP ########## --->\n\n<div class=\"hum-fundo\"> <!--modifies for each area-->\n\n## Global oil production in 2014 (in teraWatts)\n\n| Note: Crude oil, shale oil, tar sands, condensates, and natural gas liquids - ethane, LPG and naphtha separated from natural gas production.\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Example of dataframe with dummy values\ndf <- read.csv(\"https://raw.githubusercontent.com/owid/owid-datasets/refs/heads/master/datasets/Oil%20production%20-%20Etemad%20%26%20Luciana/Oil%20production%20-%20Etemad%20%26%20Luciana.csv\")\n\n# Renaming columns to make interpretation and plotting easier\n\nnames(df) <- c(\"Country\", \"Year\", \"Production.TeraWatt\")\n\n# Filtering data for the last year (2014)\ndf <- subset(df, Year == \"2014\")\n\n# Creating the choropleth map with the adjusted color scale\nlibrary(plotly)\nplot_ly(\ndata = df,\nlocations = ~Country,\nlocationmode = \"country names\",\nz = ~Production.TeraWatt, # Variable that determines the colors\ntype = \"choropleth\",\ncolorscale = \"RdBu\") # other scales: # other scales: Viridis, Inferno, Blues, Cividis, Greens, ...\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\nlibrary(plotly)\n\n# Example of dataframe with dummy values\ndf <- read.csv(\"https://raw.githubusercontent.com/owid/owid-datasets/refs/heads/master/datasets/Oil%20production%20-%20Etemad%20%26%20Luciana/Oil%20production%20-%20Etemad%20%26%20Luciana.csv\")\n\n# Renaming the columns to make them easier to interpret and plot\n\nnames(df) <- c(\"Country\", \"Year\", \"Production.TeraWatt\")\n\n# Filtering the data for the last year (2014)\ndf <- subset(df, Year == \"2014\")\n\n# Creating the choropleth map with the adjusted color scale\nlibrary(plotly)\nplot_ly(\ndata = df,\nlocations = ~Country,\nlocationmode = \"country names\",\nz = ~Production.TeraWatt, # Variable that determines the colors\ntype = \"choropleth\",\ncolorscale = \"RdBu\") # other scales: # other scales: Viridis, Inferno, Blues, Cividis, Greens, ...\n```\n\n</div>\n\n\\\n<!-- ############# EARTH'S TEMPERATURE RISE ################# --->\n\n<div class=\"hum-fundo\"> <!--modifies for each area-->\n\n## Global Warming (EM13CN03, EM13CN09, EM13CHS105, EM13CHS205)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\nlibrary(magrittr) # required libraries\n\n# 1) Getting the data from the internet\n\nurl <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define the link to the data\ndata <- read.csv(url) # read the data file\n\n# 2) Building the graph with animation\n\nplot_ly(data, x = ~Year, y = ~Mean,\ntype = \"scatter\",\nmarker = list(line = list(width = 10)),\nframe = ~Year) %>%\nanimation_opts(\nframe = 150, # Animation speed\ntransition = 0,\nredraw = TRUE\n) %>%\nlayout(\ntitle = \"Global temperature fluctuation\",\nxaxis = list(title = \"Years\"),\nyaxis = list(title = \"Temperature difference, C\"))\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\nlibrary(magrittr) # required libraries\n\n# 1) Getting the data from the internet\n\nurl <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define the link to the data\ndata <- read.csv(url) # read the data file\n\n# 2) Building the graph with animation\n\nplot_ly(data, x = ~Year, y = ~Mean,\ntype = \"bar\",\nmarker = list(line = list(width = 10)),\nframe = ~Year) %>%\nanimation_opts(\nframe = 150, # Animation speed\ntransition = 0,\nredraw = TRUE\n) %>%\nlayout(\ntitle = \"Global Temperature Fluctuation\",\nxaxis = list(title = \"Years\"),\nyaxis = list(title = \"Temperature Difference, C\"))\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\nplot_ly(data, x = ~Year, y = ~Mean, type = \"bar\",\ntext = ~paste(\"Year:\", Year, \"<br>Temperature:\", Mean, \"Â°C\"),\nhoverinfo = \"text\")\n\n```\n\n</div>\n\n\\\n<!-- ###### LIFE EXPECTATION AND GROSS DOMESTIC PRODUCT ####### --->\n\n<div class=\"hum-fundo\"> <!--modify for each area-->\n\n## Life expectancy and Gross Domestic Product - GDP, 1956 to 2007 (EM13CHS101, EM13CHS104, EM13MAT405, EM13MAT410)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Getting the data from the internet\nurl <- read.csv(\"https://raw.githubusercontent.com/kirenz/datasets/refs/heads/master/gapminder.csv\")\n\ndadosExpida <- url # assigning the data to an `R` object\n\n# Creating the interactive graph with animation\nplot_ly(\ndadosExpida, # data converted from the internet\nx = ~gdpPercap, # per capita income\ny = ~lifeExp, # life expectancy\nsize = ~pop, # size of the points as a function of the population\ncolor = ~country, # color of the points as a function of the country\nframe = ~year, # Frame for animation by year of data collection\ntext = ~continent, # Country as information when hovering\nhoverinfo = \"text\",\ntype = 'scatter', # type of graph\nmode = 'markers',\nmarker = list(sizemode = 'diameter', opacity = 0.7)\n) %>%\nlayout( # assigning title and axis labels\ntitle = \"Gross Domestic Product X Life Expectancy\",\nxaxis = list(title = \"GDP (log), US$\", type = \"log\"),\nyaxis = list(title = \"Life Expectancy, years\"),\nshowlegend = TRUE # possibility or not to show the legend\n) %>%\nanimation_opts(\nframe = 1000, # Animation speed\ntransition = 0,\nredraw = TRUE\n)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Getting the data from the internet\nurl <- read.csv(\"https://raw.githubusercontent.com/kirenz/datasets/refs/heads/master/gapminder.csv\")\n\ndadosExpida <- url # assigning the data to an `R` object\n\n# Creating the interactive graph with animation\nplot_ly(\ndadosExpida, # data converted from the internet\nx = ~gdpPercap, # per capita income\ny = ~lifeExp, # life expectancy\nsize = ~pop, # size of the points as a function of the population\ncolor = ~country, # color of the points as a function of the country\nframe = ~year, # Frame for the animation by year of data collection\ntext = ~continent, # Country as information when hovering the mouse\nhoverinfo = \"text\", type = 'scatter', # chart type\nmode = 'markers',\nmarker = list(sizemode = 'diameter', opacity = 0.7)\n) %>%\nlayout( # assigning title and axis labels\ntitle = \"Gross Domestic Product X Life Expectancy\",\nxaxis = list(title = \"GDP (log), US$\", type = \"log\"),\nyaxis = list(title = \"Life Expectancy, years\"),\nshowlegend = TRUE # whether or not to display the legend\n) %>%\nanimation_opts(\nframe = 1000, # Animation speed\ntransition = 0,\nredraw = TRUE\n)\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Inside plot_ly()\ncolor = ~continent\n\n```\n\n</div>\n\n\\\n<!-- ####### METEORITE FALL - MAP ########## --->\n\n<div class=\"hum-fundo\"> <!--modify for each area-->\n\n## Meteorite fall on Earth - 1800 to 2013 (EM13CHS101, EM13CNT303, EM13CNT301)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(maps)\n\nmeteoritos <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-11/meteorites.csv\")\n\noptions(scipen = 999) \n\nmeteoritos_Mundo <- meteoritos %>%\n  filter(fall == \"Fell\") %>%\n  filter(year > 1800) %>%\n  # drop_na() %>%\n  arrange(mass)\n\n# Carregar o mapa do mundo\nworld <- map_data(\"world\")\n\nmapa_animado <- world %>%\n  ggplot() +\n  geom_polygon(aes( x= long, y = lat, group = group),\n               fill = \"grey20\",\n               color = \"white\",\n               size = 0.01) +\n  geom_point(data= meteoritos_Mundo, \n             aes(x = long, \n                 y = lat, \n                 frame = year,\n                 size = mass),\n             color = \"orange\",\n             alpha = 0.7) +\n  labs( title = \"Queda de meteoritos -  1800 a 2013}\",\n        caption = \"The Meteoritical Society\") +\n  # theme_map() +\n  scale_size_continuous(guide = F) +\n  scale_color_discrete(name = \"Type\") +\n  theme(plot.title = element_text(size = 10, hjust = 0.5))\n\n\nfig_2 <- ggplotly(mapa_animado) %>% animation_slider(currentvalue = list(prefix = \"Year \", font = list(color=\"orange\"))) \n\nfig_2\n\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(maps)\n\nmeteoritos <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-11/meteorites.csv\")\n\noptions(scipen = 999) \n\nmeteoritos_Mundo <- meteoritos %>%\n  filter(fall == \"Fell\") %>%\n  filter(year > 1800) %>%\n  # drop_na() %>%\n  arrange(mass)\n\n# Carregar o mapa do mundo\nworld <- map_data(\"world\")\n\nmapa_animado <- world %>%\n  ggplot() +\n  geom_polygon(aes( x= long, y = lat, group = group),\n               fill = \"grey20\",\n               color = \"white\",\n               size = 0.01) +\n  geom_point(data= meteoritos_Mundo, \n             aes(x = long, \n                 y = lat, \n                 frame = year,\n                 size = mass),\n             color = \"orange\",\n             alpha = 0.7) +\n  labs( title = \"Queda de meteoritos -  1800 a 2013}\",\n        caption = \"The Meteoritical Society\") +\n  # theme_map() +\n  scale_size_continuous(guide = F) +\n  scale_color_discrete(name = \"Type\") +\n  theme(plot.title = element_text(size = 10, hjust = 0.5))\n\n\nfig_2 <- ggplotly(mapa_animado) %>% animation_slider(currentvalue = list(prefix = \"Year \", font = list(color=\"orange\"))) \n\nfig_2\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval =FALSE}\nfill = \"grey30\", # Changed from \"grey20\" to \"grey30\"\n\n```\n\n</div>\n\n\\\n","srcMarkdownNoYaml":"\n\n<!-- ############# BRAZILIAN AREA AND POPULATION ################# --->\n\n<div class=\"hum-fundo\"> <!--modifies for each area-->\n\n## Relationship between area and population in Brazilian municipalities (EM13MAT405, EM13MAT407, EM13CHS101, EM13CHS104, EM13CNT301)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nurl <- \"https://raw.githubusercontent.com/turicas/rows/refs/heads/develop/examples/data/brazilian-cities.csv\" # define the link to the data\ndata <- read.csv(url) # read the data file\n\nlibrary(plotly)\nplot_ly(data, x = ~area, y = ~inhabitants,\ntype = \"scatter\",\nmode = 'markers',\nmarker = list(line = list(width = 1)),\ntext = ~paste(\"City: \", city, \"<br>State: \", state), # Text on hover\nhoverinfo = 'text', # Show only the defined text\nframe = ~state)%>%\nlayout(\ntitle = \"Area and population distribution in Brazilian cities\",\nxaxis = list(title = \"States\", type = \"log\"),\nyaxis = list(title = \"Population\", type = \"log\"),\nshowlegend = FALSE\n) %>%\nanimation_opts(\nframe = 500, # Animation speed\ntransition = 0,\nredraw = FALSE\n)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nurl <- \"https://raw.githubusercontent.com/turicas/rows/refs/heads/develop/examples/data/brazilian-cities.csv\" # define the link to the data\ndata <- read.csv(url) # read the data file\n\nlibrary(plotly)\nplot_ly(data, x = ~area, y = ~inhabitants,\ntype = \"scatter\", mode = 'markers',\nmarker = list(line = list(width = 1)),\ntext = ~paste(\"City: \", city, \"<br>State: \", state), # Text on hover\nhoverinfo = 'text', # Show only the defined text\nframe = ~state)%>%\nlayout(\ntitle = \"Area and population distribution in Brazilian cities\",\nxaxis = list(title = \"States\", type = \"log\"),\nyaxis = list(title = \"Population\", type = \"log\"),\nshowlegend = FALSE\n) %>%\nanimation_opts(\nframe = 500, # Animation speed\ntransition = 0,\nredraw = FALSE\n)\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\nlayout(\ntitle = \"Area and Population Distribution in Brazilian Cities\",\nxaxis = list(title = \"Area (log)\", type = \"log\"), # Logarithmic scale\nyaxis = list(title = \"Population (log)\", type = \"log\"),\nshowlegend = FALSE\n) %>%\n\n```\n\n</div>\n\n\\\n<!-- ############# ALCOHOL CONSUMPTION - MAP ################ --->\n\n<div class=\"hum-fundo\"> <!--modify for each area-->\n\n## Population alcohol consumption in 2010 (EM13CHS301, EM13CNT205)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Example of dataframe with dummy values\ndf <- read.csv(\"https://raw.githubusercontent.com/plotly/datasets/refs/heads/master/2010_alcohol_consumption_by_country.csv\")\n\n# Creating the choropleth map with the adjusted color scale\nplot_ly(\ndata = df,\nlocations = ~location,\nlocationmode = \"country names\",\nz = ~alcohol, # Variable that determines the colors\ntype = \"choropleth\",\ncolorscale = \"Viridis\") # other scales: # other scales: RdBu, Inferno, Blues, Cividis, Greens, ...\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Example of dataframe with dummy values\ndf <- read.csv(\"https://raw.githubusercontent.com/plotly/datasets/refs/heads/master/2010_alcohol_consumption_by_country.csv\")\n\n# Creating the choropleth map with the adjusted color scale\nplot_ly(\ndata = df,\nlocations = ~location,\nlocationmode = \"country names\",\nz = ~alcohol, # Variable that determines the colors\ntype = \"choropleth\",\ncolorscale = \"Viridis\") # other scales: # other scales: RdBu, Inferno, Blues, Cividis, Greens, ...\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Color change\ncolorscale = \"Blues\"\n\n```\n\n</div>\n\n\\\n<!-- ############# CO2 EMISSIONS ################# --->\n\n<div class=\"hum-fundo\"> <!--modifica para cada Ã¡rea-->\n\n## Greenhouse effect and CO$_{2}$ emissions in Brazil (EM13CN09, EM13CHS104)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\nlibrary(magrittr) # required libraries\n\n# 1) Getting the data from the internet\n\nurl <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define the link to the data\ndata <- read.csv(url) # read the data file\n\n# 2) Building the graph with animation\n\nplot_ly(data, x = ~Year, y = ~Mean,\ntype = \"bar\",\nmarker = list(line = list(width = 10)),\nframe = ~Year) %>%\nanimation_opts(\nframe = 150, # Animation speed\ntransition = 0,\nredraw = TRUE\n) %>%\nlayout(\ntitle = \"Global temperature fluctuation\",\nxaxis = list(title = \"Years\"),\nyaxis = list(title = \"Temperature difference, C\"))\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\nlibrary(magrittr) # required libraries\n# 1) Getting data from the internet\nurl <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define the link to the data\ndata <- read.csv(url) # read the data file\n\n# 2) Building the graph with animation\n\nplot_ly(data, x = ~Year, y = ~Mean,\ntype = \"bar\",\nmarker = list(line = list(width = 10)),\nframe = ~Year) %>%\nanimation_opts(\nframe = 150, # Animation speed\ntransition = 0,\nredraw = TRUE\n) %>%\nlayout(\ntitle = \"Global Temperature Fluctuation\",\nxaxis = list(title = \"Years\"),\nyaxis = list(title = \"Temperature Difference, C\"))\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\nframe = 100, # Adjusted animation speed\n\n```\n\n</div>\n\n\\\n<!-- ####### OIL PRODUCTION - MAP ########## --->\n\n<div class=\"hum-fundo\"> <!--modifies for each area-->\n\n## Global oil production in 2014 (in teraWatts)\n\n| Note: Crude oil, shale oil, tar sands, condensates, and natural gas liquids - ethane, LPG and naphtha separated from natural gas production.\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Example of dataframe with dummy values\ndf <- read.csv(\"https://raw.githubusercontent.com/owid/owid-datasets/refs/heads/master/datasets/Oil%20production%20-%20Etemad%20%26%20Luciana/Oil%20production%20-%20Etemad%20%26%20Luciana.csv\")\n\n# Renaming columns to make interpretation and plotting easier\n\nnames(df) <- c(\"Country\", \"Year\", \"Production.TeraWatt\")\n\n# Filtering data for the last year (2014)\ndf <- subset(df, Year == \"2014\")\n\n# Creating the choropleth map with the adjusted color scale\nlibrary(plotly)\nplot_ly(\ndata = df,\nlocations = ~Country,\nlocationmode = \"country names\",\nz = ~Production.TeraWatt, # Variable that determines the colors\ntype = \"choropleth\",\ncolorscale = \"RdBu\") # other scales: # other scales: Viridis, Inferno, Blues, Cividis, Greens, ...\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\nlibrary(plotly)\n\n# Example of dataframe with dummy values\ndf <- read.csv(\"https://raw.githubusercontent.com/owid/owid-datasets/refs/heads/master/datasets/Oil%20production%20-%20Etemad%20%26%20Luciana/Oil%20production%20-%20Etemad%20%26%20Luciana.csv\")\n\n# Renaming the columns to make them easier to interpret and plot\n\nnames(df) <- c(\"Country\", \"Year\", \"Production.TeraWatt\")\n\n# Filtering the data for the last year (2014)\ndf <- subset(df, Year == \"2014\")\n\n# Creating the choropleth map with the adjusted color scale\nlibrary(plotly)\nplot_ly(\ndata = df,\nlocations = ~Country,\nlocationmode = \"country names\",\nz = ~Production.TeraWatt, # Variable that determines the colors\ntype = \"choropleth\",\ncolorscale = \"RdBu\") # other scales: # other scales: Viridis, Inferno, Blues, Cividis, Greens, ...\n```\n\n</div>\n\n\\\n<!-- ############# EARTH'S TEMPERATURE RISE ################# --->\n\n<div class=\"hum-fundo\"> <!--modifies for each area-->\n\n## Global Warming (EM13CN03, EM13CN09, EM13CHS105, EM13CHS205)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\nlibrary(magrittr) # required libraries\n\n# 1) Getting the data from the internet\n\nurl <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define the link to the data\ndata <- read.csv(url) # read the data file\n\n# 2) Building the graph with animation\n\nplot_ly(data, x = ~Year, y = ~Mean,\ntype = \"scatter\",\nmarker = list(line = list(width = 10)),\nframe = ~Year) %>%\nanimation_opts(\nframe = 150, # Animation speed\ntransition = 0,\nredraw = TRUE\n) %>%\nlayout(\ntitle = \"Global temperature fluctuation\",\nxaxis = list(title = \"Years\"),\nyaxis = list(title = \"Temperature difference, C\"))\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\nlibrary(magrittr) # required libraries\n\n# 1) Getting the data from the internet\n\nurl <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define the link to the data\ndata <- read.csv(url) # read the data file\n\n# 2) Building the graph with animation\n\nplot_ly(data, x = ~Year, y = ~Mean,\ntype = \"bar\",\nmarker = list(line = list(width = 10)),\nframe = ~Year) %>%\nanimation_opts(\nframe = 150, # Animation speed\ntransition = 0,\nredraw = TRUE\n) %>%\nlayout(\ntitle = \"Global Temperature Fluctuation\",\nxaxis = list(title = \"Years\"),\nyaxis = list(title = \"Temperature Difference, C\"))\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\nplot_ly(data, x = ~Year, y = ~Mean, type = \"bar\",\ntext = ~paste(\"Year:\", Year, \"<br>Temperature:\", Mean, \"Â°C\"),\nhoverinfo = \"text\")\n\n```\n\n</div>\n\n\\\n<!-- ###### LIFE EXPECTATION AND GROSS DOMESTIC PRODUCT ####### --->\n\n<div class=\"hum-fundo\"> <!--modify for each area-->\n\n## Life expectancy and Gross Domestic Product - GDP, 1956 to 2007 (EM13CHS101, EM13CHS104, EM13MAT405, EM13MAT410)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Getting the data from the internet\nurl <- read.csv(\"https://raw.githubusercontent.com/kirenz/datasets/refs/heads/master/gapminder.csv\")\n\ndadosExpida <- url # assigning the data to an `R` object\n\n# Creating the interactive graph with animation\nplot_ly(\ndadosExpida, # data converted from the internet\nx = ~gdpPercap, # per capita income\ny = ~lifeExp, # life expectancy\nsize = ~pop, # size of the points as a function of the population\ncolor = ~country, # color of the points as a function of the country\nframe = ~year, # Frame for animation by year of data collection\ntext = ~continent, # Country as information when hovering\nhoverinfo = \"text\",\ntype = 'scatter', # type of graph\nmode = 'markers',\nmarker = list(sizemode = 'diameter', opacity = 0.7)\n) %>%\nlayout( # assigning title and axis labels\ntitle = \"Gross Domestic Product X Life Expectancy\",\nxaxis = list(title = \"GDP (log), US$\", type = \"log\"),\nyaxis = list(title = \"Life Expectancy, years\"),\nshowlegend = TRUE # possibility or not to show the legend\n) %>%\nanimation_opts(\nframe = 1000, # Animation speed\ntransition = 0,\nredraw = TRUE\n)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Getting the data from the internet\nurl <- read.csv(\"https://raw.githubusercontent.com/kirenz/datasets/refs/heads/master/gapminder.csv\")\n\ndadosExpida <- url # assigning the data to an `R` object\n\n# Creating the interactive graph with animation\nplot_ly(\ndadosExpida, # data converted from the internet\nx = ~gdpPercap, # per capita income\ny = ~lifeExp, # life expectancy\nsize = ~pop, # size of the points as a function of the population\ncolor = ~country, # color of the points as a function of the country\nframe = ~year, # Frame for the animation by year of data collection\ntext = ~continent, # Country as information when hovering the mouse\nhoverinfo = \"text\", type = 'scatter', # chart type\nmode = 'markers',\nmarker = list(sizemode = 'diameter', opacity = 0.7)\n) %>%\nlayout( # assigning title and axis labels\ntitle = \"Gross Domestic Product X Life Expectancy\",\nxaxis = list(title = \"GDP (log), US$\", type = \"log\"),\nyaxis = list(title = \"Life Expectancy, years\"),\nshowlegend = TRUE # whether or not to display the legend\n) %>%\nanimation_opts(\nframe = 1000, # Animation speed\ntransition = 0,\nredraw = TRUE\n)\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Inside plot_ly()\ncolor = ~continent\n\n```\n\n</div>\n\n\\\n<!-- ####### METEORITE FALL - MAP ########## --->\n\n<div class=\"hum-fundo\"> <!--modify for each area-->\n\n## Meteorite fall on Earth - 1800 to 2013 (EM13CHS101, EM13CNT303, EM13CNT301)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(maps)\n\nmeteoritos <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-11/meteorites.csv\")\n\noptions(scipen = 999) \n\nmeteoritos_Mundo <- meteoritos %>%\n  filter(fall == \"Fell\") %>%\n  filter(year > 1800) %>%\n  # drop_na() %>%\n  arrange(mass)\n\n# Carregar o mapa do mundo\nworld <- map_data(\"world\")\n\nmapa_animado <- world %>%\n  ggplot() +\n  geom_polygon(aes( x= long, y = lat, group = group),\n               fill = \"grey20\",\n               color = \"white\",\n               size = 0.01) +\n  geom_point(data= meteoritos_Mundo, \n             aes(x = long, \n                 y = lat, \n                 frame = year,\n                 size = mass),\n             color = \"orange\",\n             alpha = 0.7) +\n  labs( title = \"Queda de meteoritos -  1800 a 2013}\",\n        caption = \"The Meteoritical Society\") +\n  # theme_map() +\n  scale_size_continuous(guide = F) +\n  scale_color_discrete(name = \"Type\") +\n  theme(plot.title = element_text(size = 10, hjust = 0.5))\n\n\nfig_2 <- ggplotly(mapa_animado) %>% animation_slider(currentvalue = list(prefix = \"Year \", font = list(color=\"orange\"))) \n\nfig_2\n\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(maps)\n\nmeteoritos <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-11/meteorites.csv\")\n\noptions(scipen = 999) \n\nmeteoritos_Mundo <- meteoritos %>%\n  filter(fall == \"Fell\") %>%\n  filter(year > 1800) %>%\n  # drop_na() %>%\n  arrange(mass)\n\n# Carregar o mapa do mundo\nworld <- map_data(\"world\")\n\nmapa_animado <- world %>%\n  ggplot() +\n  geom_polygon(aes( x= long, y = lat, group = group),\n               fill = \"grey20\",\n               color = \"white\",\n               size = 0.01) +\n  geom_point(data= meteoritos_Mundo, \n             aes(x = long, \n                 y = lat, \n                 frame = year,\n                 size = mass),\n             color = \"orange\",\n             alpha = 0.7) +\n  labs( title = \"Queda de meteoritos -  1800 a 2013}\",\n        caption = \"The Meteoritical Society\") +\n  # theme_map() +\n  scale_size_continuous(guide = F) +\n  scale_color_discrete(name = \"Type\") +\n  theme(plot.title = element_text(size = 10, hjust = 0.5))\n\n\nfig_2 <- ggplotly(mapa_animado) %>% animation_slider(currentvalue = list(prefix = \"Year \", font = list(color=\"orange\"))) \n\nfig_2\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval =FALSE}\nfill = \"grey30\", # Changed from \"grey20\" to \"grey30\"\n\n```\n\n</div>\n\n\\\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"number-sections":true,"toc":true,"output-file":"humanas_en.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":{"light":"flatly"},"title":"Human Sciences","class":"fundo-basico"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}