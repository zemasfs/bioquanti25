{"title":"Math","markdown":{"yaml":{"title":"Math","number-sections":true,"toc":true,"lang":"en","class":"fundo-basico"},"headingText":"Curves for exponential function *versus* logarithm (EM13MAT401, EM13MAT402)","containsRefs":false,"markdown":"\n\n<!-- ######### EXPONENTIAL versus LOGARITHM ########## -->\n\n<div class=\"mat-fundo\">\n\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\nx_values <- seq(1, 10, length.out = 10)\ny_exp <- exp(x_values) # Exponential function\ny_log <- log(x_values) # Logarithmic function\n\nexp_plot <- plot_ly(x = x_values, y = y_exp, type = 'scatter', mode = 'markers+lines', name = 'Exponential') %>%\n layout(title = \"Exponential Function\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Exp'))\n\nlog_plot <- plot_ly(x = x_values, y = y_log, type = 'scatter', mode = 'markers+lines', name = 'Logarithmic') %>%\n layout(title = \"Logarithmic Function\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Log'))\n\n# Combine the graphics\nsubplot(exp_plot, log_plot, nrows = 1) %>%\n layout(title = \"Exponential vs Logarithmic\", clickmode = 'event+select')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\nx_values ​​<- seq(1, 10, length.out = 10)\ny_exp <- exp(x_values) # Exponential function\ny_log <- log(x_values) # Logarithmic function\n\nexp_plot <- plot_ly(x = x_values, y = y_exp, type = 'scatter', mode = 'markers+lines', name = 'Exponential') %>%\n layout(title = \"Exponential Function\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Exp'))\n\nlog_plot <- plot_ly(x = x_values, y = y_log, type = 'scatter', mode = 'markers+lines', name = 'Logarithmic') %>%\nlayout(title = \"Logarithmic Function\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Log'))\n\n# Combine the graphs\nsubplot(exp_plot, log_plot, nrows = 1) %>%\nlayout(title = \"Exponential vs Logarithmic\", clickmode = 'event+select')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Change the colors of the graphs:\n\nexp_plot <- plot_ly(x = x_values, y = y_exp, type = 'scatter', mode = 'markers+lines', name = 'Exponential', marker = list(color = 'blue'), line = list(color = 'blue')) %>% layout(title = \"Exponential Function\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Exp'))\n\n```\n\n</div>\n\n\\\n\n<!-- ######### FUNCTIONS OF 1st, 2nd, and 3rd. DEGREES ########### -->\n\n<div class=\"mat-fundo\"> <!--modifies for each area-->\n\n## 1st, 2nd, and 3rd degree functions. degree (EM13MAT301, EM13MAT302)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Function to generate 1st, 2nd and 3rd degree polynomials\ngenerate_data <- function(degree) {\nx <- seq(-5, 5, length.out = 100)\ny <- if (degree == 1) 2 * x + 1 else if (degree == 2) x^2 - 3 * x + 2 else x^3 - 2 * x^2 + x - 1\nlist(x = x, y = y)\n}\n\nplot_ly() %>%\nadd_trace(x = generate_data(1)$x, y = generate_data(1)$y, mode = 'lines') %>%\nlayout(\ntitle = '1st to 3rd Degree Polynomials',\nsliders = list(list(\nsteps = lapply(1:3, function(degree) {\nlist(label = degree, method = \"restyle\",\nargs = list(list(y = list(generate_data(degree)$y))))\n})\n))\n)\n\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Function to generate 1st, 2nd and 3rd degree polynomials\ngenerate_data <- function(degree) {\nx <- seq(-5, 5, length.out = 100)\n y <- if (degree == 1) 2 * x + 1 else if (degree == 2) x^2 - 3 * x + 2 else x^3 - 2 * x^2 + x - 1\n list(x = x, y = y)\n}\n\nplot_ly() %>%\n add_trace(x = generate_data(1)$x, y = generate_data(1)$y, mode = 'lines') %>%\n layout(\n title = '1st to 3rd Degree Polynomial',\n sliders = list(list(\n steps = lapply(1:3, function(degree) {\n list(label = degree, method = \"restyle\",\n args = list(list(y = list(generate_data(degree)$y))))\n })\n ))\n )\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively, the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Add colors and labels to improve visualization\n\nplot_ly() %>% add_trace(x = generate_data(1)$x, y = generate_data(1)$y, mode = 'lines', name = '1º Grau', line = list(color = 'blue')) %>% add_trace(x = generate_data(2)$x, y = generate_data(2)$y, mode = 'lines', name = '2º Grau', line = list(color = 'green')) %>% add_trace(x = generate_data(3)$x, y = generate_data(3)$y, mode = 'lines', name = '3º Grau', line = list(color = 'red')) %>%\n\n```\n\n</div>\n\n\\\n\n<!-- ######### SINE AND COSINE ########## -->\n\n<div class=\"mat-fundo\"> <!--modifies for each area-->\n\n## Sine and Cosine (EM13MAT409, EM13CIF301)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Values ​​of x\nx <- seq(0, 2 * pi, length.out = 100)\n\nplot_ly() %>%\n add_trace(x = x, y = sin(x), mode = 'lines', name = 'Sine') %>%\nadd_trace(x = x, y = cos(x), mode = 'lines', name = 'Cosine') %>%\nlayout(\ntitle = 'Comparison: Sine and Cosine',\nxaxis = list(title = 'Angle (radians)'),\nyaxis = list(title = 'Value'),\nshowlegend = TRUE\n)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Values ​​of x\nx <- seq(0, 2 * pi, length.out = 100)\n\nplot_ly() %>%\nadd_trace(x = x, y = sin(x), mode = 'lines', name = 'Sine') %>%\nadd_trace(x = x, y = cos(x), mode = 'lines', name = 'Cosine') %>%\nlayout(\ntitle = 'Comparison: Sine and Cosine',\nxaxis = list(title = 'Angle (radians)'),\nyaxis = list(title = 'Value'),\nshowlegend = TRUE\n)\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Increase the values ​​of the sine and cosine functions\n\namplification <- 2 y_sin <- amplification * sin(x) y_cos <- amplification * cos(x)\n```\n\n</div>\n\n\\\n<!-- ######### CENTRAL TENDENCY AND HISTOGRAM ########## -->\n\n<div class=\"mat-fundo\"> <!--modify for each area-->\n\n## Central tendency: mean and median (EM13MAT306, EM13MAT305)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Example data\nset.seed(123)\ndata <- rnorm(100, mean = 50, sd = 10)\n\n# Statistics\nmedia_val <- mean(data)\nmedian_val <- median(data)\n\nplot_ly() %>%\nadd_trace(x = data, type = 'histogram', name = 'Distribution', opacity = 0.6) %>%\n  add_trace(x = c(media_val, media_val), y = c(0, 15), mode = 'lines', name = 'Mean', line = list(color = 'red')) %>%\n  add_trace(x = c(median_val, median_val), y = c(0, 15), mode = 'lines', name = 'Median', line = list(color = 'blue')) %>%\n  \nlayout(title = 'Central Tendency',\nxaxis = list(title = 'Values'),\nyaxis = list(title = 'Frequency'),\nshowlegend = TRUE)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Sample Data\nset.seed(123)\ndata <- rnorm(100, mean = 50, sd = 10)\n\n# Statistics\nmedia_val <- mean(data)\nmedian_val <- median(data)\n\nplot_ly() %>%\nadd_trace(x = data, type = 'histogram', name = 'Distribution', opacity = 0.6) %>%\nadd_trace(x = c(media_val, media_val), y = c(0, 15), mode = 'lines', name = 'Mean', line = list(color = 'red')) %>%\nadd_trace(x = c(median_val, median_val), y = c(0, 15), mode = 'lines', name = 'Median', line = list(color = 'blue')) %>%\nlayout(title = 'Central Tendency',\nxaxis = list(title = 'Values'),\nyaxis = list(title = 'Frequency'),\nshowlegend = TRUE)\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Example data (increasing the number of data)\n\nset.seed(123)\ndata <- rnorm(1000, mean = 50, sd = 10) # Increased from 100 to 1000\n```\n\n</div>\n\n\\\n<!-- ############ SPHERE SURFACE AREA AND VOLUME #############-->\n\n<div class=\"mat-fundo\">\n\n## Comparison of surface area and volume of a sphere (EM13MT05)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE, eval=TRUE}\nlibrary(plotly)\n\nplot_ly() %>%\n add_trace(x = 1:10, y = 4 * pi * (1:10)^2, mode = 'lines+markers', name = 'Surface') %>%\n add_trace(x = 1:10, y = (4/3) * pi * (1:10)^3, mode = 'lines+markers', name = 'Volume') %>%\n layout(\n title = 'Surface and Volume of a Sphere',\n xaxis = list(title = 'Radius'),\n yaxis = list(title = 'Value')\n )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\nplot_ly() %>%\n add_trace(x = 1:10, y = 4 * pi * (1:10)^2, mode = 'lines+markers', name = 'Surface') %>%\n add_trace(x = 1:10, y = (4/3) * pi * (1:10)^3, mode = 'lines+markers', name = 'Volume') %>%\n layout(\n title = 'Surface and Volume of a Sphere',\n xaxis = list(title = 'Radius'),\n yaxis = list(title = 'Value')\n )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\">\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval =FALSE}\n\nx = 1:100\ny = 1:100 # increases the no. of points in 10 times\n```\n\n</div>\n\n\\\n<!-- ############ ADJUSTABLE SINE CURVE ##############-->\n\n<div class=\"mat-fundo\"> <!--modifies for each area-->\n\n## Sine function and parameter adjustment (EM13MAT403, EM13MAT406, EM13MAT408)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Install the necessary packages\n# install.packages(\"plotly\")\n\nlibrary(plotly)\n\n# Data generation\nx <- seq(0, 2 * pi, length.out = 500)\n\n# Function to generate y based on the parameter a\nfunc <- function(a, x) {\nreturn(a * sin(x))\n}\n\n# Values of the 'a' parameter that will vary\na_values <- seq(0.5, 3, length.out = 30)\n\n# Creating a data frame with all the values ​​of a and x to plot\ndata <- data.frame(\nx = rep(x, times = length(a_values)),\ny = unlist(lapply(a_values, function(a) func(a, x))),\na = rep(a_values, each = length(x))\n)\n\n# Creating the interactive graph with animation\nplot_ly(data,\nx = ~x,\ny = ~y,\nframe = ~a,\ntype = 'scatter',\nmode = 'lines') %>%\nlayout(\ntitle = \"Variation of the function y = a * sin(x) with different values ​​of a\",\nxaxis = list(title = \"x\"), yaxis = list(title = \"y\", range = c(-3, 3))\n)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Install the necessary packages\n# install.packages(\"plotly\")\n\nlibrary(plotly)\n\n# Generating data\nx <- seq(0, 2 * pi, length.out = 500)\n\n# Function to generate y based on parameter a\nfunc <- function(a, x) {\nreturn(a * sin(x))\n\n# Values of parameter 'a' that will vary\na_values <- seq(0.5, 3, length.out = 30)\n\n# Creating a data frame with all values of a and x to plot\ndata <- data.frame(\nx = rep(x, times = length(a_values)),\ny = unlist(lapply(a_values, function(a) func(a, x))),\na = rep(a_values, each = length(x))\n)\n\n# Creating the interactive graph with animation\nplot_ly(data,\nx = ~x,\ny = ~y,\nframe = ~a,\ntype = 'scatter',\nmode = 'lines') %>%\nlayout(\ntitle = \"Variation of the function y = a * sin(x) with different values ​​of a\",\nxaxis = list(title = \"x\"),\nyaxis = list(title = \"y\", range = c(-3, 3))\n)\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Data generation\n\nx <- seq(0, 2 * pi, length.out = 1000) # Increased from 500 to 1000 for greater smoothness\"\n\n```\n\n</div>\n\n\\\n<!-- ############ LINEAR REGRESSION #############-->\n\n<div class=\"mat-fundo\">\n\n<!--  ############ REGRESSÃO LINEAR #############-->\n\n<div class=\"mat-fundo\">\n\n## Linear Regression (EM13MT10)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\ndados <- function(ruido_func) {\n  set.seed(123)\n  x <- seq(0, 5, length.out = 50)\n  desvio <- 2 * x + 5 + rnorm(50, 0, ruido_func)\n  y_esperado <- predict(lm(desvio ~ x), data.frame(x = x))\n  list(x = x, desvio = desvio, y_esperado = y_esperado)\n}\n\nplot_ly() %>%\n  add_trace(x = dados(1)$x, y = dados(1)$desvio, mode = 'markers', type = \"scatter\", name = \"Dados\") %>%\n  add_trace(x = dados(1)$x, y = dados(1)$y_esperado, mode = 'lines', type = \"scatter\", name = \"Linha de Regressão\") %>%\n  layout(\n    title = 'Regressão Linear',\n    xaxis = list(title = 'X'), yaxis = list(title = 'Y'),\n    sliders = list(list(\n      currentvalue = list(prefix = \"Desvio: \"),\n      steps = lapply(seq(0, 5, 1), function(sd_value) {\n        list(label = as.character(sd_value),\n             args = list(list(y = list(dados(sd_value)$desvio, dados(sd_value)$y_esperado))))\n      })\n    ))\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\ndados <- function(ruido_func) {\n  set.seed(123)\n  x <- seq(0, 5, length.out = 50)\n  desvio <- 2 * x + 5 + rnorm(50, 0, ruido_func)\n  y_esperado <- predict(lm(desvio ~ x), data.frame(x = x))\n  list(x = x, desvio = desvio, y_esperado = y_esperado)\n}\n\nplot_ly() %>%\n  add_trace(x = dados(1)$x, y = dados(1)$desvio, mode = 'markers', type = \"scatter\", name = \"Dados\") %>%\n  add_trace(x = dados(1)$x, y = dados(1)$y_esperado, mode = 'lines', type = \"scatter\", name = \"Linha de Regressão\") %>%\n  layout(\n    title = 'Regressão Linear',\n    xaxis = list(title = 'X'), yaxis = list(title = 'Y'),\n    sliders = list(list(\n      currentvalue = list(prefix = \"Desvio: \"),\n      steps = lapply(seq(0, 5, 1), function(sd_value) {\n        list(label = as.character(sd_value),\n             args = list(list(y = list(dados(sd_value)$desvio, dados(sd_value)$y_esperado))))\n      })\n    ))\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n\n<div class=\"mat-fundo2\">\n\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval =FALSE}\n\nlength.out = 50 # increase the no. of points to better visualize the scattering\n\nlapply(seq(0, 50, 1) # increases the number of standard deviations, to visualize the value of its influence on the scattering of the points (note that above 3 standard deviations the scattering becomes very large, with little change).\n\nlapply(seq(0, 3, 0.1) # changes the slider, to visualize the scattering more smoothly up to the value of 3 standard deviations\n```\n\n\n</div>\n","srcMarkdownNoYaml":"\n\n<!-- ######### EXPONENTIAL versus LOGARITHM ########## -->\n\n<div class=\"mat-fundo\">\n\n## Curves for exponential function *versus* logarithm (EM13MAT401, EM13MAT402)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\nx_values <- seq(1, 10, length.out = 10)\ny_exp <- exp(x_values) # Exponential function\ny_log <- log(x_values) # Logarithmic function\n\nexp_plot <- plot_ly(x = x_values, y = y_exp, type = 'scatter', mode = 'markers+lines', name = 'Exponential') %>%\n layout(title = \"Exponential Function\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Exp'))\n\nlog_plot <- plot_ly(x = x_values, y = y_log, type = 'scatter', mode = 'markers+lines', name = 'Logarithmic') %>%\n layout(title = \"Logarithmic Function\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Log'))\n\n# Combine the graphics\nsubplot(exp_plot, log_plot, nrows = 1) %>%\n layout(title = \"Exponential vs Logarithmic\", clickmode = 'event+select')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\nx_values ​​<- seq(1, 10, length.out = 10)\ny_exp <- exp(x_values) # Exponential function\ny_log <- log(x_values) # Logarithmic function\n\nexp_plot <- plot_ly(x = x_values, y = y_exp, type = 'scatter', mode = 'markers+lines', name = 'Exponential') %>%\n layout(title = \"Exponential Function\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Exp'))\n\nlog_plot <- plot_ly(x = x_values, y = y_log, type = 'scatter', mode = 'markers+lines', name = 'Logarithmic') %>%\nlayout(title = \"Logarithmic Function\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Log'))\n\n# Combine the graphs\nsubplot(exp_plot, log_plot, nrows = 1) %>%\nlayout(title = \"Exponential vs Logarithmic\", clickmode = 'event+select')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Change the colors of the graphs:\n\nexp_plot <- plot_ly(x = x_values, y = y_exp, type = 'scatter', mode = 'markers+lines', name = 'Exponential', marker = list(color = 'blue'), line = list(color = 'blue')) %>% layout(title = \"Exponential Function\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Exp'))\n\n```\n\n</div>\n\n\\\n\n<!-- ######### FUNCTIONS OF 1st, 2nd, and 3rd. DEGREES ########### -->\n\n<div class=\"mat-fundo\"> <!--modifies for each area-->\n\n## 1st, 2nd, and 3rd degree functions. degree (EM13MAT301, EM13MAT302)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Function to generate 1st, 2nd and 3rd degree polynomials\ngenerate_data <- function(degree) {\nx <- seq(-5, 5, length.out = 100)\ny <- if (degree == 1) 2 * x + 1 else if (degree == 2) x^2 - 3 * x + 2 else x^3 - 2 * x^2 + x - 1\nlist(x = x, y = y)\n}\n\nplot_ly() %>%\nadd_trace(x = generate_data(1)$x, y = generate_data(1)$y, mode = 'lines') %>%\nlayout(\ntitle = '1st to 3rd Degree Polynomials',\nsliders = list(list(\nsteps = lapply(1:3, function(degree) {\nlist(label = degree, method = \"restyle\",\nargs = list(list(y = list(generate_data(degree)$y))))\n})\n))\n)\n\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Function to generate 1st, 2nd and 3rd degree polynomials\ngenerate_data <- function(degree) {\nx <- seq(-5, 5, length.out = 100)\n y <- if (degree == 1) 2 * x + 1 else if (degree == 2) x^2 - 3 * x + 2 else x^3 - 2 * x^2 + x - 1\n list(x = x, y = y)\n}\n\nplot_ly() %>%\n add_trace(x = generate_data(1)$x, y = generate_data(1)$y, mode = 'lines') %>%\n layout(\n title = '1st to 3rd Degree Polynomial',\n sliders = list(list(\n steps = lapply(1:3, function(degree) {\n list(label = degree, method = \"restyle\",\n args = list(list(y = list(generate_data(degree)$y))))\n })\n ))\n )\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively, the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Add colors and labels to improve visualization\n\nplot_ly() %>% add_trace(x = generate_data(1)$x, y = generate_data(1)$y, mode = 'lines', name = '1º Grau', line = list(color = 'blue')) %>% add_trace(x = generate_data(2)$x, y = generate_data(2)$y, mode = 'lines', name = '2º Grau', line = list(color = 'green')) %>% add_trace(x = generate_data(3)$x, y = generate_data(3)$y, mode = 'lines', name = '3º Grau', line = list(color = 'red')) %>%\n\n```\n\n</div>\n\n\\\n\n<!-- ######### SINE AND COSINE ########## -->\n\n<div class=\"mat-fundo\"> <!--modifies for each area-->\n\n## Sine and Cosine (EM13MAT409, EM13CIF301)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Values ​​of x\nx <- seq(0, 2 * pi, length.out = 100)\n\nplot_ly() %>%\n add_trace(x = x, y = sin(x), mode = 'lines', name = 'Sine') %>%\nadd_trace(x = x, y = cos(x), mode = 'lines', name = 'Cosine') %>%\nlayout(\ntitle = 'Comparison: Sine and Cosine',\nxaxis = list(title = 'Angle (radians)'),\nyaxis = list(title = 'Value'),\nshowlegend = TRUE\n)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Values ​​of x\nx <- seq(0, 2 * pi, length.out = 100)\n\nplot_ly() %>%\nadd_trace(x = x, y = sin(x), mode = 'lines', name = 'Sine') %>%\nadd_trace(x = x, y = cos(x), mode = 'lines', name = 'Cosine') %>%\nlayout(\ntitle = 'Comparison: Sine and Cosine',\nxaxis = list(title = 'Angle (radians)'),\nyaxis = list(title = 'Value'),\nshowlegend = TRUE\n)\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Increase the values ​​of the sine and cosine functions\n\namplification <- 2 y_sin <- amplification * sin(x) y_cos <- amplification * cos(x)\n```\n\n</div>\n\n\\\n<!-- ######### CENTRAL TENDENCY AND HISTOGRAM ########## -->\n\n<div class=\"mat-fundo\"> <!--modify for each area-->\n\n## Central tendency: mean and median (EM13MAT306, EM13MAT305)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Example data\nset.seed(123)\ndata <- rnorm(100, mean = 50, sd = 10)\n\n# Statistics\nmedia_val <- mean(data)\nmedian_val <- median(data)\n\nplot_ly() %>%\nadd_trace(x = data, type = 'histogram', name = 'Distribution', opacity = 0.6) %>%\n  add_trace(x = c(media_val, media_val), y = c(0, 15), mode = 'lines', name = 'Mean', line = list(color = 'red')) %>%\n  add_trace(x = c(median_val, median_val), y = c(0, 15), mode = 'lines', name = 'Median', line = list(color = 'blue')) %>%\n  \nlayout(title = 'Central Tendency',\nxaxis = list(title = 'Values'),\nyaxis = list(title = 'Frequency'),\nshowlegend = TRUE)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Sample Data\nset.seed(123)\ndata <- rnorm(100, mean = 50, sd = 10)\n\n# Statistics\nmedia_val <- mean(data)\nmedian_val <- median(data)\n\nplot_ly() %>%\nadd_trace(x = data, type = 'histogram', name = 'Distribution', opacity = 0.6) %>%\nadd_trace(x = c(media_val, media_val), y = c(0, 15), mode = 'lines', name = 'Mean', line = list(color = 'red')) %>%\nadd_trace(x = c(median_val, median_val), y = c(0, 15), mode = 'lines', name = 'Median', line = list(color = 'blue')) %>%\nlayout(title = 'Central Tendency',\nxaxis = list(title = 'Values'),\nyaxis = list(title = 'Frequency'),\nshowlegend = TRUE)\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Example data (increasing the number of data)\n\nset.seed(123)\ndata <- rnorm(1000, mean = 50, sd = 10) # Increased from 100 to 1000\n```\n\n</div>\n\n\\\n<!-- ############ SPHERE SURFACE AREA AND VOLUME #############-->\n\n<div class=\"mat-fundo\">\n\n## Comparison of surface area and volume of a sphere (EM13MT05)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE, eval=TRUE}\nlibrary(plotly)\n\nplot_ly() %>%\n add_trace(x = 1:10, y = 4 * pi * (1:10)^2, mode = 'lines+markers', name = 'Surface') %>%\n add_trace(x = 1:10, y = (4/3) * pi * (1:10)^3, mode = 'lines+markers', name = 'Volume') %>%\n layout(\n title = 'Surface and Volume of a Sphere',\n xaxis = list(title = 'Radius'),\n yaxis = list(title = 'Value')\n )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\nplot_ly() %>%\n add_trace(x = 1:10, y = 4 * pi * (1:10)^2, mode = 'lines+markers', name = 'Surface') %>%\n add_trace(x = 1:10, y = (4/3) * pi * (1:10)^3, mode = 'lines+markers', name = 'Volume') %>%\n layout(\n title = 'Surface and Volume of a Sphere',\n xaxis = list(title = 'Radius'),\n yaxis = list(title = 'Value')\n )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\">\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval =FALSE}\n\nx = 1:100\ny = 1:100 # increases the no. of points in 10 times\n```\n\n</div>\n\n\\\n<!-- ############ ADJUSTABLE SINE CURVE ##############-->\n\n<div class=\"mat-fundo\"> <!--modifies for each area-->\n\n## Sine function and parameter adjustment (EM13MAT403, EM13MAT406, EM13MAT408)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Install the necessary packages\n# install.packages(\"plotly\")\n\nlibrary(plotly)\n\n# Data generation\nx <- seq(0, 2 * pi, length.out = 500)\n\n# Function to generate y based on the parameter a\nfunc <- function(a, x) {\nreturn(a * sin(x))\n}\n\n# Values of the 'a' parameter that will vary\na_values <- seq(0.5, 3, length.out = 30)\n\n# Creating a data frame with all the values ​​of a and x to plot\ndata <- data.frame(\nx = rep(x, times = length(a_values)),\ny = unlist(lapply(a_values, function(a) func(a, x))),\na = rep(a_values, each = length(x))\n)\n\n# Creating the interactive graph with animation\nplot_ly(data,\nx = ~x,\ny = ~y,\nframe = ~a,\ntype = 'scatter',\nmode = 'lines') %>%\nlayout(\ntitle = \"Variation of the function y = a * sin(x) with different values ​​of a\",\nxaxis = list(title = \"x\"), yaxis = list(title = \"y\", range = c(-3, 3))\n)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Install the necessary packages\n# install.packages(\"plotly\")\n\nlibrary(plotly)\n\n# Generating data\nx <- seq(0, 2 * pi, length.out = 500)\n\n# Function to generate y based on parameter a\nfunc <- function(a, x) {\nreturn(a * sin(x))\n\n# Values of parameter 'a' that will vary\na_values <- seq(0.5, 3, length.out = 30)\n\n# Creating a data frame with all values of a and x to plot\ndata <- data.frame(\nx = rep(x, times = length(a_values)),\ny = unlist(lapply(a_values, function(a) func(a, x))),\na = rep(a_values, each = length(x))\n)\n\n# Creating the interactive graph with animation\nplot_ly(data,\nx = ~x,\ny = ~y,\nframe = ~a,\ntype = 'scatter',\nmode = 'lines') %>%\nlayout(\ntitle = \"Variation of the function y = a * sin(x) with different values ​​of a\",\nxaxis = list(title = \"x\"),\nyaxis = list(title = \"y\", range = c(-3, 3))\n)\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifies for each area-->\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval = FALSE}\n# Data generation\n\nx <- seq(0, 2 * pi, length.out = 1000) # Increased from 500 to 1000 for greater smoothness\"\n\n```\n\n</div>\n\n\\\n<!-- ############ LINEAR REGRESSION #############-->\n\n<div class=\"mat-fundo\">\n\n<!--  ############ REGRESSÃO LINEAR #############-->\n\n<div class=\"mat-fundo\">\n\n## Linear Regression (EM13MT10)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\ndados <- function(ruido_func) {\n  set.seed(123)\n  x <- seq(0, 5, length.out = 50)\n  desvio <- 2 * x + 5 + rnorm(50, 0, ruido_func)\n  y_esperado <- predict(lm(desvio ~ x), data.frame(x = x))\n  list(x = x, desvio = desvio, y_esperado = y_esperado)\n}\n\nplot_ly() %>%\n  add_trace(x = dados(1)$x, y = dados(1)$desvio, mode = 'markers', type = \"scatter\", name = \"Dados\") %>%\n  add_trace(x = dados(1)$x, y = dados(1)$y_esperado, mode = 'lines', type = \"scatter\", name = \"Linha de Regressão\") %>%\n  layout(\n    title = 'Regressão Linear',\n    xaxis = list(title = 'X'), yaxis = list(title = 'Y'),\n    sliders = list(list(\n      currentvalue = list(prefix = \"Desvio: \"),\n      steps = lapply(seq(0, 5, 1), function(sd_value) {\n        list(label = as.character(sd_value),\n             args = list(list(y = list(dados(sd_value)$desvio, dados(sd_value)$y_esperado))))\n      })\n    ))\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\ndados <- function(ruido_func) {\n  set.seed(123)\n  x <- seq(0, 5, length.out = 50)\n  desvio <- 2 * x + 5 + rnorm(50, 0, ruido_func)\n  y_esperado <- predict(lm(desvio ~ x), data.frame(x = x))\n  list(x = x, desvio = desvio, y_esperado = y_esperado)\n}\n\nplot_ly() %>%\n  add_trace(x = dados(1)$x, y = dados(1)$desvio, mode = 'markers', type = \"scatter\", name = \"Dados\") %>%\n  add_trace(x = dados(1)$x, y = dados(1)$y_esperado, mode = 'lines', type = \"scatter\", name = \"Linha de Regressão\") %>%\n  layout(\n    title = 'Regressão Linear',\n    xaxis = list(title = 'X'), yaxis = list(title = 'Y'),\n    sliders = list(list(\n      currentvalue = list(prefix = \"Desvio: \"),\n      steps = lapply(seq(0, 5, 1), function(sd_value) {\n        list(label = as.character(sd_value),\n             args = list(list(y = list(dados(sd_value)$desvio, dados(sd_value)$y_esperado))))\n      })\n    ))\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n\n<div class=\"mat-fundo2\">\n\n\n**Suggestions:**\n\n| Try modifying the graph, using/replacing alternatively the commands below in the code snippet:\n\n```{r, eval =FALSE}\n\nlength.out = 50 # increase the no. of points to better visualize the scattering\n\nlapply(seq(0, 50, 1) # increases the number of standard deviations, to visualize the value of its influence on the scattering of the points (note that above 3 standard deviations the scattering becomes very large, with little change).\n\nlapply(seq(0, 3, 0.1) # changes the slider, to visualize the scattering more smoothly up to the value of 3 standard deviations\n```\n\n\n</div>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"number-sections":true,"toc":true,"output-file":"matematica_en.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":{"light":"flatly"},"title":"Math","class":"fundo-basico"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}