{"title":"Amino acids","markdown":{"yaml":{"title":"Amino acids","bibliography":"referencias.bib"},"headingText":"Isoelectric point & amino acids","headingAttr":{"id":"secAAcido","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n| In general, the isoelectric point, or *pI*, represents the pH value at which a molecule acquires a net zero charge under an electric field, that is, its positive charges cancel each other out with the negative charges. It is usually obtained experimentally by kinetic measurements, such as *Zeta potential, electrofocusing or capillary electrophoresis*. Similarly, the *isoionic point* refers to the same condition, however in the absence of an electric field, and can be measured by *potentiometric titration, viscosity*, or by the structural information of a monomeric sequence, such as in the *primary sequence of proteins*.\n| Since all 20 amino acids that make up the protein structure have ionizable groups, both in their carbon skeleton and in their side chain, it is possible to predict the isoionic point of an amino acid based on the *pKa* values ​​presented in these ionizable groups. The *pI* is also commonly called the *isoelectric point*, although this definition entails a more complex theoretical scope.\n\nFor example, glutamic acid (Glu, E) has an ionizable carboxylate in its side chain, in addition to the amine (-H$_2$N) and carboxylate groups of the carbon skeleton @fig-glu:\n\n```{r, label=\"fig-glu\", echo=FALSE, fig.align =\"center\", out.width=\"20%\", fig.cap=\"Planar structural formula for glutamic acid (Wikimedia).\"}\nknitr::include_graphics(\"figures/Glutamic_Acid.png\")\n```\n\n| Thus, its *net net charge*, *qnet*, can be determined from the sum of the acidic (qa) and basic (qb) forms of the molecule, in a similar way as that presented from the equation \\eqref{eq-HHfosf}:\n\n$$\nqnet = qb + qa\n$$ {#eq-qnet}\n\n$$\nqnet = qb+\\frac{1}{1+10^{pH-pKa}}\n$$ {#eq-qnet2}\n\n| Since this is a polyprotic acid, @eq-qnet2 becomes:\n\n$$\nqnet = \\sum_{i=1}^{n} {(qb+\\frac{1}{1+10^{pH-pKi}})}\n$$ {#eq-qnet3}\n\n, with *pKi* as the nth value of pKa. In this way, it is possible to programmatically determine the titration curve of glutamic acid as a function of its charge, and not of the acid fraction. In this line, *qb* represents the form of the compound in base, which for Glu will present the values ​​of *-1* for the two carboxylates, and *0* for the amine group, making it necessary to compose an additional vector for *qb*.\n\n```{r, echo =TRUE, fig.cap=\"Titration curve for glutamic acid. The curve intersects the dotted line at the isoionic point of Glu.\"}\n\n# Glu Titration\n\nqNet <- function(pH, qB, pKa) {\nx <- 0\nfor (i in 1:length(qB)) {\nx <- x + qB[i] + 1 / (1 + 10^(pH - pKa[i]))\n}\nreturn(x)\n}\nqB <- c(-1, 0, -1)\npKa <- c(2.2, 9.7, 4.3)\n\ncurve(qNet(x, qB, pKa), 1, 12, xlab = \"pH\", ylab = \"qNet\")\n\nabline(0, 0, lty = \"dotted\")\n```\n\n| It is possible to manually identify the *pI* value for glutamic acid using an *R* function, such as `locator()` seen previously. But it is also possible to access this value automatically, by applying a command that finds the root of this function, that is, the pH value that corresponds to a null value for *qnet*. For this, the use of `uniroot` is exemplified, in which the desired mathematical function is defined, as well as the lower and upper limits for the search by the algorithm, as follows:\n\n```{r}\n# Calculation of pI\nf <- function(pH) {\nqNet(pH, qB, pKa)\n}\nstr(uniroot(f, c(2, 5)))\n```\n\n| This result translates to a pI of 3.25 (`root`), in 4 iterations, with an estimated precision of 6.1x10$^{-5}$, and an associated error of -4.8x10$^{-6}$.\n| This way of obtaining a value using numerical calculation is sometimes called a **numerical solution**. On the other hand, the pI value for Glu can be obtained by a simpler procedure, usually found in textbooks on the subject, and which takes the form below:\n\n$$\npI = \\frac{pKa1+pKa2}{2}\n$$ {#eq-pIeq}\n\n| In our example, the pI will involve the pKas of the two carboxylates, which will result in *(2.3+4.2)/2*, or *3.25*! Not bad for an approximation, huh? This procedure involving the solution of a mathematical problem based on system parameters is called an **analytical method or solution**. This solution can also be exemplified by the parameter obtained based on the observation of the graphical behavior of the titration, as in the figures above.\n\n| Now, what use is a more complex numerical procedure if a simple analytical equation already solves the problem of finding the pI value for glutamic acid? Well, exactly for that, to solve more complex problems. A little less rhetorically, however, it can be said that the *numerical solution* works better for systems where the *analytical solution* is sometimes not enough or even becomes impossible, as in the solution of equations with dozens of parameters.\n\n## Isoionic point & biopolymers\n\n| A situation on this topic can be illustrated by obtaining the pI value for a protein. For example, human lysozyme , an enzyme with a tertiary structure composed of 130 amino acid residues. In this case, the *analytical solution* is faced with the complexity of identifying which of these residues are ionizable in aqueous solution, and which would be involved in a distribution that would result in a net zero charge for the molecule.\n\n| For this more complex system, it is necessary to slightly expand the function defined for glutamic acid, computing in the *qb* vector the base charges of the 7 amino acids with ionizable side chains, and assigning a new vector for the quantity of each ionizable residue present in lysozyme. The code below exemplifies this solution, calculates the pI of the enzyme, and plots the graph of its titration, although this order is not relevant, since the pI is calculated numerically, not graphically.\n\n```{r, echo=TRUE, fig.cap=\"Titration curve for lysozyme.\"}\n# Lysozyme Titration and pI Determination\n\n# Define function for qNet\nqNet <- function(pH, qB, pKa, n) {\nx <- 0\nfor (i in 1:length(qB)) {\nx <- x + n[i] * qB[i] + n[i] / (1 + 10^(pH - pKa[i]))\n}\nreturn(x)\n}\n\n# Define pKas of aCOOH, aNH3 and the 7 side chains of AA\npKa <- c(2.2, 9.6, 3.9, 4.1, 6.0, 8.5, 10.1, 10.8, 12.5)\n\n# Define qB, the charges of each amino acid in the base form\nqB <- c(-1, 0, -1, -1, 0, -1, -1, 0, 0)\n\nionizable <- c(\n\"aCOOH\", \"aNH3\", \"Asp\", \"Glu\", \"His\", \"Cys\", \"Tyr\",\n\"Lys\", \"Arg\"\n)\nn <- c(1, 1, 7, 3, 1, 8, 6, 5, 14) # List of amounts of residues\n# ionizable in lysozyme (each element represents the amount\n# of aCOOH, aNH3, and certain AA in the enzyme)\n\n# Calculation of pI\nf <- function(pH) {\nqNet(pH, qB, pKa, n)\n}\nstr(uniroot(f, c(1, 13))) # estimation of pI between 10 and 12\n\n# Titration graph\ncurve(qNet(x, qB, pKa, n), 1, 12, xlab = \"pH\", ylab = \"qNet\")\nabline(0, 0, lty = 3)\n```\n\n| Note that the value found for pI of lysozyme was 9.46; that is, at pH 9.46 the enzyme presents a net net charge of zero, as can also be seen in the graphical representation.\n\n## Isoionic point & R libraries\n\n| Despite the precision of the pI calculation by the *numerical solution* performed for lysozyme, one of the most fascinating features of the program lies in the use of libraries (`packages`), which is no different for determining biopolymer properties, such as pI.\n| Among the existing libraries for physicochemical properties of proteins and nucleic acids, the `seqinr` package, *Biological Sequences Retrieval and Analysis* [^aminoacid-1], for exploratory analysis and visualization of biopolymers, is an example. To use this package, however, it is necessary to obtain the primary sequence of the protein, represented in a one-letter code. The primary sequence of lysozyme can be obtained from the website of the *National Center for Biotechnology Information*, NCBI [^aminoacid-2]. A quick trick involves:\n\n[^aminoacid-1]: seqinr package: https://cran.r-project.org/web/packages/seqinr/index.html\n\n[^aminoacid-2]: NCBI. https://www.ncbi.nlm.nih.gov/protein\n\n1) type the name of the protein;\n\n2) select from the resulting options;\n\n3) click on FASTA to obtain the 1-letter primary sequence.\n\n4) copy the presented protein sequence to `seqinr`.\n\n| Assuming that the `seqinr` library is installed, and that the sequence has been obtained for lysozyme (search for *CAA32175* or *lysozyme \\[Homo sapiens\\]*), the pI value for it can be found using the following code:\n\n```{r}\nlibrary(seqinr)\nlysozyme <- s2c(\"KVFERCELARTLKRLGMDGYRGISLANWMCLAKWESGYNTRATNYNAGDR\nSTDYGIFQINSRYWCNDGKTPGAVNACHLSCSALLQDNIADAVACAKRVV\nRDPQGIRAWVAWRNRCQNRDVRQYVQGCGV\")\n# convert string sequence to character vector\ncomputePI(lysozyme)\n```\n\n| Note that the pI value for the package, 9.28, was very close to that found by the *numerical solution* above. This is due to the use of different algorithms for both, as well as the computation of different pKa values ​​for `seqinr`. As an example of this variation, `seqinr` itself presents different pKa values, depending on the database searched. To verify this, type the command below and view the resulting *pK* variable.\n\n```{r, echo=TRUE}\nlibrary(seqinr)\ndata(pK)\n```\n\n| Additionally, you can also compare the pI value of lysozyme with the algorithm used by the database on the [^aminoacid-3] website. To do this, simply paste the residue sequence into the available field and click on the pI computation. Note that the resulting value of 9.28 matches that of the algorithm used by the R `seqinr` package.\n\n[^aminoacid-3]: Expasy. https://web.expasy.org/compute_pi/\n\n```{r}\nlibrary(knitr)\nknitr::kable(pK, \"pipe\", caption = \"Table of pKa values ​​for amino acids\nfrom various sources, extracted from the seqinr package.\")\n```\n\n| There are other R packages that analyze amino acid and nucleotide sequences, including the calculation of pI, among which it is worth mentioning Peptides [^aminoacid-4].\n\n[^aminoacid-4]: Peptides package. https://cran.r-project.org/web/packages/Peptides/index.html","srcMarkdownNoYaml":"\n\n## Isoelectric point & amino acids {#secAAcido}\n\n| In general, the isoelectric point, or *pI*, represents the pH value at which a molecule acquires a net zero charge under an electric field, that is, its positive charges cancel each other out with the negative charges. It is usually obtained experimentally by kinetic measurements, such as *Zeta potential, electrofocusing or capillary electrophoresis*. Similarly, the *isoionic point* refers to the same condition, however in the absence of an electric field, and can be measured by *potentiometric titration, viscosity*, or by the structural information of a monomeric sequence, such as in the *primary sequence of proteins*.\n| Since all 20 amino acids that make up the protein structure have ionizable groups, both in their carbon skeleton and in their side chain, it is possible to predict the isoionic point of an amino acid based on the *pKa* values ​​presented in these ionizable groups. The *pI* is also commonly called the *isoelectric point*, although this definition entails a more complex theoretical scope.\n\nFor example, glutamic acid (Glu, E) has an ionizable carboxylate in its side chain, in addition to the amine (-H$_2$N) and carboxylate groups of the carbon skeleton @fig-glu:\n\n```{r, label=\"fig-glu\", echo=FALSE, fig.align =\"center\", out.width=\"20%\", fig.cap=\"Planar structural formula for glutamic acid (Wikimedia).\"}\nknitr::include_graphics(\"figures/Glutamic_Acid.png\")\n```\n\n| Thus, its *net net charge*, *qnet*, can be determined from the sum of the acidic (qa) and basic (qb) forms of the molecule, in a similar way as that presented from the equation \\eqref{eq-HHfosf}:\n\n$$\nqnet = qb + qa\n$$ {#eq-qnet}\n\n$$\nqnet = qb+\\frac{1}{1+10^{pH-pKa}}\n$$ {#eq-qnet2}\n\n| Since this is a polyprotic acid, @eq-qnet2 becomes:\n\n$$\nqnet = \\sum_{i=1}^{n} {(qb+\\frac{1}{1+10^{pH-pKi}})}\n$$ {#eq-qnet3}\n\n, with *pKi* as the nth value of pKa. In this way, it is possible to programmatically determine the titration curve of glutamic acid as a function of its charge, and not of the acid fraction. In this line, *qb* represents the form of the compound in base, which for Glu will present the values ​​of *-1* for the two carboxylates, and *0* for the amine group, making it necessary to compose an additional vector for *qb*.\n\n```{r, echo =TRUE, fig.cap=\"Titration curve for glutamic acid. The curve intersects the dotted line at the isoionic point of Glu.\"}\n\n# Glu Titration\n\nqNet <- function(pH, qB, pKa) {\nx <- 0\nfor (i in 1:length(qB)) {\nx <- x + qB[i] + 1 / (1 + 10^(pH - pKa[i]))\n}\nreturn(x)\n}\nqB <- c(-1, 0, -1)\npKa <- c(2.2, 9.7, 4.3)\n\ncurve(qNet(x, qB, pKa), 1, 12, xlab = \"pH\", ylab = \"qNet\")\n\nabline(0, 0, lty = \"dotted\")\n```\n\n| It is possible to manually identify the *pI* value for glutamic acid using an *R* function, such as `locator()` seen previously. But it is also possible to access this value automatically, by applying a command that finds the root of this function, that is, the pH value that corresponds to a null value for *qnet*. For this, the use of `uniroot` is exemplified, in which the desired mathematical function is defined, as well as the lower and upper limits for the search by the algorithm, as follows:\n\n```{r}\n# Calculation of pI\nf <- function(pH) {\nqNet(pH, qB, pKa)\n}\nstr(uniroot(f, c(2, 5)))\n```\n\n| This result translates to a pI of 3.25 (`root`), in 4 iterations, with an estimated precision of 6.1x10$^{-5}$, and an associated error of -4.8x10$^{-6}$.\n| This way of obtaining a value using numerical calculation is sometimes called a **numerical solution**. On the other hand, the pI value for Glu can be obtained by a simpler procedure, usually found in textbooks on the subject, and which takes the form below:\n\n$$\npI = \\frac{pKa1+pKa2}{2}\n$$ {#eq-pIeq}\n\n| In our example, the pI will involve the pKas of the two carboxylates, which will result in *(2.3+4.2)/2*, or *3.25*! Not bad for an approximation, huh? This procedure involving the solution of a mathematical problem based on system parameters is called an **analytical method or solution**. This solution can also be exemplified by the parameter obtained based on the observation of the graphical behavior of the titration, as in the figures above.\n\n| Now, what use is a more complex numerical procedure if a simple analytical equation already solves the problem of finding the pI value for glutamic acid? Well, exactly for that, to solve more complex problems. A little less rhetorically, however, it can be said that the *numerical solution* works better for systems where the *analytical solution* is sometimes not enough or even becomes impossible, as in the solution of equations with dozens of parameters.\n\n## Isoionic point & biopolymers\n\n| A situation on this topic can be illustrated by obtaining the pI value for a protein. For example, human lysozyme , an enzyme with a tertiary structure composed of 130 amino acid residues. In this case, the *analytical solution* is faced with the complexity of identifying which of these residues are ionizable in aqueous solution, and which would be involved in a distribution that would result in a net zero charge for the molecule.\n\n| For this more complex system, it is necessary to slightly expand the function defined for glutamic acid, computing in the *qb* vector the base charges of the 7 amino acids with ionizable side chains, and assigning a new vector for the quantity of each ionizable residue present in lysozyme. The code below exemplifies this solution, calculates the pI of the enzyme, and plots the graph of its titration, although this order is not relevant, since the pI is calculated numerically, not graphically.\n\n```{r, echo=TRUE, fig.cap=\"Titration curve for lysozyme.\"}\n# Lysozyme Titration and pI Determination\n\n# Define function for qNet\nqNet <- function(pH, qB, pKa, n) {\nx <- 0\nfor (i in 1:length(qB)) {\nx <- x + n[i] * qB[i] + n[i] / (1 + 10^(pH - pKa[i]))\n}\nreturn(x)\n}\n\n# Define pKas of aCOOH, aNH3 and the 7 side chains of AA\npKa <- c(2.2, 9.6, 3.9, 4.1, 6.0, 8.5, 10.1, 10.8, 12.5)\n\n# Define qB, the charges of each amino acid in the base form\nqB <- c(-1, 0, -1, -1, 0, -1, -1, 0, 0)\n\nionizable <- c(\n\"aCOOH\", \"aNH3\", \"Asp\", \"Glu\", \"His\", \"Cys\", \"Tyr\",\n\"Lys\", \"Arg\"\n)\nn <- c(1, 1, 7, 3, 1, 8, 6, 5, 14) # List of amounts of residues\n# ionizable in lysozyme (each element represents the amount\n# of aCOOH, aNH3, and certain AA in the enzyme)\n\n# Calculation of pI\nf <- function(pH) {\nqNet(pH, qB, pKa, n)\n}\nstr(uniroot(f, c(1, 13))) # estimation of pI between 10 and 12\n\n# Titration graph\ncurve(qNet(x, qB, pKa, n), 1, 12, xlab = \"pH\", ylab = \"qNet\")\nabline(0, 0, lty = 3)\n```\n\n| Note that the value found for pI of lysozyme was 9.46; that is, at pH 9.46 the enzyme presents a net net charge of zero, as can also be seen in the graphical representation.\n\n## Isoionic point & R libraries\n\n| Despite the precision of the pI calculation by the *numerical solution* performed for lysozyme, one of the most fascinating features of the program lies in the use of libraries (`packages`), which is no different for determining biopolymer properties, such as pI.\n| Among the existing libraries for physicochemical properties of proteins and nucleic acids, the `seqinr` package, *Biological Sequences Retrieval and Analysis* [^aminoacid-1], for exploratory analysis and visualization of biopolymers, is an example. To use this package, however, it is necessary to obtain the primary sequence of the protein, represented in a one-letter code. The primary sequence of lysozyme can be obtained from the website of the *National Center for Biotechnology Information*, NCBI [^aminoacid-2]. A quick trick involves:\n\n[^aminoacid-1]: seqinr package: https://cran.r-project.org/web/packages/seqinr/index.html\n\n[^aminoacid-2]: NCBI. https://www.ncbi.nlm.nih.gov/protein\n\n1) type the name of the protein;\n\n2) select from the resulting options;\n\n3) click on FASTA to obtain the 1-letter primary sequence.\n\n4) copy the presented protein sequence to `seqinr`.\n\n| Assuming that the `seqinr` library is installed, and that the sequence has been obtained for lysozyme (search for *CAA32175* or *lysozyme \\[Homo sapiens\\]*), the pI value for it can be found using the following code:\n\n```{r}\nlibrary(seqinr)\nlysozyme <- s2c(\"KVFERCELARTLKRLGMDGYRGISLANWMCLAKWESGYNTRATNYNAGDR\nSTDYGIFQINSRYWCNDGKTPGAVNACHLSCSALLQDNIADAVACAKRVV\nRDPQGIRAWVAWRNRCQNRDVRQYVQGCGV\")\n# convert string sequence to character vector\ncomputePI(lysozyme)\n```\n\n| Note that the pI value for the package, 9.28, was very close to that found by the *numerical solution* above. This is due to the use of different algorithms for both, as well as the computation of different pKa values ​​for `seqinr`. As an example of this variation, `seqinr` itself presents different pKa values, depending on the database searched. To verify this, type the command below and view the resulting *pK* variable.\n\n```{r, echo=TRUE}\nlibrary(seqinr)\ndata(pK)\n```\n\n| Additionally, you can also compare the pI value of lysozyme with the algorithm used by the database on the [^aminoacid-3] website. To do this, simply paste the residue sequence into the available field and click on the pI computation. Note that the resulting value of 9.28 matches that of the algorithm used by the R `seqinr` package.\n\n[^aminoacid-3]: Expasy. https://web.expasy.org/compute_pi/\n\n```{r}\nlibrary(knitr)\nknitr::kable(pK, \"pipe\", caption = \"Table of pKa values ​​for amino acids\nfrom various sources, extracted from the seqinr package.\")\n```\n\n| There are other R packages that analyze amino acid and nucleotide sequences, including the calculation of pI, among which it is worth mentioning Peptides [^aminoacid-4].\n\n[^aminoacid-4]: Peptides package. https://cran.r-project.org/web/packages/Peptides/index.html"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"output-file":"aminoacid_en.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.22","theme":{"light":"flatly"},"title":"Amino acids","bibliography":["referencias.bib"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}