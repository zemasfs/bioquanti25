{"title":"Metabolic Networks","markdown":{"yaml":{"title":"Metabolic Networks","bibliography":"referencias.bib"},"headingText":"Biochemical pathways of metabolism","headingAttr":{"id":"redesMet","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n| We can consider cellular metabolism as a network of homeostatically feedback metabolic pathways. If we zoom in on any of the biochemical reactions involved in this complex web, we can identify a *black box* common to all of them:\n\n```{r, blackb, echo=FALSE, fig.align =\"center\", out.width=\"40%\", fig.cap=\"A representation of the black box of enzymatic reactions. E = enzyme c,d = cofactors, coenzymes, modifiers; f,g = secondary compounds resulting from catalysis.\"}\nknitr::include_graphics(\"figures/blackbox.png\")\n```\n\n| Although the representation above may involve equilibrium reactions (double arrows), or even the absence of a catalyst, the image generalizes individual biochemical reactions that are part of any *metabolic map*. If we now wish to evaluate the consumption of compound *A* (reactant, substrate) and the resulting formation of compound *B* (product), that is, the levels of the compounds in a time interval, we can consider, as seen in the chapter on *Enzymes*), the reaction above as 1st order in both reactant and product:\n\n$$\nA\n\\begin{array}{c}\n_{k}\\\\\n\\rightarrow \\\\\n^{}\\end{array} B\n$$ {#eq-ABirrev}\n\n| Thus, the reaction rate can be considered as the variation of *A* or *B* over time as:\n\n$$\nv=\\frac{dy}{dx}=-\\frac{dA}{dt}=\\frac{dB}{dt}\n$$ {#eq-dydx}\n\n| In other words, when there is consumption, the rate of variation is negative, and when there is formation, it is positive. Separating the two rates:\n\n$$\n\\frac{dA}{dt}= -k*A;\\\\\n\\frac{db}{dt} = k*B\n$$ {#eq-dAdt}\n\n| And thus, to calculate the variation in each compound over a time interval:\n\n$$\ndA=-k*A*dt;\\\\\ndB=k*A*dt\n$$ {#eq-dAdB}\n\n| Note that we are dealing with a *system of differential equations*, nominally *ordinary*, since the changes in time occur as a function of a single parameter (species concentration). If it were a system dependent on more than one parameter, we would be dealing with *partial* differential equations (common in thermodynamic relations that involve changes with variations in volume, temperature, and pressure).\n| Some differential equations can be solved analytically, such as those involving bacterial exponential growth:\n\n$$\n\\frac{dN}{dt}=-k*N; \\, N(t) = N_0*e^{-kt}; (N=N_0 \\,em \\, t=0)\n$$ {#eq-expDecay}\n\n## Numerical solution for a system of differential equations\n\n| On the other hand, when an equation or system of differential equations has a certain complexity for the analytical solution, the numerical solution is sought. Although there are several libraries for solving differential equations using `R` (`deSolve`, `pracma`, `lsoda`), some simple systems can be solved using the basic installation packages:\n| The simplest procedure uses the *Euler method*. The basic idea of ​​the method consists of integrating a differential function of infinitesimal variation in the independent variable (in this case, time), for a real relation, and from given initial values. Simply put, the value of the function will correspond to the increase of the increment *dy* for each interval *dx*, from the relation of each reaction involved in the transformation of the compounds. Example for the reactions present in @eq-dAdB:\n\\\n\n```{r, fig.cap = \"Solution of system of differential equations by Euler method for 1st order conversion of species A into B, at a kinetic rate k.\"}\n\n# Solution of differential equations for conversion A-->B\n\nk <- 0.5 # kinetic constant of catalysis\ndt <- .005\ntmax <- 3 # time interval & maximum time\nt <- seq(0, tmax, dt) # time vector\nn <- tmax / dt + 1 # no. of simulation points (it is necessary to add 1 so that the vectors have the same size) \nx <- matrix(rep(0, 2 * n), nrow = 2, ncol = n) # construction of the matrix of one row for each compound, and one column for each time dt \nx[1, 1] <- 1 \nx[2, 1] <- 0 # initial concentration values \nfor (i in 2:n) { \n  dA <- -k * x[1, i - 1] * dt # dA \n  dB <- k * x[1, i - 1] * dt # dB \n  x[1, i] <- x[1, i - 1] + dA # variation in A with increase in dA x[2, i] <- x[2, i - 1] + dB # variation in B with increase in dB # loop that adds the value of the new content to each interval dt composite\n}\nplot(t, x[1, ],\ntype = \"l\", lty = 1,\nxlab = \"time, s\", ylab = \"[species], M\", ylim = c(0, 1.025),\nbty = \"l\"\n) # plot of composite 1\nlines(t, x[2, ], lty = 2, col = 2) # add plot of composite 2\nlegend(\nx = 2, 5, y = 1, legend = c(\"A\", \"B\"), col = c(1, 2),\ncex = 1, lty = c(1, 2)\n)\n```\n\n| Experiment with varying the kinetic constant *k*, or the initial values ​​for each compound, and observe the resulting effect. Metabolic reactions often present interconversions between compounds, such that a substrate of the reaction can also be configured as a product of catalysis of the same, and with kinetic rates of synthesis (*k*) and degradation (*km*, or *k minus*) for each compound, as follows:\n\n$$\nA \\begin{array}{c}\n_{k}\\\\\n\\rightleftharpoons\\\\\n^{km} \\end{array} B\n$$ {#eq-ABrever}\n\n| In this case, the system of differential equations will be:\n\n$$\ndA=-k*A*dt+km*B*dt;\\\\\ndB=k*A*dt-km*B*dt\n$$ {#eq-dABrev}\n\n| Implementing the code snippet in `R`:\n\n```{r,fig.cap=\"Numerical solution for the reversible conversion of species A into B. k = km = 0.5; Ao and Bo = 1 (initial contents).\"}\nk <- 0.5\nkm <- 0.5 # kinetic constants of catalysis\ndt <- .005\ntmax <- 10 # time interval & maximum time\nt <- seq(0, tmax, dt) # define time vector\nn <- tmax / dt + 1 # define no. of points\nx <- matrix(rep(0, 2 * n), nrow = 2, ncol = n) # build a matrix with one\n# row for each compound, and one column for each time dt\nx[1, 1] <- 1\nx[2, 1] <- 1 # initial concentration values\nfor (i in 2:n) {\ndA <- -k * x[1, i - 1] * dt + km * x[2, i - 1] * dt\ndB <- k * x[1, i - 1] * dt - km * x[2, i - 1] * dt\nx[1, i] <- x[1, i - 1] + dA\nx[2, i] <- x[2, i - 1] + dB\n# loop that adds to each interval dt the new concentration value for\n# each compound\n}\nplot(t, x[1, ],\ntype = \"l\", lty = 1,\nxlab = \"time, s\", ylab = \"[species], M\", ylim = c(0, 2), bty = \"l\"\n) # graph of compound 1\nlines(t, x[2, ], lty = 2, col = 2) # addition of graph of compound 2\nlegend(\nx = 2, 5, y = 2, legend = c(\"A\", \"B\"), col = c(1, 2), cex = 1,\nlty = c(1, 2)\n)\n```\n\n| Note that the amounts of A and B remain constant throughout the interval. This is due to the identical values ​​of the kinetic constants for each forward and reverse reaction, as well as the identical initial amounts for each compound. Illustrating a variation of these:\n\n```{r,fig.cap=\"Numerical solution for the reversible conversion of species A to B. k = 0.5; km = 0.1; Ao = 1; Bo = 0.2 (initial contents).\"}\n\n# Example of conversion A-->B\n\nk <- 0.5\nkm <- 0.1 # kinetic constants of catalysis\ndt <- .005\ntmax <- 10 # time interval & maximum time\nt <- seq(0, tmax, dt) # define time vector\nn <- tmax / dt + 1 # define no. of points\nx <- matrix(rep(0, 2 * n), nrow = 2, ncol = n) # build matrix of\n# one row for each compound, and one column for each time dt\nx[1, 1] <- 1\nx[2, 1] <- 0.2 # initial concentration values\nfor (i in 2:n) {\ndA <- -k * x[1, i - 1] * dt + km * x[2, i - 1] * dt\ndB <- k * x[1, i - 1] * dt - km * x[2, i - 1] * dt\nx[1, i] <- x[1, i - 1] + dA\nx[2, i] <- x[2, i - 1] + dB\n# loop that adds to each interval dt the new concentration value for\n# each compound\n}\nplot(t, x[1, ],\ntype = \"l\", lty = 1,\nxlab = \"time, s\", ylab = \"[species], M\", ylim = c(0, 2), bty = \"l\"\n) # graph of compound 1\nlines(t, x[2, ], lty = 2, col = 2) # addition of graph of compound 2\nlegend(x = 2, 5, y = 2, legend = c(\"A\", \"B\"), col = c(1, 2), cex = 1, lty = c(1, 2))\n```\n\n| Now we can imagine a slightly more complex reaction, like the one illustrated in @eq-kinMM:\n\n$$\nA \\begin{array}{c}\n_{k1}\\\\\n\\rightleftharpoons\\\\\n^{km1} \\end{array} B\n\\begin{array}{c}\n_{k2}\\\\\n\\rightarrow \\\\\n^{}\\end{array}C\n$$ {#eq-kinMM}\n\n| In this case, the system of differential equations will be:\n\n$$\ndA=-k1*A*dt+km1*B*dt;\\\\\ndB=k1*A*dt-km1*B*dt-k2*B*dt;\\\\\ndC=k2*B\n$$ {#eq-dMMkin}\n\n| Implementing the code snippet:\n\n```{r, label = \"fig-MMdiffeq\", fig.cap=\"Euler solution for 3-compound kinetics. k1 = 0.5; k2 = 1; km1 = 0.1. Initial contents: Ao = 1; Bo = 0; Co = 0.\"}\n\n# Euler solution for 3-compound kinetics\n\nk1 <- 0.5\nkm1 <- 0.1\nk2 <- 1 # kinetic constants of catalysis\ndt <- .005\ntmax <- 3 # time interval & maximum time\nt <- seq(0, tmax, dt) # define time vector\nn <- tmax / dt + 1 # define no. of points\nx <- matrix(rep(0, 3 * n), nrow = 3, ncol = n) # build matrix of\n# one row for each compound, and one column for each time dt\nx[1, 1] <- 1\nx[2, 1] <- 0\nx[3, 1] <- 0 # initial concentration values\nfor (i in 2:n) {\ndA <- -k1 * x[1, i - 1] * dt + km1 * x[2, i - 1] * dt\ndB <- k1 * x[1, i - 1] * dt - (km1 + k2) * x[2, i - 1] * dt\ndC <- k2 * x[2, i - 1] * dt\nx[1, i] <- x[1, i - 1] + dA\nx[2, i] <- x[2, i - 1] + dB\nx[3, i] <- x[3, i - 1] + dC # loop that adds to each interval dt\n# the new content value for each compound\n}\nplot(t, x[1, ],\ntype = \"l\", lty = 1,\nxlab = \"time, s\", ylab = \"[species], M\", ylim = c(0, 1.025), bty = \"l\"\n) # plot of compound 1\nlines(t, x[2, ], lty = 2, col = 2) # add plot of compound 2\nlines(t, x[3, ], lty = 3, col = 3) # add plot of compound 3\nlegend(x = 2, 5, y = 1, legend = c(\"A\", \"B\", \"C\"), col = c(1, 2, 3),\ncex = 1, lty = c(1, 2, 3))\n```\n\n| Note that the @eq-dMMkin above reflects a Michaelis-Mentem catalysis, although considering the enzyme content *E* as constant and, therefore, independent of the reaction (zero order). And also note that the graph of @fig-MMdiffeq translates, in a way, the Briggs-Haldane steady-state condition discussed in *Enzymes*. Note that the variation of *B*, reflected in this condition as the complex *ES*, remains relatively constant for a certain period of time, being produced by the collision with the enzyme *E*, and deconstructed both by its conversion to *E + P* (in this case, *C*), and by its reversion to *E + S* (in this case, *A*).\n\n| For a slightly more complex reaction:\n\n$$\nA \\begin{array}{c}\n_{k1}\\\\\n\\rightleftharpoons\\\\\n^{km1} \\end{array} B\n\\begin{array}{c}\n_{k2}\\\\\n\\rightleftharpoons\\\\\n^{km2}\\end{array}C\n$$ {#eq-ABCrev}\n\n| What does the following code snippet in `R` suggest:\n\n```{r, fig.cap=\"Euler solution for reversible kinetics of 3 compounds. k1 = 1; km1 = 3; k2 = 5; km1 = 0.1. Initial contents: Ao = 1; Bo = 0; Co = 0.\"}\n\n# Euler solution for reversible kinetics of 3 compounds\n\n# constants of the forward reaction\nk1 <- 3\nkm1 <- 1\nk2 <- 4\nkm2 <- 0.7\ndt <- .005\ntmax <- 10\nt <- seq(0, tmax, dt)\nn <- tmax / dt + 1\nx <- matrix(rep(0, 3 * n), nrow = 3, ncol = n)\nx[1, 1] <- 1\nx[2, 1] <- 0\nx[3, 1] <- 0\nfor (i in 2:n) {\n dA <- -k1 * x[1, i - 1] * dt + km1 * x[2, i - 1] * dt\n dB <- k1 * x[1, i - 1] * dt - (km1 + k2) * x[2, i - 1] * dt +\n km2 * x[3, i - 1] * dt\n dC <- k2 * x[2, i - 1] * dt - km2 * x[3, i - 1] * dt\n x[1, i] <- x[1, i - 1] + dA\n x[2, i] <- x[2, i - 1] + dB\n x[3, i] <- x[3, i - 1] + dC\n}\nplot(t, x[1, ],\n type = \"l\", lty = 1,\nxlab = \"time, s\", ylab = \"[species], mol/L\",\nylim = c(0, 1.025), bty = \"l\"\n)\nlines(t, x[2, ], col = 2, lty = 2)\nlines(t, x[3, ], col = 3, lty = 3)\nlegend(x = 8, y = 0.6, legend = c(\"A\", \"B\", \"C\"), col = c(1, 2, 3),\ncex = 1, lty = c(1, 2, 3))\n```\n\n| Now, suppose a more complex chain of biochemical reactions, with negative (inhibition, *ki*) and positive (activation, *ka*) allosteric modulators for certain enzymes. The example below illustrates this situation:\n\n```{r, redeMetab1, echo=FALSE, fig.align =\"center\", out.width=\"60%\", fig.cap=\"An example of biochemical reactions in a fictitious metabolic pathway. The dotted arrows together with the ki and ka values ​​represent allosteric modulations with respective enzyme inhibition and activation constants. \"}\nknitr::include_graphics(\"figures/redeMetab1.png\")\n```\n\n| Thus, the set of reactions in the metabolic network above can be equated as:\n\n\n$$\ndA=-k1*A*dt+ka*F*dt;\\\\\ndB=k1*A*dt+km3*D*dt-k3*B*dt-k2*B*dt-ki*E*dt;\\\\\ndC=k2*B*dt;\\\\\n$$ {#eq-drede1}\n\n$$\ndD=k3*B*dt-km3*D*dt-k4*D*dt;\\\\\ndE=k4*D*dt-k5*E*dt;\\\\\ndF=k5*E*dt-ka*F*dt\n$$ {#eq-drede2}\n\n| The following code snippet can be written for the numerical Euler solution involving the differential equations listed above as:\n\n```{r, fig.cap=\"Solution for a fictitious metabolic pathway presenting allosteric inhibition (ki) and activation (ka). Kinetic rates: k1 = 2, k2 = 0.5, k3 = 0.7, km3 = 0.3, k4 = 5, k5 = 1, ki = 0.3, ka = 0.2. Initial values ​​of the compounds: A = 1; B, C, D, E, F = 0\"}\n\n# Solution for metabolic pathway with allosteric inhibition and activation\n\n# Kinetic and allosteric constants\nk1 <- 2\nk2 <- 0.5\nk3 <- 0.7\nkm3 <- 0.3\nk4 <- 5\nk5 <- 1\nki <- 0.3 # inhibition constant\nka <- 0.2 # activation constant\ndt <- .005\ntmax <- 10\nt <- seq(0, tmax, dt)\nn <- tmax / dt + 1\nx <- matrix(rep(0, 6 * n), nrow = 6, ncol = n)\n# Initial values ​​of compounds\nx[1, 1] <- 1\nx[2, 1] <- 0\nx[3, 1] <- 0\nx[4, 1] <- 1\nx[5, 1] <- 0\nx[6, 1] <- 0\nfor (i in 2:n) {\n# system of equations inserted into the interval matrix\ndA <- -k1 * x[1, i - 1] * dt + ka * x[6, i - 1] * dt\ndB <- k1 * x[1, i - 1] * dt + km3 * x[4, i - 1] * dt - k3 *\n x[2, i - 1] * dt - k2 * x[2, i - 1] * dt - ki * x[1, i - 1] * dt\n dC <- k2 * x[2, i - 1] * dt\n dD <- k3 * x[2, i - 1] * dt - km3 * x[4, i - 1] * dt - k4 *\n x[4, i - 1] * dt\n dE <- k4 * x[4, i - 1] * dt - k5 * x[5, i - 1] * dt\n dF <- k5 * x[5, i - 1] * dt - ka * x[6, i - 1] * dt\n # Adding dy to y values\n x[1, i] <- x[1, i - 1] + dA\n x[2, i] <- x[2, i - 1] + dB\n x[3, i] <- x[3, i - 1] + dC\n x[4, i] <- x[4, i - 1] + dD\n x[5, i] <- x[5, i - 1] + dE\n x[6, i] <- x[6, i - 1] + dF\n}\n# Preparation of kinetic graphs\nplot(t, x[1, ],\n type = \"l\", lty = 1,\n xlab = \"time,s\", ylab = \"[species], mol/L\",\n ylim = c(0, 1.025), bty = \"l\"\n)\nlines(t, x[2, ], col = 2, lty = 2)\nlines(t, x[3, ], col = 3, lty = 3)\nlines(t, x[4, ], col = 4, lty = 4)\nlines(t, x[5, ], col = 5, lty = 5)\nlines(t, x[6, ], col = 6, lty = 6)\nlegend(x = 6.5, y = 0.65, legend = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"),\ncol = c(1, 2, 3, 4, 5, 6), cex = 1, lty = c(1, 2, 3, 4, 5, 6))\n```\n\n| Change the kinetic and/or allosteric constants of the system above and observe the effect on each of the compounds. In general, the Euler solution applied to systems of increasing complexity, such as a metabolic network, may present deviations centered on the selection of the value of *dt*, or even produce inconsistent values. To get around this situation, other algorithms are used, such as *2nd, 3rd, or 4th order Runge-Kutta*, present in `R` packages, or even by *systems analysis*.\n\n## Some reactions of glucose metabolism\n\n| For a *4th order Runge-Kutta method*, it is necessary to install the `deSolve` package or similar to solve a system of 1st order ordinary differential equations or partial differential equations. The library aggregates functions that allow a leaner and simpler code for solving the system. Illustrating its application, here are some of the many simple relationships of the metabolic network that involves *glycolysis, gluconeogenesis, and pentose pathway* in cells:\n\n```{r, redeMetab2, echo=FALSE, fig.align =\"center\", out.width=\"80%\", fig.cap=\"Some metabolic relationships involved in glycolysis, gluconeogenesis and pentose pathways.\"}\nknitr::include_graphics(\"figures/redeMetab2.png\")\n```\n\n| The following metabolic reactions can be attributed to these relationships:\n\n$$\nG6P\n\\begin{array}{c}\n_{k1}\\\\\n\\rightarrow \\\\\n^{}\\end{array} R5P\\\\\nG3P+DHCP\n\\begin{array}{c}\n_{k2}\\\\\n\\rightarrow \\\\\n^{}\\end{array} PEP\\\\\n2G3P\n\\begin{array}{c}\n_{k3}\\\\\n\\rightarrow \\\\\n^{}\\end{array} 6GP\\\\\nR5P\n\\begin{array}{c}\n_{k4}\\\\\n\\rightarrow \\\\\n^{}\\end{array} G3P\\\\\n2PEP\n\\begin{array}{c}\n_{k5}\\\\\n\\rightarrow \\\\ ^{}\\end{array} G6P\n$$ {#eq-redeMetab1}\n\n| The code snippet for the Runge-Kutta solution can be the following example, with results in two graphs; initially with the curves isolated, and then combined.\n\n```{r, fig.cap=\"Conversion kinetics for a simple metabolic network involving some reactions of glycolysis, gluconeogenesis and pentose pathway. Values ​​of kinetic constants: k1 = 0.1; k2 = 0.5; k3 = 0.05; k4 = 0.5; k5 = 0.2. Initial values ​​of the compounds: G6P = 1; for the others, 0.\"}\nlibrary(deSolve)\n\n# Solution for conversion kinetics in some metabolic pathways\n\n# Reaction parameters\nk1 <- 0.1\nk2 <- 0.5\nk3 <- 0.05\nk4 <- 0.5\nk5 <- 0.2\nparms <- c(k1, k2, k3, k4, k5)\n\n# Initial values ​​for each compound\nG6P0 <- 1\nR5P0 <- 0\nG3P0 <- 0.3\nDHCP0 <- 0.1\nPEP0 <- 0\n# Time interval\ntmin <- 0\ntmax <- 20\ndt <- 0.01\ntime <- seq(tmin, tmax, dt)\n# Function for the derivatives of the species in time\neq.dif <- function(time, x, parms) {\n# compound specification\nG6P <- x[1]\nR5P <- x[2]\nG3P <- x[3]\nDHCP <- x[4]\nPEP <- x[5]\n# differential equations\ndG6P <- -k1 * G6P + k3 * G3P^2 + k5 * PEP^2\ndR5P <- k1 * G6P - k4 * R5P\ndG3P <- -k2 * G3P * DHCP - k3 * G3P^2 + k4 * R5P\ndDHCP <- -k2 * G3P * DHCP\ndPEP <- k2 * G3P * DHCP - k5 * PEP^2\nlist(c(dG6P, dR5P, dG3P, dDHCP, dPEP)) # increments of species\n}\n# lsoda routine for ordinary differential solution\n\nout <- lsoda(c(G6P0, R5P0, G3P0, DHCP0, PEP0), time, eq.dif, parms,\nrtol = 1e-4, atol = 1e-6\n)\n# Output the result in vectors for each quantity (time and species)\nt <- out[, 1]\nG6P <- out[, 2]\nR5P <- out[, 3]\nG3P <- out[, 4]\nDHCP <- out[, 5]\nPEP <- out[, 6]\n# Graphing vertical\npar(mfrow = c(1, 5))\nplot(t, G6P, type = \"l\")\nplot(t, R5P, type = \"l\")\nplot(t, G3P, type = \"l\")\nplot(t, DHCP, type = \"l\")\nplot(t, PEP, type = \"l\")\n\n# Preparation of graph with all species\npar(mfrow = c(1, 1))\nplot(t, G6P, type = \"l\", col = 1, lty = 1, ylab = \"[species]\",\n ylim = c(0, 1))\nlines(t, R5P, type = \"l\", col = 2, lty = 2)\nlines(t, G3P, type = \"l\", col = 3, lty = 3)\nlines(t, DHCP, type = \"l\", col = 4, lty = 4)\nlines(t, PEP, type = \"l\", col = 5, lty = 5)\nlegend(x = 10, y = 1, legend = c(\"G6P\", \"R5P\", \"G3P\", \"DHCP\", \"PEP\"),\ncol = c(1, 2, 3, 4, 5), cex = 1, lty = c(1, 2, 3, 4, 5))\n```\n\n| Note that, by the quantities offered to the simulation, that is, kinetic constants and initial values, G3P and PEP register a significant interval in elevation, also coincident with their presence in several of the relations of @eq-redeMetab1.\n\n## Kinetics of 6-mercaptopurine metabolism\n\n| Raising the complexity of metabolic networks a little, we can illustrate the cellular metabolism of 6-mercaptopurine (6-MP) as a function of cellular ATP content [@lavrova2017ordinary]. As a purine antagonist, the drug is used in chemotherapy for the treatment of lymphocytic leukemia, interrupting cell growth, although it produces cytotoxic side effects arising from reactions with the thiol group.\n\n| @fig-fig6MP represents a simplified scheme of the metabolism of 6-MP. The concentrations of the species and kinetic constants originate from the concentration values ​​in $\\mu$mol/mL, and time in days.\n\n```{r, label = \"fig-fig6MP\", echo=FALSE, fig.align =\"center\", out.width=\"80%\", fig.cap=\"Simplified schematic of 6-mercaptopurine metabolism (adapted from Lavrova et al., 2017).\"}\nknitr::include_graphics(\"figures/6mercaptopurina.png\")\n```\n\n| For the 10 reactions related to the ODEs that make up the representation of 6-MP metabolism [@lavrova2017ordinary], the code snippet below implements the 4th order Runge-Kutta solution by the `lsoda` function:\n\n```{r, fig.cap=\"Dependence of the dynamics of the metabolic network of 6-mercaptopurine degradation as a function of the initial ATP content at 0.2 umol/L. The values s initials and parameters are described in the code snippet.\"}\n\n# Degradation of 6-mercaptopurine and Runge-Kutta solution\n\nlibrary(deSolve)\n# Parameters\nk0 <- 5\nk1 <- 10\nk2 <- 10\nk3 <- 5\nk4 <- 1e-5\nk7 <- 0.01\nk8 <- 0.5\nkm7 <- 1\nkm1 <- 0.01\nkm2 <- 4\nkm3 <- 0.01\nkm4 <- 0.1\nkm8 <- 0.01\nVPUR <- 0.01\nVD <- 0.9\nVOUT <- 1e-4\n# Parameter list\nparms <- c(k0, k1, k2, k3, k4, k7, k8, km7, km1, km2, km3, km4, km8,\nVPUR, VD, VOUT)\n# compound specification\nMPex <- x[1]\nMPin <- x[2]\nTIMP <- x[3]\nTXMP <- x[4]\nTGMP <- x[5]\nmeTGMP <- x[6]\nTITP <- x[7]\nATP <- x[8]\nAMP <- x[9]\nPP <- x[10]\n# initial concentrations of species\nreag0 <- c(MPex0 = 0.68, MPin0 = 0, TIMP0 = 0, TXMP0 = 0, TGMP0 = 0,\nmeTGMP0 = 0, TITP0 = 0, ATP0 = 0.2, AMP0 = 0, PP0 = 0)\n\n# time interval definition\ntmin <- 0\ntmax <- 2\ndt <- 0.01\ntime <- seq(tmin, tmax, dt)\n# Function for the derivatives of each species\neq.dif <- function(time, x, parms) {\n# Parameter definition\nMPex <- x[1]\nMPin <- x[2]\nTIMP <- x[3]\nTXMP <- x[4]\nTGMP <- x[5]\nmeTGMP <- x[6]\nTITP <- x[7]\nATP <- x[8]\nAMP <- x[9]\nPP <- x[10]\n# Differential equations\ndMPex <- -k0 * MPex\ndMPin <- -(VPUR + k1) * MPin + k0 * MPex + km1 * TIMP\ndTIMP <- k1 * MPin + km8 * TITP - (k2 + k7 * ATP + km1 + k8 * PP) *\nTIMP + km2 * TXMP + km7 * TITP * AMP\ndTXMP <- k2 * TIMP - k3 * TXMP * ATP - km2 * TXMP + km3 * TGMP *\n AMP * PP\n dTGMP <- k3 * TXMP * ATP - (k4 + VD) * TGMP - km3 * TGMP * AMP *\n PP + km4 * meTGMP\n dmeTGMP <- k4 * TGMP - VOUT * meTGMP - km4 * meTGMP\n dTITP <- k8 * TIMP * PP - km8 * TITP + k7 * TIMP * ATP - km7 *\n TITP*AMP\n dATP <- -k7 * TIMP * ATP + km3 * TGMP * AMP * PP - k3 * TXMP *\n ATP + km7 * TITP * AMP\n dAMP <- -km3 * TGMP * AMP * PP + k3 * TXMP * ATP + k7 * TIMP *\n ATP - km7 * TITP * AMP\ndPP <- -k8 * TIMP * PP + km8 * TITP - km3 * TGMP * AMP * PP + k3 *\nTXMP * ATP\nlist(c(dMPex, dMPin, dTIMP, dTXMP, dTGMP, dmeTGMP, dTITP, dATP,\ndAMP, dPP)) # list of differential values ​​for each species\n}\n# lsoda routine for solving differential equations ordinary\nsol.eq <- lsoda(reag0, time, eq.dif, parms,\nrtol = 1e-4, atol = 1e-6\n)\n# Isolating the result columns\nt <- sol.eq[, 1]\nMPex <- sol.eq[, 2]\nMPin <- sol.eq[, 3]\nTIMP <- sol.eq[, 4]\nTXMP <- sol.eq[, 5]\nTGMP <- sol.eq[, 6]\nmeTGMP <- sol.eq[, 7]\nTITP <- sol.eq[, 8]\nATP <- sol.eq[, 9]\nAMP <- sol.eq[, 10]\nPP <- sol.eq[, 11]\n\n# Creating the graph\nplot(t, MPex, type = \"l\", xlab = \"tempo, days\",\n ylab = \"[species], umol/L\")\nlines(t, MPin, type = \"l\", col = 2, lty = 2)\nlines(t, TIMP, type = \"l\", col = 3, lty = 3)\nlines(t, TXMP, type = \"l\", col = 4, lty = 4)\nlines(t, TGMP, type = \"l\", col = 5, lty = 5)\nlines(t, meTGMP, type = \"l\", col = 6, lty = 6)\nlines(t, TITP, type = \"l\", col = 7, lty = 7)\nlines(t, ATP, type = \"l\", col = 8, lty = 8)\nlines(t, AMP, type = \"l\", col = 9, lty = 9)\nlines(t, PP, type = \"l\", col = 10, lty = 10)\nlegend(x = 1.5, y = 0.65, legend = c(\"MPex\", \"MPin\", \"TIMP\", \"TXMP\",\n \"TGMP\", \"meTGMP\", \"TITP\", \"ATP\",\n \"AMP\", \"PP\"), col = c(1, 2, 3, 4,\n 5, 6, 7, 8,\n 9, 10),\n cex = 0.7, lty = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n```\n\n| Since the dynamics of variation of the compounds is dependent on the initial cellular ATP content, try varying this initial value (e.g.: ATP0=2):\n\n```{r echo=FALSE, fig.align =\"center\", out.width=\"100%\", fig.cap=\"Dependence of the dynamics of the metabolic network for degradation of 6-mercaptopurine as a function of the initial ATP content at 2 umol/L. The initial values ​​and parameters are described in the code snippet.\"}\nknitr::include_graphics(\"figures/rede6MP.png\")\n```\n\n| Note that, with the 10x reduction in ATP content, TGMP and TIMP maintained more stable levels throughout the period.","srcMarkdownNoYaml":"\n\n## Biochemical pathways of metabolism {#redesMet}\n\n| We can consider cellular metabolism as a network of homeostatically feedback metabolic pathways. If we zoom in on any of the biochemical reactions involved in this complex web, we can identify a *black box* common to all of them:\n\n```{r, blackb, echo=FALSE, fig.align =\"center\", out.width=\"40%\", fig.cap=\"A representation of the black box of enzymatic reactions. E = enzyme c,d = cofactors, coenzymes, modifiers; f,g = secondary compounds resulting from catalysis.\"}\nknitr::include_graphics(\"figures/blackbox.png\")\n```\n\n| Although the representation above may involve equilibrium reactions (double arrows), or even the absence of a catalyst, the image generalizes individual biochemical reactions that are part of any *metabolic map*. If we now wish to evaluate the consumption of compound *A* (reactant, substrate) and the resulting formation of compound *B* (product), that is, the levels of the compounds in a time interval, we can consider, as seen in the chapter on *Enzymes*), the reaction above as 1st order in both reactant and product:\n\n$$\nA\n\\begin{array}{c}\n_{k}\\\\\n\\rightarrow \\\\\n^{}\\end{array} B\n$$ {#eq-ABirrev}\n\n| Thus, the reaction rate can be considered as the variation of *A* or *B* over time as:\n\n$$\nv=\\frac{dy}{dx}=-\\frac{dA}{dt}=\\frac{dB}{dt}\n$$ {#eq-dydx}\n\n| In other words, when there is consumption, the rate of variation is negative, and when there is formation, it is positive. Separating the two rates:\n\n$$\n\\frac{dA}{dt}= -k*A;\\\\\n\\frac{db}{dt} = k*B\n$$ {#eq-dAdt}\n\n| And thus, to calculate the variation in each compound over a time interval:\n\n$$\ndA=-k*A*dt;\\\\\ndB=k*A*dt\n$$ {#eq-dAdB}\n\n| Note that we are dealing with a *system of differential equations*, nominally *ordinary*, since the changes in time occur as a function of a single parameter (species concentration). If it were a system dependent on more than one parameter, we would be dealing with *partial* differential equations (common in thermodynamic relations that involve changes with variations in volume, temperature, and pressure).\n| Some differential equations can be solved analytically, such as those involving bacterial exponential growth:\n\n$$\n\\frac{dN}{dt}=-k*N; \\, N(t) = N_0*e^{-kt}; (N=N_0 \\,em \\, t=0)\n$$ {#eq-expDecay}\n\n## Numerical solution for a system of differential equations\n\n| On the other hand, when an equation or system of differential equations has a certain complexity for the analytical solution, the numerical solution is sought. Although there are several libraries for solving differential equations using `R` (`deSolve`, `pracma`, `lsoda`), some simple systems can be solved using the basic installation packages:\n| The simplest procedure uses the *Euler method*. The basic idea of ​​the method consists of integrating a differential function of infinitesimal variation in the independent variable (in this case, time), for a real relation, and from given initial values. Simply put, the value of the function will correspond to the increase of the increment *dy* for each interval *dx*, from the relation of each reaction involved in the transformation of the compounds. Example for the reactions present in @eq-dAdB:\n\\\n\n```{r, fig.cap = \"Solution of system of differential equations by Euler method for 1st order conversion of species A into B, at a kinetic rate k.\"}\n\n# Solution of differential equations for conversion A-->B\n\nk <- 0.5 # kinetic constant of catalysis\ndt <- .005\ntmax <- 3 # time interval & maximum time\nt <- seq(0, tmax, dt) # time vector\nn <- tmax / dt + 1 # no. of simulation points (it is necessary to add 1 so that the vectors have the same size) \nx <- matrix(rep(0, 2 * n), nrow = 2, ncol = n) # construction of the matrix of one row for each compound, and one column for each time dt \nx[1, 1] <- 1 \nx[2, 1] <- 0 # initial concentration values \nfor (i in 2:n) { \n  dA <- -k * x[1, i - 1] * dt # dA \n  dB <- k * x[1, i - 1] * dt # dB \n  x[1, i] <- x[1, i - 1] + dA # variation in A with increase in dA x[2, i] <- x[2, i - 1] + dB # variation in B with increase in dB # loop that adds the value of the new content to each interval dt composite\n}\nplot(t, x[1, ],\ntype = \"l\", lty = 1,\nxlab = \"time, s\", ylab = \"[species], M\", ylim = c(0, 1.025),\nbty = \"l\"\n) # plot of composite 1\nlines(t, x[2, ], lty = 2, col = 2) # add plot of composite 2\nlegend(\nx = 2, 5, y = 1, legend = c(\"A\", \"B\"), col = c(1, 2),\ncex = 1, lty = c(1, 2)\n)\n```\n\n| Experiment with varying the kinetic constant *k*, or the initial values ​​for each compound, and observe the resulting effect. Metabolic reactions often present interconversions between compounds, such that a substrate of the reaction can also be configured as a product of catalysis of the same, and with kinetic rates of synthesis (*k*) and degradation (*km*, or *k minus*) for each compound, as follows:\n\n$$\nA \\begin{array}{c}\n_{k}\\\\\n\\rightleftharpoons\\\\\n^{km} \\end{array} B\n$$ {#eq-ABrever}\n\n| In this case, the system of differential equations will be:\n\n$$\ndA=-k*A*dt+km*B*dt;\\\\\ndB=k*A*dt-km*B*dt\n$$ {#eq-dABrev}\n\n| Implementing the code snippet in `R`:\n\n```{r,fig.cap=\"Numerical solution for the reversible conversion of species A into B. k = km = 0.5; Ao and Bo = 1 (initial contents).\"}\nk <- 0.5\nkm <- 0.5 # kinetic constants of catalysis\ndt <- .005\ntmax <- 10 # time interval & maximum time\nt <- seq(0, tmax, dt) # define time vector\nn <- tmax / dt + 1 # define no. of points\nx <- matrix(rep(0, 2 * n), nrow = 2, ncol = n) # build a matrix with one\n# row for each compound, and one column for each time dt\nx[1, 1] <- 1\nx[2, 1] <- 1 # initial concentration values\nfor (i in 2:n) {\ndA <- -k * x[1, i - 1] * dt + km * x[2, i - 1] * dt\ndB <- k * x[1, i - 1] * dt - km * x[2, i - 1] * dt\nx[1, i] <- x[1, i - 1] + dA\nx[2, i] <- x[2, i - 1] + dB\n# loop that adds to each interval dt the new concentration value for\n# each compound\n}\nplot(t, x[1, ],\ntype = \"l\", lty = 1,\nxlab = \"time, s\", ylab = \"[species], M\", ylim = c(0, 2), bty = \"l\"\n) # graph of compound 1\nlines(t, x[2, ], lty = 2, col = 2) # addition of graph of compound 2\nlegend(\nx = 2, 5, y = 2, legend = c(\"A\", \"B\"), col = c(1, 2), cex = 1,\nlty = c(1, 2)\n)\n```\n\n| Note that the amounts of A and B remain constant throughout the interval. This is due to the identical values ​​of the kinetic constants for each forward and reverse reaction, as well as the identical initial amounts for each compound. Illustrating a variation of these:\n\n```{r,fig.cap=\"Numerical solution for the reversible conversion of species A to B. k = 0.5; km = 0.1; Ao = 1; Bo = 0.2 (initial contents).\"}\n\n# Example of conversion A-->B\n\nk <- 0.5\nkm <- 0.1 # kinetic constants of catalysis\ndt <- .005\ntmax <- 10 # time interval & maximum time\nt <- seq(0, tmax, dt) # define time vector\nn <- tmax / dt + 1 # define no. of points\nx <- matrix(rep(0, 2 * n), nrow = 2, ncol = n) # build matrix of\n# one row for each compound, and one column for each time dt\nx[1, 1] <- 1\nx[2, 1] <- 0.2 # initial concentration values\nfor (i in 2:n) {\ndA <- -k * x[1, i - 1] * dt + km * x[2, i - 1] * dt\ndB <- k * x[1, i - 1] * dt - km * x[2, i - 1] * dt\nx[1, i] <- x[1, i - 1] + dA\nx[2, i] <- x[2, i - 1] + dB\n# loop that adds to each interval dt the new concentration value for\n# each compound\n}\nplot(t, x[1, ],\ntype = \"l\", lty = 1,\nxlab = \"time, s\", ylab = \"[species], M\", ylim = c(0, 2), bty = \"l\"\n) # graph of compound 1\nlines(t, x[2, ], lty = 2, col = 2) # addition of graph of compound 2\nlegend(x = 2, 5, y = 2, legend = c(\"A\", \"B\"), col = c(1, 2), cex = 1, lty = c(1, 2))\n```\n\n| Now we can imagine a slightly more complex reaction, like the one illustrated in @eq-kinMM:\n\n$$\nA \\begin{array}{c}\n_{k1}\\\\\n\\rightleftharpoons\\\\\n^{km1} \\end{array} B\n\\begin{array}{c}\n_{k2}\\\\\n\\rightarrow \\\\\n^{}\\end{array}C\n$$ {#eq-kinMM}\n\n| In this case, the system of differential equations will be:\n\n$$\ndA=-k1*A*dt+km1*B*dt;\\\\\ndB=k1*A*dt-km1*B*dt-k2*B*dt;\\\\\ndC=k2*B\n$$ {#eq-dMMkin}\n\n| Implementing the code snippet:\n\n```{r, label = \"fig-MMdiffeq\", fig.cap=\"Euler solution for 3-compound kinetics. k1 = 0.5; k2 = 1; km1 = 0.1. Initial contents: Ao = 1; Bo = 0; Co = 0.\"}\n\n# Euler solution for 3-compound kinetics\n\nk1 <- 0.5\nkm1 <- 0.1\nk2 <- 1 # kinetic constants of catalysis\ndt <- .005\ntmax <- 3 # time interval & maximum time\nt <- seq(0, tmax, dt) # define time vector\nn <- tmax / dt + 1 # define no. of points\nx <- matrix(rep(0, 3 * n), nrow = 3, ncol = n) # build matrix of\n# one row for each compound, and one column for each time dt\nx[1, 1] <- 1\nx[2, 1] <- 0\nx[3, 1] <- 0 # initial concentration values\nfor (i in 2:n) {\ndA <- -k1 * x[1, i - 1] * dt + km1 * x[2, i - 1] * dt\ndB <- k1 * x[1, i - 1] * dt - (km1 + k2) * x[2, i - 1] * dt\ndC <- k2 * x[2, i - 1] * dt\nx[1, i] <- x[1, i - 1] + dA\nx[2, i] <- x[2, i - 1] + dB\nx[3, i] <- x[3, i - 1] + dC # loop that adds to each interval dt\n# the new content value for each compound\n}\nplot(t, x[1, ],\ntype = \"l\", lty = 1,\nxlab = \"time, s\", ylab = \"[species], M\", ylim = c(0, 1.025), bty = \"l\"\n) # plot of compound 1\nlines(t, x[2, ], lty = 2, col = 2) # add plot of compound 2\nlines(t, x[3, ], lty = 3, col = 3) # add plot of compound 3\nlegend(x = 2, 5, y = 1, legend = c(\"A\", \"B\", \"C\"), col = c(1, 2, 3),\ncex = 1, lty = c(1, 2, 3))\n```\n\n| Note that the @eq-dMMkin above reflects a Michaelis-Mentem catalysis, although considering the enzyme content *E* as constant and, therefore, independent of the reaction (zero order). And also note that the graph of @fig-MMdiffeq translates, in a way, the Briggs-Haldane steady-state condition discussed in *Enzymes*. Note that the variation of *B*, reflected in this condition as the complex *ES*, remains relatively constant for a certain period of time, being produced by the collision with the enzyme *E*, and deconstructed both by its conversion to *E + P* (in this case, *C*), and by its reversion to *E + S* (in this case, *A*).\n\n| For a slightly more complex reaction:\n\n$$\nA \\begin{array}{c}\n_{k1}\\\\\n\\rightleftharpoons\\\\\n^{km1} \\end{array} B\n\\begin{array}{c}\n_{k2}\\\\\n\\rightleftharpoons\\\\\n^{km2}\\end{array}C\n$$ {#eq-ABCrev}\n\n| What does the following code snippet in `R` suggest:\n\n```{r, fig.cap=\"Euler solution for reversible kinetics of 3 compounds. k1 = 1; km1 = 3; k2 = 5; km1 = 0.1. Initial contents: Ao = 1; Bo = 0; Co = 0.\"}\n\n# Euler solution for reversible kinetics of 3 compounds\n\n# constants of the forward reaction\nk1 <- 3\nkm1 <- 1\nk2 <- 4\nkm2 <- 0.7\ndt <- .005\ntmax <- 10\nt <- seq(0, tmax, dt)\nn <- tmax / dt + 1\nx <- matrix(rep(0, 3 * n), nrow = 3, ncol = n)\nx[1, 1] <- 1\nx[2, 1] <- 0\nx[3, 1] <- 0\nfor (i in 2:n) {\n dA <- -k1 * x[1, i - 1] * dt + km1 * x[2, i - 1] * dt\n dB <- k1 * x[1, i - 1] * dt - (km1 + k2) * x[2, i - 1] * dt +\n km2 * x[3, i - 1] * dt\n dC <- k2 * x[2, i - 1] * dt - km2 * x[3, i - 1] * dt\n x[1, i] <- x[1, i - 1] + dA\n x[2, i] <- x[2, i - 1] + dB\n x[3, i] <- x[3, i - 1] + dC\n}\nplot(t, x[1, ],\n type = \"l\", lty = 1,\nxlab = \"time, s\", ylab = \"[species], mol/L\",\nylim = c(0, 1.025), bty = \"l\"\n)\nlines(t, x[2, ], col = 2, lty = 2)\nlines(t, x[3, ], col = 3, lty = 3)\nlegend(x = 8, y = 0.6, legend = c(\"A\", \"B\", \"C\"), col = c(1, 2, 3),\ncex = 1, lty = c(1, 2, 3))\n```\n\n| Now, suppose a more complex chain of biochemical reactions, with negative (inhibition, *ki*) and positive (activation, *ka*) allosteric modulators for certain enzymes. The example below illustrates this situation:\n\n```{r, redeMetab1, echo=FALSE, fig.align =\"center\", out.width=\"60%\", fig.cap=\"An example of biochemical reactions in a fictitious metabolic pathway. The dotted arrows together with the ki and ka values ​​represent allosteric modulations with respective enzyme inhibition and activation constants. \"}\nknitr::include_graphics(\"figures/redeMetab1.png\")\n```\n\n| Thus, the set of reactions in the metabolic network above can be equated as:\n\n\n$$\ndA=-k1*A*dt+ka*F*dt;\\\\\ndB=k1*A*dt+km3*D*dt-k3*B*dt-k2*B*dt-ki*E*dt;\\\\\ndC=k2*B*dt;\\\\\n$$ {#eq-drede1}\n\n$$\ndD=k3*B*dt-km3*D*dt-k4*D*dt;\\\\\ndE=k4*D*dt-k5*E*dt;\\\\\ndF=k5*E*dt-ka*F*dt\n$$ {#eq-drede2}\n\n| The following code snippet can be written for the numerical Euler solution involving the differential equations listed above as:\n\n```{r, fig.cap=\"Solution for a fictitious metabolic pathway presenting allosteric inhibition (ki) and activation (ka). Kinetic rates: k1 = 2, k2 = 0.5, k3 = 0.7, km3 = 0.3, k4 = 5, k5 = 1, ki = 0.3, ka = 0.2. Initial values ​​of the compounds: A = 1; B, C, D, E, F = 0\"}\n\n# Solution for metabolic pathway with allosteric inhibition and activation\n\n# Kinetic and allosteric constants\nk1 <- 2\nk2 <- 0.5\nk3 <- 0.7\nkm3 <- 0.3\nk4 <- 5\nk5 <- 1\nki <- 0.3 # inhibition constant\nka <- 0.2 # activation constant\ndt <- .005\ntmax <- 10\nt <- seq(0, tmax, dt)\nn <- tmax / dt + 1\nx <- matrix(rep(0, 6 * n), nrow = 6, ncol = n)\n# Initial values ​​of compounds\nx[1, 1] <- 1\nx[2, 1] <- 0\nx[3, 1] <- 0\nx[4, 1] <- 1\nx[5, 1] <- 0\nx[6, 1] <- 0\nfor (i in 2:n) {\n# system of equations inserted into the interval matrix\ndA <- -k1 * x[1, i - 1] * dt + ka * x[6, i - 1] * dt\ndB <- k1 * x[1, i - 1] * dt + km3 * x[4, i - 1] * dt - k3 *\n x[2, i - 1] * dt - k2 * x[2, i - 1] * dt - ki * x[1, i - 1] * dt\n dC <- k2 * x[2, i - 1] * dt\n dD <- k3 * x[2, i - 1] * dt - km3 * x[4, i - 1] * dt - k4 *\n x[4, i - 1] * dt\n dE <- k4 * x[4, i - 1] * dt - k5 * x[5, i - 1] * dt\n dF <- k5 * x[5, i - 1] * dt - ka * x[6, i - 1] * dt\n # Adding dy to y values\n x[1, i] <- x[1, i - 1] + dA\n x[2, i] <- x[2, i - 1] + dB\n x[3, i] <- x[3, i - 1] + dC\n x[4, i] <- x[4, i - 1] + dD\n x[5, i] <- x[5, i - 1] + dE\n x[6, i] <- x[6, i - 1] + dF\n}\n# Preparation of kinetic graphs\nplot(t, x[1, ],\n type = \"l\", lty = 1,\n xlab = \"time,s\", ylab = \"[species], mol/L\",\n ylim = c(0, 1.025), bty = \"l\"\n)\nlines(t, x[2, ], col = 2, lty = 2)\nlines(t, x[3, ], col = 3, lty = 3)\nlines(t, x[4, ], col = 4, lty = 4)\nlines(t, x[5, ], col = 5, lty = 5)\nlines(t, x[6, ], col = 6, lty = 6)\nlegend(x = 6.5, y = 0.65, legend = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"),\ncol = c(1, 2, 3, 4, 5, 6), cex = 1, lty = c(1, 2, 3, 4, 5, 6))\n```\n\n| Change the kinetic and/or allosteric constants of the system above and observe the effect on each of the compounds. In general, the Euler solution applied to systems of increasing complexity, such as a metabolic network, may present deviations centered on the selection of the value of *dt*, or even produce inconsistent values. To get around this situation, other algorithms are used, such as *2nd, 3rd, or 4th order Runge-Kutta*, present in `R` packages, or even by *systems analysis*.\n\n## Some reactions of glucose metabolism\n\n| For a *4th order Runge-Kutta method*, it is necessary to install the `deSolve` package or similar to solve a system of 1st order ordinary differential equations or partial differential equations. The library aggregates functions that allow a leaner and simpler code for solving the system. Illustrating its application, here are some of the many simple relationships of the metabolic network that involves *glycolysis, gluconeogenesis, and pentose pathway* in cells:\n\n```{r, redeMetab2, echo=FALSE, fig.align =\"center\", out.width=\"80%\", fig.cap=\"Some metabolic relationships involved in glycolysis, gluconeogenesis and pentose pathways.\"}\nknitr::include_graphics(\"figures/redeMetab2.png\")\n```\n\n| The following metabolic reactions can be attributed to these relationships:\n\n$$\nG6P\n\\begin{array}{c}\n_{k1}\\\\\n\\rightarrow \\\\\n^{}\\end{array} R5P\\\\\nG3P+DHCP\n\\begin{array}{c}\n_{k2}\\\\\n\\rightarrow \\\\\n^{}\\end{array} PEP\\\\\n2G3P\n\\begin{array}{c}\n_{k3}\\\\\n\\rightarrow \\\\\n^{}\\end{array} 6GP\\\\\nR5P\n\\begin{array}{c}\n_{k4}\\\\\n\\rightarrow \\\\\n^{}\\end{array} G3P\\\\\n2PEP\n\\begin{array}{c}\n_{k5}\\\\\n\\rightarrow \\\\ ^{}\\end{array} G6P\n$$ {#eq-redeMetab1}\n\n| The code snippet for the Runge-Kutta solution can be the following example, with results in two graphs; initially with the curves isolated, and then combined.\n\n```{r, fig.cap=\"Conversion kinetics for a simple metabolic network involving some reactions of glycolysis, gluconeogenesis and pentose pathway. Values ​​of kinetic constants: k1 = 0.1; k2 = 0.5; k3 = 0.05; k4 = 0.5; k5 = 0.2. Initial values ​​of the compounds: G6P = 1; for the others, 0.\"}\nlibrary(deSolve)\n\n# Solution for conversion kinetics in some metabolic pathways\n\n# Reaction parameters\nk1 <- 0.1\nk2 <- 0.5\nk3 <- 0.05\nk4 <- 0.5\nk5 <- 0.2\nparms <- c(k1, k2, k3, k4, k5)\n\n# Initial values ​​for each compound\nG6P0 <- 1\nR5P0 <- 0\nG3P0 <- 0.3\nDHCP0 <- 0.1\nPEP0 <- 0\n# Time interval\ntmin <- 0\ntmax <- 20\ndt <- 0.01\ntime <- seq(tmin, tmax, dt)\n# Function for the derivatives of the species in time\neq.dif <- function(time, x, parms) {\n# compound specification\nG6P <- x[1]\nR5P <- x[2]\nG3P <- x[3]\nDHCP <- x[4]\nPEP <- x[5]\n# differential equations\ndG6P <- -k1 * G6P + k3 * G3P^2 + k5 * PEP^2\ndR5P <- k1 * G6P - k4 * R5P\ndG3P <- -k2 * G3P * DHCP - k3 * G3P^2 + k4 * R5P\ndDHCP <- -k2 * G3P * DHCP\ndPEP <- k2 * G3P * DHCP - k5 * PEP^2\nlist(c(dG6P, dR5P, dG3P, dDHCP, dPEP)) # increments of species\n}\n# lsoda routine for ordinary differential solution\n\nout <- lsoda(c(G6P0, R5P0, G3P0, DHCP0, PEP0), time, eq.dif, parms,\nrtol = 1e-4, atol = 1e-6\n)\n# Output the result in vectors for each quantity (time and species)\nt <- out[, 1]\nG6P <- out[, 2]\nR5P <- out[, 3]\nG3P <- out[, 4]\nDHCP <- out[, 5]\nPEP <- out[, 6]\n# Graphing vertical\npar(mfrow = c(1, 5))\nplot(t, G6P, type = \"l\")\nplot(t, R5P, type = \"l\")\nplot(t, G3P, type = \"l\")\nplot(t, DHCP, type = \"l\")\nplot(t, PEP, type = \"l\")\n\n# Preparation of graph with all species\npar(mfrow = c(1, 1))\nplot(t, G6P, type = \"l\", col = 1, lty = 1, ylab = \"[species]\",\n ylim = c(0, 1))\nlines(t, R5P, type = \"l\", col = 2, lty = 2)\nlines(t, G3P, type = \"l\", col = 3, lty = 3)\nlines(t, DHCP, type = \"l\", col = 4, lty = 4)\nlines(t, PEP, type = \"l\", col = 5, lty = 5)\nlegend(x = 10, y = 1, legend = c(\"G6P\", \"R5P\", \"G3P\", \"DHCP\", \"PEP\"),\ncol = c(1, 2, 3, 4, 5), cex = 1, lty = c(1, 2, 3, 4, 5))\n```\n\n| Note that, by the quantities offered to the simulation, that is, kinetic constants and initial values, G3P and PEP register a significant interval in elevation, also coincident with their presence in several of the relations of @eq-redeMetab1.\n\n## Kinetics of 6-mercaptopurine metabolism\n\n| Raising the complexity of metabolic networks a little, we can illustrate the cellular metabolism of 6-mercaptopurine (6-MP) as a function of cellular ATP content [@lavrova2017ordinary]. As a purine antagonist, the drug is used in chemotherapy for the treatment of lymphocytic leukemia, interrupting cell growth, although it produces cytotoxic side effects arising from reactions with the thiol group.\n\n| @fig-fig6MP represents a simplified scheme of the metabolism of 6-MP. The concentrations of the species and kinetic constants originate from the concentration values ​​in $\\mu$mol/mL, and time in days.\n\n```{r, label = \"fig-fig6MP\", echo=FALSE, fig.align =\"center\", out.width=\"80%\", fig.cap=\"Simplified schematic of 6-mercaptopurine metabolism (adapted from Lavrova et al., 2017).\"}\nknitr::include_graphics(\"figures/6mercaptopurina.png\")\n```\n\n| For the 10 reactions related to the ODEs that make up the representation of 6-MP metabolism [@lavrova2017ordinary], the code snippet below implements the 4th order Runge-Kutta solution by the `lsoda` function:\n\n```{r, fig.cap=\"Dependence of the dynamics of the metabolic network of 6-mercaptopurine degradation as a function of the initial ATP content at 0.2 umol/L. The values s initials and parameters are described in the code snippet.\"}\n\n# Degradation of 6-mercaptopurine and Runge-Kutta solution\n\nlibrary(deSolve)\n# Parameters\nk0 <- 5\nk1 <- 10\nk2 <- 10\nk3 <- 5\nk4 <- 1e-5\nk7 <- 0.01\nk8 <- 0.5\nkm7 <- 1\nkm1 <- 0.01\nkm2 <- 4\nkm3 <- 0.01\nkm4 <- 0.1\nkm8 <- 0.01\nVPUR <- 0.01\nVD <- 0.9\nVOUT <- 1e-4\n# Parameter list\nparms <- c(k0, k1, k2, k3, k4, k7, k8, km7, km1, km2, km3, km4, km8,\nVPUR, VD, VOUT)\n# compound specification\nMPex <- x[1]\nMPin <- x[2]\nTIMP <- x[3]\nTXMP <- x[4]\nTGMP <- x[5]\nmeTGMP <- x[6]\nTITP <- x[7]\nATP <- x[8]\nAMP <- x[9]\nPP <- x[10]\n# initial concentrations of species\nreag0 <- c(MPex0 = 0.68, MPin0 = 0, TIMP0 = 0, TXMP0 = 0, TGMP0 = 0,\nmeTGMP0 = 0, TITP0 = 0, ATP0 = 0.2, AMP0 = 0, PP0 = 0)\n\n# time interval definition\ntmin <- 0\ntmax <- 2\ndt <- 0.01\ntime <- seq(tmin, tmax, dt)\n# Function for the derivatives of each species\neq.dif <- function(time, x, parms) {\n# Parameter definition\nMPex <- x[1]\nMPin <- x[2]\nTIMP <- x[3]\nTXMP <- x[4]\nTGMP <- x[5]\nmeTGMP <- x[6]\nTITP <- x[7]\nATP <- x[8]\nAMP <- x[9]\nPP <- x[10]\n# Differential equations\ndMPex <- -k0 * MPex\ndMPin <- -(VPUR + k1) * MPin + k0 * MPex + km1 * TIMP\ndTIMP <- k1 * MPin + km8 * TITP - (k2 + k7 * ATP + km1 + k8 * PP) *\nTIMP + km2 * TXMP + km7 * TITP * AMP\ndTXMP <- k2 * TIMP - k3 * TXMP * ATP - km2 * TXMP + km3 * TGMP *\n AMP * PP\n dTGMP <- k3 * TXMP * ATP - (k4 + VD) * TGMP - km3 * TGMP * AMP *\n PP + km4 * meTGMP\n dmeTGMP <- k4 * TGMP - VOUT * meTGMP - km4 * meTGMP\n dTITP <- k8 * TIMP * PP - km8 * TITP + k7 * TIMP * ATP - km7 *\n TITP*AMP\n dATP <- -k7 * TIMP * ATP + km3 * TGMP * AMP * PP - k3 * TXMP *\n ATP + km7 * TITP * AMP\n dAMP <- -km3 * TGMP * AMP * PP + k3 * TXMP * ATP + k7 * TIMP *\n ATP - km7 * TITP * AMP\ndPP <- -k8 * TIMP * PP + km8 * TITP - km3 * TGMP * AMP * PP + k3 *\nTXMP * ATP\nlist(c(dMPex, dMPin, dTIMP, dTXMP, dTGMP, dmeTGMP, dTITP, dATP,\ndAMP, dPP)) # list of differential values ​​for each species\n}\n# lsoda routine for solving differential equations ordinary\nsol.eq <- lsoda(reag0, time, eq.dif, parms,\nrtol = 1e-4, atol = 1e-6\n)\n# Isolating the result columns\nt <- sol.eq[, 1]\nMPex <- sol.eq[, 2]\nMPin <- sol.eq[, 3]\nTIMP <- sol.eq[, 4]\nTXMP <- sol.eq[, 5]\nTGMP <- sol.eq[, 6]\nmeTGMP <- sol.eq[, 7]\nTITP <- sol.eq[, 8]\nATP <- sol.eq[, 9]\nAMP <- sol.eq[, 10]\nPP <- sol.eq[, 11]\n\n# Creating the graph\nplot(t, MPex, type = \"l\", xlab = \"tempo, days\",\n ylab = \"[species], umol/L\")\nlines(t, MPin, type = \"l\", col = 2, lty = 2)\nlines(t, TIMP, type = \"l\", col = 3, lty = 3)\nlines(t, TXMP, type = \"l\", col = 4, lty = 4)\nlines(t, TGMP, type = \"l\", col = 5, lty = 5)\nlines(t, meTGMP, type = \"l\", col = 6, lty = 6)\nlines(t, TITP, type = \"l\", col = 7, lty = 7)\nlines(t, ATP, type = \"l\", col = 8, lty = 8)\nlines(t, AMP, type = \"l\", col = 9, lty = 9)\nlines(t, PP, type = \"l\", col = 10, lty = 10)\nlegend(x = 1.5, y = 0.65, legend = c(\"MPex\", \"MPin\", \"TIMP\", \"TXMP\",\n \"TGMP\", \"meTGMP\", \"TITP\", \"ATP\",\n \"AMP\", \"PP\"), col = c(1, 2, 3, 4,\n 5, 6, 7, 8,\n 9, 10),\n cex = 0.7, lty = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n```\n\n| Since the dynamics of variation of the compounds is dependent on the initial cellular ATP content, try varying this initial value (e.g.: ATP0=2):\n\n```{r echo=FALSE, fig.align =\"center\", out.width=\"100%\", fig.cap=\"Dependence of the dynamics of the metabolic network for degradation of 6-mercaptopurine as a function of the initial ATP content at 2 umol/L. The initial values ​​and parameters are described in the code snippet.\"}\nknitr::include_graphics(\"figures/rede6MP.png\")\n```\n\n| Note that, with the 10x reduction in ATP content, TGMP and TIMP maintained more stable levels throughout the period."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"output-file":"redes_en.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.22","theme":{"light":"flatly"},"title":"Metabolic Networks","bibliography":["referencias.bib"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}