{"title":"Proteins","markdown":{"yaml":{"title":"Proteins","bibliography":"referencias.bib"},"headingText":"Amino acid composition","headingAttr":{"id":"sec-Proteins","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n| Proteins are biopolymers formed by 20 amino acids. In this way, it is possible to easily evaluate the composition of any protein available in a database, such as the *PDB* seen in the *Amino Acids* chapter. Taking human serum albumin as an example, code *AAA98797* from the *National Center for Biotechnology Information*, it is possible to count the 20 types of amino acids that make up its sequence. To do this, simply consider the *FASTA* sequence as a *string* and extract the quantity of each letter, using the *stringr* library, as follows.\n\n| First, obtain the *FASTA* sequence of serum albumin.\n\n```{r bsa seq}\nseq <- \"MKWVTFISLLFLFSSAYSRGVFRRDAHKSEVAHRFKDLGEENFKALVLIAFAQYLQQCPFEDHVKLVNEV\nTEFAKTCVADESAENCDKSLHTLFGDKLCTVATLRETYGEMADCCAKQEPERNECFLQHKDDNPNLPRLV\nRPEVDVMCTAFHDNEETFLKKYLYEIARRHPYFYAPELLFFAKRYKAAFTECCQAADKAACLLPKLDELR\nDEGKASSAKQRLKCASLQKFGERAFKAWAVARLSQRFPKAEFAEVSKLVTDLTKVHTECCHGDLLECADD\nRADLAKYICENQDSISSKLKECCEKPLL EKSHCIAEVENDEMPADLPSLAADFVESKDVCKNYAEAKDVF\nLGMFLYEYARRHPDYSVVLLLRLAKTYETTLEKCCAAADPHECYAKVFDEFKPLVEEPQNLIKQNCELFE\nQLGEYKFQNALLVRYTKKVPQVSTPTLVEVSRNLGKVGSKCCKHPEAKRMPCAEDYLSVVLNQLCVLHEK\nTPVSDRVTKCCTESLVNRRPCFSALEVDETYVPKEFNAETFTFHADICTLSEKERQIKKQTALVELVKHK\nPKATKEQLKAVMDDFAAFVEKCCKADDKETCFAEEGKKLVAASQAALGL\"\n```\n\n| You can see that there are empty spaces, which can be omitted for aesthetic reasons or not, since the *stringr* package will not count them, unlike more specific packages for biological sequences, such as *seqinr* seen previously. But if you want to omit these spaces, just run the code below.\n\n```{r, eval=FALSE}\nseq <- seq[seq != \"\\n\"]\nseq # boolean operation != means \"no\"\n```\n\nNext, you get the quantity of a specific letter in the sequence.\n\n```{r}\nlibrary(stringr)\naa <- str_count(seq, pattern = \"A\")\naa\n```\n\n| Note that the `str_count` command only counts the letter \"A\" in the sequence. This way, you can get all 20 amino acids by repeating this command.\n\n```{r}\nlibrary(stringr)\nala <- str_count(seq, pattern = \"A\")\narg <- str_count(seq, pattern = \"R\")\nasn <- str_count(seq, pattern = \"N\")\nasp <- str_count(seq, pattern = \"D\")\ncys <- str_count(seq, pattern = \"C\")\nglu <- str_count(seq, pattern = \"E\")\ngln <- str_count(seq, pattern = \"Q\")\ngly <- str_count(seq, pattern = \"G\")\nhis <- str_count(seq, pattern = \"H\")\nile <- str_count(seq, pattern = \"I\")\nleu <- str_count(seq, pattern = \"L\")\nlys <- str_count(seq, pattern = \"K\")\nmet <- str_count(seq, pattern = \"M\")\nphe <- str_count(seq, pattern = \"F\")\npro <- str_count(seq, pattern = \"P\")\nser <- str_count(seq, pattern = \"S\")\nthr <- str_count(seq, pattern = \"T\")\ntrp <- str_count(seq, pattern = \"W\")\ntyr <- str_count(seq, pattern = \"Y\")\nval <- str_count(seq, pattern = \"V\")\n```\n\nAnd, to visualize the result in a table:\n\n\n```{r, bsa compos, tidy=TRUE, tidy.opts=list(width.cutoff=50)}\naa_3abrev <- c(\"Ala\", \"Arg\", \"Asn\", \"Asp\", \"Cys\", \"Glu\", \"Gln\", \"Gly\", \"His\", \"Ile\", \"Leu\", \"Lys\", \"Met\", \"Phe\", \"Pro\", \"Ser\", \"Thr\", \"Trp\", \"Tyr\", \"Val\")\naa_quant <- c(ala, arg, asn, asp, cys, glu, gln, gly, his, ile, leu, lys, met, phe, pro, ser, thr, trp, tyr, val) # vector with the quantity of amino acids in the protein\naa_seq <- data.frame(aa_3abrev, aa_quant) # dataframe with the results\ncolnames(aa_seq) <- c(\"Tipo\", \"Qtde\") # rename the columns\n\n# Amino acid composition in human serum albumin\naa_seq # displays the table\n```\n\n| 'R' has some commands for the aesthetic generation of tables, including those included in the 'knitr' package, as follows:\n```{r}\nlibrary(knitr) # to generate the table\n\nknitr::kable(aa_seq, caption = \"Composition of amino acids in human serum albumin.\", \"pipe\") # table\n```\n\n| Note that, despite the result obtained, there was some work to obtain the composition of the albumin, from the 20 modified lines for each amino acid. A more practical alternative is to consider a *loop* that performs the extraction of the desired information for a vector containing the abbreviation of a letter for each amino acid.\n\n```{r loop table bsa}\naa_1abrev <- c(\"A\", \"R\", \"N\", \"D\", \"C\", \"E\", \"Q\", \"G\", \"H\", \"I\", \"L\", \"K\", \"M\",\n\"F\", \"P\", \"S\", \"T\", \"W\", \"Y\", \"V\")\nfor (i in aa_1abrev) {\naa_quant2 <- str_count(seq, pattern = aa_1abrev)\nreturn(aa_quant2) # optional syntax for function with only one output\n}\naa_seq <- data.frame(aa_3abrev, aa_quant2) # dataframe with results\ncolnames(aa_seq) <- c(\"Type\", \"Quantity\") # rename columns\nknitr::kable(aa_seq, caption = \"Amino acid composition in human serum albumin\n(using loop).\", \"pipe\") # table\n```\n\n| This way you get the same result, but with less memory consumption and higher processing speed, characteristics in any programming logic. Although the *loop* exemplifies automation, the `str_count` function retains an internal *loop*, since an element counting function is applied to a sequence, based on a predefined pattern (the vector *aa_1abrev*, in this case). This way, the script can be further simplified, without the need for the external *loop*.\n\n```{r}\nstr_count(seq, pattern = aa_1abrev)\n```\n\n| Several R functions exhibit this internal *loop*, which can be applied to vectors, lists, matrices and *dataframes* (datasheets). The simplest involve the application of a preprogrammed R function to a vector, for example:\n\n```{r}\ny <- c(1, 2, 4, 8, 16, 32)\nmean(y)\nsum(y)\n```\n| Another common vectorization is the application of a user *function* to a vector, reducing the need for repeated commands, as in the example below:\n\n```{r size prot estim}\n# Estimated average size of a protein from the number of\n# amino acid residues\nprot.size <- function(x) {\nMM <- x * 110 # 'x' represents the number of amino acids in the protein\nreturn(MM)\n}\nprot.size(575) # number of amino acid residues in human albumin\n```\n\n| Another form of vectorization involves the `apply` family of functions, consisting of the `apply`, `sapply`, `tapply`, `lapply`, and `mapply` commands. Although they have faster processing than external *loop* functions for using very complex matrices, each one is aimed at a distinct object or specific R situation (returning a list, vector or matrix), allows the use of `subset` (data subsets), uses R functions or functions previously defined by the user, and runs in just one command line. These advantages contrast with the use of *for* loops applied to vectors. However, vectorization works very well when you want to apply or map a function to a vector/matrix/list. When, on the other hand, you want to apply a function whose result depends on more than one vector/matrix/list, the *for* loop becomes indispensable, as in the titration of weak acids in the *Amino Acids* chapter.\n\n| Regardless of the method used (and here it is worth highlighting the so-called *good programming practices* in the construction of *scripts* [^label-1]), it is possible to build a more general composition for the set of residues of the protein. Thus, we can obtain any quantitative relationship from the sequence, since we are treating it as a *string*. For example, a table containing the class of each amino acid that makes up the sequence.\n\n[^label-1]: Some programming practices (*Best Codes*):\n1) organize a project into folders (e.g.: data, figures, scripts) or create an R package as an option; 2) create sections in a code to make it easier to find; 3) name the *code chunks* (pieces of code); 4) place the libraries used, sources, and data calls at the beginning of the code (avoids searching for something necessary for the *script* to run throughout the code); 5) indent, preferably with 1 or 2 commands per line; 6) always use function parameters inside the function; 7) avoid global parameters; 8) do not use 'attach'; 8) use parameters with intuitive names (and not x and y; e.g.: function_name); 9) assign names to objects with one of the three naming conventions (e.g.: KiCompet, ki_compet, ki.compet).\n\n```{r}\naa_ac <- aa_seq[4, 2] + aa_seq[6, 2] # AA acids\naa_bas <- aa_seq[2, 2] + aa_seq[9, 2] + aa_seq[12, 2] # AA basics\naa_arom <- aa_seq[14, 2] + aa_seq[18, 2] + aa_seq[19, 2] # AA aromatics\naa_alif <- aa_seq[10, 2] + aa_seq[11, 2] + aa_seq[15, 2] + aa_seq[1, 2] +\n aa_seq[20, 2] # Aliphatic AA\naa_pol <- aa_seq[3, 2] + aa_seq[5, 2] + aa_seq[7, 2] + aa_seq[8, 2] +\naa_seq[13, 2] + aa_seq[16, 2] + aa_seq[17, 2] ## Neutral polar AA\n```\n| Now, instead of building a table with the count of these groups, let's calculate their percentage, for a more general view of the sequence.\n\n```{r}\naa_tot <- str_count(seq, pattern = \"\") # length of the sequence\nclass_perc <- round(c(aa_ac, aa_bas, aa_arom, aa_alif, aa_pol) / aa_tot * 100)\n```\n\nAnd now, yes, we build the table.\n\n```{r}\naa_class <- c(\"acidic\", \"basic\", \"aromatic\", \"aliphatic\", \"polar\")\naa_perc <- data.frame(aa_class, class_perc) # dataframe with results\ncolnames(aa_perc) <- c(\"Class\", \"%\") # rename columns\nknitr::kable(aa_perc, caption = \"Distribution of amino acid classes\nin human albumin.\", \"pipe\") # table\n```\n\n| It can be seen from the table above that the distribution of amino acid residue classes in albumin is reasonably homogeneous, which contributes to its amphoteric function of transporting polar (e.g. calcium) and nonpolar (e.g. cholesterol, fatty acids) compounds.\n\n## Protein Purification Table & R as a spreadsheet\n\n| Despite the ease with which we can create/edit conventional spreadsheets (*spreadsheet*; e.g. MS Excel, Libreoffice Calc, Gnumeric, etc.), 'R' also allows us to work with spreadsheets. Although less intuitive than those mentioned, scripting in R allows the creation/editing of highly complex spreadsheets, given the nature of the statistical programming of the suite. \n\n| To illustrate the construction of a simple spreadsheet, let us take as an example a *Protein Purification Table*, commonly used in Biotechnology and related areas. The simplest way to construct a spreadsheet involves 1) the individual preparation of vectors, and 2) the union of the vectors in a spreadsheet.\n| The procedures for protein purification (or isolation, fractionation) involve techniques such as **chemical treatment (ammonium sulfate precipitation, acetone)**, **acid treatment**, **thermal treatment**, **dialysis**, **chromatography (molecular filtration, ion exchange, affinity, reverse phase)**, among others. To measure the degree of purity of the sample obtained, simple **electrophoresis**, **isoelectric focusing**, **2D electrophoresis**, use of **monoclonal antibodies**, and specific **activity assays**, among others, are normally used.\n| For the purification table, only the **sample mass** and **sample enzymatic activity** vectors obtained at each purification step are required. A simple spreadsheet could be constructed as:\n\n```{r plan purif}\n# Preparation of a simple enzyme purification spreadsheet\n# (each element of the vector represents a purification step)\n\n# 1. Definition of the main vectors:\nprot.total <- c(6344, 302, 145, 34, 10, 3.8) # protein, mg\nativ.tot <- c(200, 122, 106, 70, 53, 24) * 1000 # activity, U\n\n# 2. Construction of the spreadsheet:\npurif.plan <- data.frame(prot.total, ativ.tot)\npurif.plan\n```\n\n| The spreadsheet now forms an R dataset. There are other simple ways to create a dataset, such as using the 'cbind' function (to join columns) or 'rbind' (to join rows):\n\n```{r plan purif cbind}\npurif.plan2 <- cbind(prot.total, ativ.tot)\npurif.plan2\n```\n\n| Regardless of the procedure, you can change the column names, as follows:\n\n```{r plan purif colnames}\n# Editing column names\ncolnames(purif.plan2) <- c(\"totalProt\", \"enzAtiv\")\npurif.plan2\n```\n\n| As in a conventional spreadsheet, it is also possible to create new vectors calculated from the initial ones:\n\n```{r plan purif calc}\npurif.plan3 <- data.frame(prot.total, ativ.tot, ativ.tot / prot.total)\noptions(digits = 1) # option for no. of decimal places\ncolnames(purif.plan3) <- c(\"prot.total\", \"ativ.tot\", \"ativ.specif\")\nrownames(purif.plan3) <- c(\"extr.bruto\", \"NH4SO2\", \"acetone\",\n\"Sephadex G-100\", \"DEAE-cellulose\", \"C8-phase rev\")\npurif.plan3\n```\n\n| The spreadsheet can also be edited in its values, simply by assigning a new name so that the changes are saved:\n\n```{r plan purif edit, eval=FALSE}\n# Simple spreadsheet editing (changes in values ​​and column names)\n\npurif.plan4 <- edit(purif.plan3) # or data.entry( )\n```\n\n| Of course, you can also import data from a spreadsheet already created in another program. Example for a spreadsheet saved as *CSV*:\n\n```{r plan purif import, eval = FALSE}\n# Importing data from another spreadsheet (CSV):\n\n# 1. Import with the name of the desired spreadsheet:\npurif.plan5 <- read.table(\"planilha.csv\", header = T, sep = \",\")\n\n# 2. Import with the search screen for the desired spreadsheet:\npurif.plan5 <- frame <- read.csv(file.choose())\n```\n\n| A large number of operations can be performed on spreadsheets in 'R', such as insertion, deletion, modification, aggregation (*merge*), filtering, subset extraction, mathematical operations and statistical calculations (mean, standard deviation, etc.). You can also convert the spreadsheet into a more visual table using the 'tibble' library, part of a set of packages used in data science called *Tidyverse*:\n\n```{r plan purif convert tibble}\nlibrary(tibble)\npurif.plan6 <- as_tibble(purif.plan3)\npurif.plan6\n```\n\n| The *Tidyverse* comprises an ecosystem of 'R' packages that share the same philosophy, grammar and data structure. These packages include 'tibble' (tables), 'ggplot2' (high-quality visual graphics), and 'dplyr' (data manipulation). As for 'dplyr', it is quite flexible to create and edit spreadsheets, which are converted to tables, as follows for the purification example above:\n```{r plan purif dplyr}\n# Enzyme purification table with 'dplyr' package:\n\nlibrary(dplyr)\npurif.plan7 <- mutate(purif.plan, ativ.esp = ativ.tot / prot.total)\npurif.plan7\n```\n\n| Note that with the 'dplyr' package, inserting a new column did not require a new array for column names ('colnames'). In addition, the final spreadsheet was created using the grammar of the 'tibble' package from the *Tidyverse*. This facility also extends to the spreadsheet editing and filtering processes, such as the extraction of a modified column:\n\n```{r plan purif alter column}\nativ.tot.kU <- transmute(purif.plan7, ativ.tot = ativ.tot / 1e3)\nativ.tot.kU # specific activity vector in U x 10^3\n```\n\n| This way you can build a complete purification table, listing, in addition to the *specific activity*, the *purification level* (how many times the specific activity increased in relation to the initial sample) and the *yield* obtained (how many times the target enzyme content decreased in relation to the initial sample - remaining activity):\n\n```{r}\npurif.plan8 <- mutate(purif.plan7,\npurif = ativ.esp / ativ.esp[1], # purification level\nrend.perc = 100 * ativ.tot / ativ.tot[1]\n) # percentage yield\n\n# Converting to the table...\nlibrary(knitr)\nknitr::kable(purif.plan8, caption = \"Purification table for an enzyme\", \"pipe\")\n```\n\n| Additionally, 'R' has some packages that speed up the creation/editing of spreadsheets in an interactive way, closer to a conventional spreadsheet, among which the 'DT' package stands out, a library written in *JavaScript* that produces an editable spreadsheet in *HTML*:\n\n```{r plan purif DT, eval=FALSE, include=TRUE}\nlibrary(DT)\npurif.plan9 <- as.data.frame(purif.plan8)\nrownames(purif.plan9) <- c(\"extr.bruto\", \"NH4SO2\", \"acetone\",\n\"Sephadex G-100\", \"DEAE-cellulose\",\n\"C8-phase rev\") # converts the purification table\n# into a spreadsheet for use by the DT package\ndatatable(purif.plan9) %>% formatRound(1:5, 1) # columns with 1 decimal place\n```\n\n| Since this is an interactive HTML output, the result of the code snippet must be omitted for correct compilation by 'R' (eval=FALSE, include=TRUE).\n\n| The 'DT' library allows, among other things, reordering, filtering, and even editing of values, interactively (just click on the desired cell):\n\n```{r plan purif DT edit, eval=FALSE, include=TRUE}\nDT::datatable(purif.plan9, editable = \"cell\")\n```\n\n## Interaction of oxygen with myoglobin and hemoglobin\n\n| Both human myoglobin (*PD 1MBO*) and hemoglobin (*PDB 6BB5*) are proteins that transport molecular oxygen. Hemoglobin, with a quaternary structure, transports it from the lungs to the tissues, while myoglobin, tertiary, distributes it between them. Its oxygen saturation curves are well known in textbooks, and learning about them can add value when simulated.\n\n| Thus, the binding of O$_{2}$ to myoglobin can be considered as a saturation fraction *y* given as a function of its half-saturation at 50% O$_{2}$ pressure (dissociation constant *$K_{50}$* of 2.8 mmHg).\n\n$$\ny=\\frac{pO_2}{K_{50}+pO_2}\n$$ {#eq-Mb}\n\nOn the other hand, the value of *$K_{50}$* for hemoglobin is 26 mmHg, but its function is expressed differently from that of myoglobin:\n\n$$\ny=\\frac{pO_2^{nH}} {K_{50}^{nH}+pO_2^{nH}}\n$$ {#eq-Hb}\n\nIn this @eq-Hb, *nH* represents the Hill cooperativity coefficient, which summarizes the energy distributed among the four microscopic dissociation constants of O$_{2}$ to the four porphyrin centers of hemoglobin (*heme* groups). Simulating both curves:\n\n```{r, fig.cap=\"Oxygen saturation isotherm for myoglobin (solid line) and hemoglobin (dotted line), indicating the intercept at 50% pO2 (half saturation).\"}\nK50 <- 2.8\ncurve(x / (K50 + x),\nxlim = c(0, 100),\nxlab = \"pO2 (mmHg)\", ylab = \"y\", lty = \"dotted\"\n)\n\nK50 <- 26\nnH <- 2.8\ncurve(x^nH / (K50^nH + x^nH),\nxlim = c(0, 100),\nxlab = \"pO2 (mmHg)\", ylab = \"y\", col = \"red\",\nadd = TRUE\n) # \"add\" allows you to add curves to the graph\nabline(0.5, 0, lty = 2) # add baseline at half saturation\n```\n\n| As mentioned in the previous paragraph, the four binding centers with molecular oxygen are related to four microscopic dissociation equilibrium constants, from *K1* to *K4*. Simplifying the value of pO$_{2}$ to *L*, ligand, it is also possible to represent the binding of O$_{2}$ to hemoglobin by the Adair equation [@pauling1935oxygen]:\n\n$$\ny=\\frac{K1*L+2*K2*K1*L^2+3*K3*K2*K1*L^3+4*K4*K3*K2*K1*L^4} {4*(1+K1*L+2*K2*K1*L^2+3*K3*K2*K1*L^3+4*K4*K3*K2*K1*L^4)}\n$${#eq-HbKmicro}\n\n| It turns out that there is a statistical effect associated with the interaction under study, since O$_{2}$ has 4 initial sites of interaction with hemoglobin [@tyuma1973analysis], values ​​that reduce until the saturation of the 4 sites. Thus, it is necessary to account for the microscopic constants *Ki* due to this statistical compromise:\n\n$$\nKi_{corr} = \\frac{i}{N-1+i}*Ki\n$$ {#eq-HbKSta}\n\n| In R, this can be aided by a *for* loop:\n\n```{r}\nK <- c(0.011, 0.016, 0.118, 0.400) # vector of microscopic constants for\n# dissociation of Hb to O2\nL <- seq(1, 201, 2) # vector of O2 contents\n\nKcorr <- c() # initialize an empty vector to output the corrected Ki vector\nN <- 4 # declare the number of sites in Hb\nfor (i in 1:N) Kcorr[i] <- i / (N - i + 1) * K[i]\nKcorr # returns the vector of Ki values corrected for the statistical effect\n```\n\n| Note that the corrected *Ki* values are in a proportion that follows the availability of sites, from 4 times lower for the 1st site (highest binding), up to 4 times greater than for the 4th site (lowest binding). It is now possible to apply @eq-HbKmicro using the constants calculated as follows:\n\n```{r, fig.cap=\"Hemoglobin oxygen saturation isotherm by the Adair equation.\"}\nnumer <- K[1] * L + 2 * K[2] * K[1] * L^2 + 3 * K[3] * K[2] * K[1] * L^3 +\n4 * K[4] * K[3] * K[2] * K[1] * L^4\ndenom <- 1 + numer\ny <- numer / denom\nplot(L, y, xlab = \"pO2\", type = \"l\", col = 2)\n```\n\n| Finally, it is also possible to obtain the binding curve using a variation of *for* loop in which the @eq-HbKmicro is produced by iteration, as follows [@bloomfield2009computer]:\n\n```{r, fig.cap=\"Hemoglobin oxygen saturation curve obtained by iteration of the Adair equation, as corrected for statistical effect.\"}\n# Calculation of y in each L\nYi <- function(L, Kcorr) {\nN <- length(Kcorr)\nconc <- c()\nconc[1] <- L * Kcorr[1]\nfor (i in 2:N) conc[i] <- conc[i - 1] * L * Kcorr[i]\nnumer2 <- sum((1:N) * conc) / N\ndenom2 <- 1 + sum(conc)\nreturn(numer2 / denom2)\n}\n# Calculation of y to vector L\nY <- function(L, Kcorr) {\nYY <- c()\nfor (j in 1:length(L)) YY[j] <- Yi(L[j], Kcorr)\nreturn(YY)\n}\n# Application of the function of y to L and graph\nYfinal <- Y(L, Kcorr)\nplot(L, Yfinal, type = \"l\", col = 2, xlab = \"pO2\", ylab = \"y\")\n```\n\n| Note that there are minimal differences between the curves obtained by the different procedures, due to the different algorithms used.\n\n## Some R packages for studying proteins\n\n| Some R packages are quite useful in studying proteins, especially the `seqinr` library seen in the *Amino Acids* chapter, which computes various values ​​and information for protein sequences, such as *pI*, hydroxypathy index, residue distribution, among others. The project website [^seqinrSitio-1] contains detailed information for its use. Using the same procedure to obtain the *FASTA* sequence for lysozyme from the *Amino Acids* chapter (code CAA32175 on the *NCBI* site), one can obtain an extensive set of protein information, as exemplified below:\n\n[^seqinrSite-1]: Seqinr project site: http://seqinr.r-forge.r-project.org/\n\n```{r}\nlibrary(seqinr)\nlysozyme <- c(\"KVFERCELARTLKRLGMDGYRGISLANWMCLAKWESGYNTRATNYNAGDRSTDYGIFQ\nINSRYWCNDGKTPGAVNACHLSCSALLQDNIADAVACAKRVVRDPQGIRAWVAWRNRCQNRDVRQYVQGCGV\")\nseq_liso <- s2c(lysozyme) # convert amino acid string sequence to\n# the seqinr pattern (character vector)\nseq_liso2 <- seq_liso[seq_liso != \"\\n\"] # elimination of spaces required by\n# seqinr from copy/paste procedure.\nseq_liso2\npmw(seq_liso2) # molecular weight of the protein\naaa(seq_liso2) # residue distribution\nAAstat(seq_liso2, plot = TRUE) # distribution graph, composition\n# and proportion of residues, pI value\n```\n\n| Other functions of `seqinr` include conversion of amino acids to 1- and 3-letter abbreviations (`a` and `aaa`, respectively), listing of 544 physicochemical properties of the 20 protein amino acids (`aaindex`), `pK` (self-explanatory, and seen previously), and isolated computation of *pI* (`computePI`) and molecular mass (`pmw`), in addition to several others, both for proteomics and genomics.\n| Another interesting R package for studying proteins is *Peptides* [^Peptides-1], which also computes several physicochemical properties for amino acid sequences, in addition to enabling plotting integration with the *GROMACS* molecular dynamics package. As for `seqinr`, `Peptides` requires conversion of the sequence into *string* for the recognized vector pattern. The package's functions include the computation of 66 descriptors for each amino acid in a sequence (`aaDescriptors`), the composition of the sequence by residue classification (`aaComp`), the computation of the aliphatic index (`aIndex`), the hydrophobicity index (`hydrophobicity`), the instability index (`instalIndex`), the mass/charge ratio (`mz`), molecular mass (`mw`), and pI (`pI`), among others.\n| Among the packages more focused on comparative studies and visualization of structures, as well as for bioinformatics and chemogenomics descriptors, it is worth mentioning `Bio3d`, `Autoplotprotein`, `protr`, `BioMedR`, and `UniprotR`, among many others.\n\n[^Peptides-1]: Peptides package: https://cran.r-project.org/web/packages/Peptides/index.html\n\n","srcMarkdownNoYaml":"\n\n## Amino acid composition {#sec-Proteins}\n\n| Proteins are biopolymers formed by 20 amino acids. In this way, it is possible to easily evaluate the composition of any protein available in a database, such as the *PDB* seen in the *Amino Acids* chapter. Taking human serum albumin as an example, code *AAA98797* from the *National Center for Biotechnology Information*, it is possible to count the 20 types of amino acids that make up its sequence. To do this, simply consider the *FASTA* sequence as a *string* and extract the quantity of each letter, using the *stringr* library, as follows.\n\n| First, obtain the *FASTA* sequence of serum albumin.\n\n```{r bsa seq}\nseq <- \"MKWVTFISLLFLFSSAYSRGVFRRDAHKSEVAHRFKDLGEENFKALVLIAFAQYLQQCPFEDHVKLVNEV\nTEFAKTCVADESAENCDKSLHTLFGDKLCTVATLRETYGEMADCCAKQEPERNECFLQHKDDNPNLPRLV\nRPEVDVMCTAFHDNEETFLKKYLYEIARRHPYFYAPELLFFAKRYKAAFTECCQAADKAACLLPKLDELR\nDEGKASSAKQRLKCASLQKFGERAFKAWAVARLSQRFPKAEFAEVSKLVTDLTKVHTECCHGDLLECADD\nRADLAKYICENQDSISSKLKECCEKPLL EKSHCIAEVENDEMPADLPSLAADFVESKDVCKNYAEAKDVF\nLGMFLYEYARRHPDYSVVLLLRLAKTYETTLEKCCAAADPHECYAKVFDEFKPLVEEPQNLIKQNCELFE\nQLGEYKFQNALLVRYTKKVPQVSTPTLVEVSRNLGKVGSKCCKHPEAKRMPCAEDYLSVVLNQLCVLHEK\nTPVSDRVTKCCTESLVNRRPCFSALEVDETYVPKEFNAETFTFHADICTLSEKERQIKKQTALVELVKHK\nPKATKEQLKAVMDDFAAFVEKCCKADDKETCFAEEGKKLVAASQAALGL\"\n```\n\n| You can see that there are empty spaces, which can be omitted for aesthetic reasons or not, since the *stringr* package will not count them, unlike more specific packages for biological sequences, such as *seqinr* seen previously. But if you want to omit these spaces, just run the code below.\n\n```{r, eval=FALSE}\nseq <- seq[seq != \"\\n\"]\nseq # boolean operation != means \"no\"\n```\n\nNext, you get the quantity of a specific letter in the sequence.\n\n```{r}\nlibrary(stringr)\naa <- str_count(seq, pattern = \"A\")\naa\n```\n\n| Note that the `str_count` command only counts the letter \"A\" in the sequence. This way, you can get all 20 amino acids by repeating this command.\n\n```{r}\nlibrary(stringr)\nala <- str_count(seq, pattern = \"A\")\narg <- str_count(seq, pattern = \"R\")\nasn <- str_count(seq, pattern = \"N\")\nasp <- str_count(seq, pattern = \"D\")\ncys <- str_count(seq, pattern = \"C\")\nglu <- str_count(seq, pattern = \"E\")\ngln <- str_count(seq, pattern = \"Q\")\ngly <- str_count(seq, pattern = \"G\")\nhis <- str_count(seq, pattern = \"H\")\nile <- str_count(seq, pattern = \"I\")\nleu <- str_count(seq, pattern = \"L\")\nlys <- str_count(seq, pattern = \"K\")\nmet <- str_count(seq, pattern = \"M\")\nphe <- str_count(seq, pattern = \"F\")\npro <- str_count(seq, pattern = \"P\")\nser <- str_count(seq, pattern = \"S\")\nthr <- str_count(seq, pattern = \"T\")\ntrp <- str_count(seq, pattern = \"W\")\ntyr <- str_count(seq, pattern = \"Y\")\nval <- str_count(seq, pattern = \"V\")\n```\n\nAnd, to visualize the result in a table:\n\n\n```{r, bsa compos, tidy=TRUE, tidy.opts=list(width.cutoff=50)}\naa_3abrev <- c(\"Ala\", \"Arg\", \"Asn\", \"Asp\", \"Cys\", \"Glu\", \"Gln\", \"Gly\", \"His\", \"Ile\", \"Leu\", \"Lys\", \"Met\", \"Phe\", \"Pro\", \"Ser\", \"Thr\", \"Trp\", \"Tyr\", \"Val\")\naa_quant <- c(ala, arg, asn, asp, cys, glu, gln, gly, his, ile, leu, lys, met, phe, pro, ser, thr, trp, tyr, val) # vector with the quantity of amino acids in the protein\naa_seq <- data.frame(aa_3abrev, aa_quant) # dataframe with the results\ncolnames(aa_seq) <- c(\"Tipo\", \"Qtde\") # rename the columns\n\n# Amino acid composition in human serum albumin\naa_seq # displays the table\n```\n\n| 'R' has some commands for the aesthetic generation of tables, including those included in the 'knitr' package, as follows:\n```{r}\nlibrary(knitr) # to generate the table\n\nknitr::kable(aa_seq, caption = \"Composition of amino acids in human serum albumin.\", \"pipe\") # table\n```\n\n| Note that, despite the result obtained, there was some work to obtain the composition of the albumin, from the 20 modified lines for each amino acid. A more practical alternative is to consider a *loop* that performs the extraction of the desired information for a vector containing the abbreviation of a letter for each amino acid.\n\n```{r loop table bsa}\naa_1abrev <- c(\"A\", \"R\", \"N\", \"D\", \"C\", \"E\", \"Q\", \"G\", \"H\", \"I\", \"L\", \"K\", \"M\",\n\"F\", \"P\", \"S\", \"T\", \"W\", \"Y\", \"V\")\nfor (i in aa_1abrev) {\naa_quant2 <- str_count(seq, pattern = aa_1abrev)\nreturn(aa_quant2) # optional syntax for function with only one output\n}\naa_seq <- data.frame(aa_3abrev, aa_quant2) # dataframe with results\ncolnames(aa_seq) <- c(\"Type\", \"Quantity\") # rename columns\nknitr::kable(aa_seq, caption = \"Amino acid composition in human serum albumin\n(using loop).\", \"pipe\") # table\n```\n\n| This way you get the same result, but with less memory consumption and higher processing speed, characteristics in any programming logic. Although the *loop* exemplifies automation, the `str_count` function retains an internal *loop*, since an element counting function is applied to a sequence, based on a predefined pattern (the vector *aa_1abrev*, in this case). This way, the script can be further simplified, without the need for the external *loop*.\n\n```{r}\nstr_count(seq, pattern = aa_1abrev)\n```\n\n| Several R functions exhibit this internal *loop*, which can be applied to vectors, lists, matrices and *dataframes* (datasheets). The simplest involve the application of a preprogrammed R function to a vector, for example:\n\n```{r}\ny <- c(1, 2, 4, 8, 16, 32)\nmean(y)\nsum(y)\n```\n| Another common vectorization is the application of a user *function* to a vector, reducing the need for repeated commands, as in the example below:\n\n```{r size prot estim}\n# Estimated average size of a protein from the number of\n# amino acid residues\nprot.size <- function(x) {\nMM <- x * 110 # 'x' represents the number of amino acids in the protein\nreturn(MM)\n}\nprot.size(575) # number of amino acid residues in human albumin\n```\n\n| Another form of vectorization involves the `apply` family of functions, consisting of the `apply`, `sapply`, `tapply`, `lapply`, and `mapply` commands. Although they have faster processing than external *loop* functions for using very complex matrices, each one is aimed at a distinct object or specific R situation (returning a list, vector or matrix), allows the use of `subset` (data subsets), uses R functions or functions previously defined by the user, and runs in just one command line. These advantages contrast with the use of *for* loops applied to vectors. However, vectorization works very well when you want to apply or map a function to a vector/matrix/list. When, on the other hand, you want to apply a function whose result depends on more than one vector/matrix/list, the *for* loop becomes indispensable, as in the titration of weak acids in the *Amino Acids* chapter.\n\n| Regardless of the method used (and here it is worth highlighting the so-called *good programming practices* in the construction of *scripts* [^label-1]), it is possible to build a more general composition for the set of residues of the protein. Thus, we can obtain any quantitative relationship from the sequence, since we are treating it as a *string*. For example, a table containing the class of each amino acid that makes up the sequence.\n\n[^label-1]: Some programming practices (*Best Codes*):\n1) organize a project into folders (e.g.: data, figures, scripts) or create an R package as an option; 2) create sections in a code to make it easier to find; 3) name the *code chunks* (pieces of code); 4) place the libraries used, sources, and data calls at the beginning of the code (avoids searching for something necessary for the *script* to run throughout the code); 5) indent, preferably with 1 or 2 commands per line; 6) always use function parameters inside the function; 7) avoid global parameters; 8) do not use 'attach'; 8) use parameters with intuitive names (and not x and y; e.g.: function_name); 9) assign names to objects with one of the three naming conventions (e.g.: KiCompet, ki_compet, ki.compet).\n\n```{r}\naa_ac <- aa_seq[4, 2] + aa_seq[6, 2] # AA acids\naa_bas <- aa_seq[2, 2] + aa_seq[9, 2] + aa_seq[12, 2] # AA basics\naa_arom <- aa_seq[14, 2] + aa_seq[18, 2] + aa_seq[19, 2] # AA aromatics\naa_alif <- aa_seq[10, 2] + aa_seq[11, 2] + aa_seq[15, 2] + aa_seq[1, 2] +\n aa_seq[20, 2] # Aliphatic AA\naa_pol <- aa_seq[3, 2] + aa_seq[5, 2] + aa_seq[7, 2] + aa_seq[8, 2] +\naa_seq[13, 2] + aa_seq[16, 2] + aa_seq[17, 2] ## Neutral polar AA\n```\n| Now, instead of building a table with the count of these groups, let's calculate their percentage, for a more general view of the sequence.\n\n```{r}\naa_tot <- str_count(seq, pattern = \"\") # length of the sequence\nclass_perc <- round(c(aa_ac, aa_bas, aa_arom, aa_alif, aa_pol) / aa_tot * 100)\n```\n\nAnd now, yes, we build the table.\n\n```{r}\naa_class <- c(\"acidic\", \"basic\", \"aromatic\", \"aliphatic\", \"polar\")\naa_perc <- data.frame(aa_class, class_perc) # dataframe with results\ncolnames(aa_perc) <- c(\"Class\", \"%\") # rename columns\nknitr::kable(aa_perc, caption = \"Distribution of amino acid classes\nin human albumin.\", \"pipe\") # table\n```\n\n| It can be seen from the table above that the distribution of amino acid residue classes in albumin is reasonably homogeneous, which contributes to its amphoteric function of transporting polar (e.g. calcium) and nonpolar (e.g. cholesterol, fatty acids) compounds.\n\n## Protein Purification Table & R as a spreadsheet\n\n| Despite the ease with which we can create/edit conventional spreadsheets (*spreadsheet*; e.g. MS Excel, Libreoffice Calc, Gnumeric, etc.), 'R' also allows us to work with spreadsheets. Although less intuitive than those mentioned, scripting in R allows the creation/editing of highly complex spreadsheets, given the nature of the statistical programming of the suite. \n\n| To illustrate the construction of a simple spreadsheet, let us take as an example a *Protein Purification Table*, commonly used in Biotechnology and related areas. The simplest way to construct a spreadsheet involves 1) the individual preparation of vectors, and 2) the union of the vectors in a spreadsheet.\n| The procedures for protein purification (or isolation, fractionation) involve techniques such as **chemical treatment (ammonium sulfate precipitation, acetone)**, **acid treatment**, **thermal treatment**, **dialysis**, **chromatography (molecular filtration, ion exchange, affinity, reverse phase)**, among others. To measure the degree of purity of the sample obtained, simple **electrophoresis**, **isoelectric focusing**, **2D electrophoresis**, use of **monoclonal antibodies**, and specific **activity assays**, among others, are normally used.\n| For the purification table, only the **sample mass** and **sample enzymatic activity** vectors obtained at each purification step are required. A simple spreadsheet could be constructed as:\n\n```{r plan purif}\n# Preparation of a simple enzyme purification spreadsheet\n# (each element of the vector represents a purification step)\n\n# 1. Definition of the main vectors:\nprot.total <- c(6344, 302, 145, 34, 10, 3.8) # protein, mg\nativ.tot <- c(200, 122, 106, 70, 53, 24) * 1000 # activity, U\n\n# 2. Construction of the spreadsheet:\npurif.plan <- data.frame(prot.total, ativ.tot)\npurif.plan\n```\n\n| The spreadsheet now forms an R dataset. There are other simple ways to create a dataset, such as using the 'cbind' function (to join columns) or 'rbind' (to join rows):\n\n```{r plan purif cbind}\npurif.plan2 <- cbind(prot.total, ativ.tot)\npurif.plan2\n```\n\n| Regardless of the procedure, you can change the column names, as follows:\n\n```{r plan purif colnames}\n# Editing column names\ncolnames(purif.plan2) <- c(\"totalProt\", \"enzAtiv\")\npurif.plan2\n```\n\n| As in a conventional spreadsheet, it is also possible to create new vectors calculated from the initial ones:\n\n```{r plan purif calc}\npurif.plan3 <- data.frame(prot.total, ativ.tot, ativ.tot / prot.total)\noptions(digits = 1) # option for no. of decimal places\ncolnames(purif.plan3) <- c(\"prot.total\", \"ativ.tot\", \"ativ.specif\")\nrownames(purif.plan3) <- c(\"extr.bruto\", \"NH4SO2\", \"acetone\",\n\"Sephadex G-100\", \"DEAE-cellulose\", \"C8-phase rev\")\npurif.plan3\n```\n\n| The spreadsheet can also be edited in its values, simply by assigning a new name so that the changes are saved:\n\n```{r plan purif edit, eval=FALSE}\n# Simple spreadsheet editing (changes in values ​​and column names)\n\npurif.plan4 <- edit(purif.plan3) # or data.entry( )\n```\n\n| Of course, you can also import data from a spreadsheet already created in another program. Example for a spreadsheet saved as *CSV*:\n\n```{r plan purif import, eval = FALSE}\n# Importing data from another spreadsheet (CSV):\n\n# 1. Import with the name of the desired spreadsheet:\npurif.plan5 <- read.table(\"planilha.csv\", header = T, sep = \",\")\n\n# 2. Import with the search screen for the desired spreadsheet:\npurif.plan5 <- frame <- read.csv(file.choose())\n```\n\n| A large number of operations can be performed on spreadsheets in 'R', such as insertion, deletion, modification, aggregation (*merge*), filtering, subset extraction, mathematical operations and statistical calculations (mean, standard deviation, etc.). You can also convert the spreadsheet into a more visual table using the 'tibble' library, part of a set of packages used in data science called *Tidyverse*:\n\n```{r plan purif convert tibble}\nlibrary(tibble)\npurif.plan6 <- as_tibble(purif.plan3)\npurif.plan6\n```\n\n| The *Tidyverse* comprises an ecosystem of 'R' packages that share the same philosophy, grammar and data structure. These packages include 'tibble' (tables), 'ggplot2' (high-quality visual graphics), and 'dplyr' (data manipulation). As for 'dplyr', it is quite flexible to create and edit spreadsheets, which are converted to tables, as follows for the purification example above:\n```{r plan purif dplyr}\n# Enzyme purification table with 'dplyr' package:\n\nlibrary(dplyr)\npurif.plan7 <- mutate(purif.plan, ativ.esp = ativ.tot / prot.total)\npurif.plan7\n```\n\n| Note that with the 'dplyr' package, inserting a new column did not require a new array for column names ('colnames'). In addition, the final spreadsheet was created using the grammar of the 'tibble' package from the *Tidyverse*. This facility also extends to the spreadsheet editing and filtering processes, such as the extraction of a modified column:\n\n```{r plan purif alter column}\nativ.tot.kU <- transmute(purif.plan7, ativ.tot = ativ.tot / 1e3)\nativ.tot.kU # specific activity vector in U x 10^3\n```\n\n| This way you can build a complete purification table, listing, in addition to the *specific activity*, the *purification level* (how many times the specific activity increased in relation to the initial sample) and the *yield* obtained (how many times the target enzyme content decreased in relation to the initial sample - remaining activity):\n\n```{r}\npurif.plan8 <- mutate(purif.plan7,\npurif = ativ.esp / ativ.esp[1], # purification level\nrend.perc = 100 * ativ.tot / ativ.tot[1]\n) # percentage yield\n\n# Converting to the table...\nlibrary(knitr)\nknitr::kable(purif.plan8, caption = \"Purification table for an enzyme\", \"pipe\")\n```\n\n| Additionally, 'R' has some packages that speed up the creation/editing of spreadsheets in an interactive way, closer to a conventional spreadsheet, among which the 'DT' package stands out, a library written in *JavaScript* that produces an editable spreadsheet in *HTML*:\n\n```{r plan purif DT, eval=FALSE, include=TRUE}\nlibrary(DT)\npurif.plan9 <- as.data.frame(purif.plan8)\nrownames(purif.plan9) <- c(\"extr.bruto\", \"NH4SO2\", \"acetone\",\n\"Sephadex G-100\", \"DEAE-cellulose\",\n\"C8-phase rev\") # converts the purification table\n# into a spreadsheet for use by the DT package\ndatatable(purif.plan9) %>% formatRound(1:5, 1) # columns with 1 decimal place\n```\n\n| Since this is an interactive HTML output, the result of the code snippet must be omitted for correct compilation by 'R' (eval=FALSE, include=TRUE).\n\n| The 'DT' library allows, among other things, reordering, filtering, and even editing of values, interactively (just click on the desired cell):\n\n```{r plan purif DT edit, eval=FALSE, include=TRUE}\nDT::datatable(purif.plan9, editable = \"cell\")\n```\n\n## Interaction of oxygen with myoglobin and hemoglobin\n\n| Both human myoglobin (*PD 1MBO*) and hemoglobin (*PDB 6BB5*) are proteins that transport molecular oxygen. Hemoglobin, with a quaternary structure, transports it from the lungs to the tissues, while myoglobin, tertiary, distributes it between them. Its oxygen saturation curves are well known in textbooks, and learning about them can add value when simulated.\n\n| Thus, the binding of O$_{2}$ to myoglobin can be considered as a saturation fraction *y* given as a function of its half-saturation at 50% O$_{2}$ pressure (dissociation constant *$K_{50}$* of 2.8 mmHg).\n\n$$\ny=\\frac{pO_2}{K_{50}+pO_2}\n$$ {#eq-Mb}\n\nOn the other hand, the value of *$K_{50}$* for hemoglobin is 26 mmHg, but its function is expressed differently from that of myoglobin:\n\n$$\ny=\\frac{pO_2^{nH}} {K_{50}^{nH}+pO_2^{nH}}\n$$ {#eq-Hb}\n\nIn this @eq-Hb, *nH* represents the Hill cooperativity coefficient, which summarizes the energy distributed among the four microscopic dissociation constants of O$_{2}$ to the four porphyrin centers of hemoglobin (*heme* groups). Simulating both curves:\n\n```{r, fig.cap=\"Oxygen saturation isotherm for myoglobin (solid line) and hemoglobin (dotted line), indicating the intercept at 50% pO2 (half saturation).\"}\nK50 <- 2.8\ncurve(x / (K50 + x),\nxlim = c(0, 100),\nxlab = \"pO2 (mmHg)\", ylab = \"y\", lty = \"dotted\"\n)\n\nK50 <- 26\nnH <- 2.8\ncurve(x^nH / (K50^nH + x^nH),\nxlim = c(0, 100),\nxlab = \"pO2 (mmHg)\", ylab = \"y\", col = \"red\",\nadd = TRUE\n) # \"add\" allows you to add curves to the graph\nabline(0.5, 0, lty = 2) # add baseline at half saturation\n```\n\n| As mentioned in the previous paragraph, the four binding centers with molecular oxygen are related to four microscopic dissociation equilibrium constants, from *K1* to *K4*. Simplifying the value of pO$_{2}$ to *L*, ligand, it is also possible to represent the binding of O$_{2}$ to hemoglobin by the Adair equation [@pauling1935oxygen]:\n\n$$\ny=\\frac{K1*L+2*K2*K1*L^2+3*K3*K2*K1*L^3+4*K4*K3*K2*K1*L^4} {4*(1+K1*L+2*K2*K1*L^2+3*K3*K2*K1*L^3+4*K4*K3*K2*K1*L^4)}\n$${#eq-HbKmicro}\n\n| It turns out that there is a statistical effect associated with the interaction under study, since O$_{2}$ has 4 initial sites of interaction with hemoglobin [@tyuma1973analysis], values ​​that reduce until the saturation of the 4 sites. Thus, it is necessary to account for the microscopic constants *Ki* due to this statistical compromise:\n\n$$\nKi_{corr} = \\frac{i}{N-1+i}*Ki\n$$ {#eq-HbKSta}\n\n| In R, this can be aided by a *for* loop:\n\n```{r}\nK <- c(0.011, 0.016, 0.118, 0.400) # vector of microscopic constants for\n# dissociation of Hb to O2\nL <- seq(1, 201, 2) # vector of O2 contents\n\nKcorr <- c() # initialize an empty vector to output the corrected Ki vector\nN <- 4 # declare the number of sites in Hb\nfor (i in 1:N) Kcorr[i] <- i / (N - i + 1) * K[i]\nKcorr # returns the vector of Ki values corrected for the statistical effect\n```\n\n| Note that the corrected *Ki* values are in a proportion that follows the availability of sites, from 4 times lower for the 1st site (highest binding), up to 4 times greater than for the 4th site (lowest binding). It is now possible to apply @eq-HbKmicro using the constants calculated as follows:\n\n```{r, fig.cap=\"Hemoglobin oxygen saturation isotherm by the Adair equation.\"}\nnumer <- K[1] * L + 2 * K[2] * K[1] * L^2 + 3 * K[3] * K[2] * K[1] * L^3 +\n4 * K[4] * K[3] * K[2] * K[1] * L^4\ndenom <- 1 + numer\ny <- numer / denom\nplot(L, y, xlab = \"pO2\", type = \"l\", col = 2)\n```\n\n| Finally, it is also possible to obtain the binding curve using a variation of *for* loop in which the @eq-HbKmicro is produced by iteration, as follows [@bloomfield2009computer]:\n\n```{r, fig.cap=\"Hemoglobin oxygen saturation curve obtained by iteration of the Adair equation, as corrected for statistical effect.\"}\n# Calculation of y in each L\nYi <- function(L, Kcorr) {\nN <- length(Kcorr)\nconc <- c()\nconc[1] <- L * Kcorr[1]\nfor (i in 2:N) conc[i] <- conc[i - 1] * L * Kcorr[i]\nnumer2 <- sum((1:N) * conc) / N\ndenom2 <- 1 + sum(conc)\nreturn(numer2 / denom2)\n}\n# Calculation of y to vector L\nY <- function(L, Kcorr) {\nYY <- c()\nfor (j in 1:length(L)) YY[j] <- Yi(L[j], Kcorr)\nreturn(YY)\n}\n# Application of the function of y to L and graph\nYfinal <- Y(L, Kcorr)\nplot(L, Yfinal, type = \"l\", col = 2, xlab = \"pO2\", ylab = \"y\")\n```\n\n| Note that there are minimal differences between the curves obtained by the different procedures, due to the different algorithms used.\n\n## Some R packages for studying proteins\n\n| Some R packages are quite useful in studying proteins, especially the `seqinr` library seen in the *Amino Acids* chapter, which computes various values ​​and information for protein sequences, such as *pI*, hydroxypathy index, residue distribution, among others. The project website [^seqinrSitio-1] contains detailed information for its use. Using the same procedure to obtain the *FASTA* sequence for lysozyme from the *Amino Acids* chapter (code CAA32175 on the *NCBI* site), one can obtain an extensive set of protein information, as exemplified below:\n\n[^seqinrSite-1]: Seqinr project site: http://seqinr.r-forge.r-project.org/\n\n```{r}\nlibrary(seqinr)\nlysozyme <- c(\"KVFERCELARTLKRLGMDGYRGISLANWMCLAKWESGYNTRATNYNAGDRSTDYGIFQ\nINSRYWCNDGKTPGAVNACHLSCSALLQDNIADAVACAKRVVRDPQGIRAWVAWRNRCQNRDVRQYVQGCGV\")\nseq_liso <- s2c(lysozyme) # convert amino acid string sequence to\n# the seqinr pattern (character vector)\nseq_liso2 <- seq_liso[seq_liso != \"\\n\"] # elimination of spaces required by\n# seqinr from copy/paste procedure.\nseq_liso2\npmw(seq_liso2) # molecular weight of the protein\naaa(seq_liso2) # residue distribution\nAAstat(seq_liso2, plot = TRUE) # distribution graph, composition\n# and proportion of residues, pI value\n```\n\n| Other functions of `seqinr` include conversion of amino acids to 1- and 3-letter abbreviations (`a` and `aaa`, respectively), listing of 544 physicochemical properties of the 20 protein amino acids (`aaindex`), `pK` (self-explanatory, and seen previously), and isolated computation of *pI* (`computePI`) and molecular mass (`pmw`), in addition to several others, both for proteomics and genomics.\n| Another interesting R package for studying proteins is *Peptides* [^Peptides-1], which also computes several physicochemical properties for amino acid sequences, in addition to enabling plotting integration with the *GROMACS* molecular dynamics package. As for `seqinr`, `Peptides` requires conversion of the sequence into *string* for the recognized vector pattern. The package's functions include the computation of 66 descriptors for each amino acid in a sequence (`aaDescriptors`), the composition of the sequence by residue classification (`aaComp`), the computation of the aliphatic index (`aIndex`), the hydrophobicity index (`hydrophobicity`), the instability index (`instalIndex`), the mass/charge ratio (`mz`), molecular mass (`mw`), and pI (`pI`), among others.\n| Among the packages more focused on comparative studies and visualization of structures, as well as for bioinformatics and chemogenomics descriptors, it is worth mentioning `Bio3d`, `Autoplotprotein`, `protr`, `BioMedR`, and `UniprotR`, among many others.\n\n[^Peptides-1]: Peptides package: https://cran.r-project.org/web/packages/Peptides/index.html\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"output-file":"proteinas_en.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":{"light":"flatly"},"title":"Proteins","bibliography":["referencias.bib"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}