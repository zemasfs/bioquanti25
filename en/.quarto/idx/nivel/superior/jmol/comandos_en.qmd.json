{"title":"Commands","markdown":{"yaml":{"title":"Commands","toc":true},"headingText":"Changing the interface language & file directory","containsRefs":false,"markdown":"\n\n<!-- Google tag (gtag.js)-->\n\n\n| *Jmol* has a multitude of commands for viewing and studying molecular models. Most of these commands are accessed through the *Jmol* main *Menu*, or by right-clicking on the program's main screen or the *JSmol* applet on the internet. | However, *scripting* allows the execution of a much larger set of actions via the *Console*, both of the installed program and of the *applet*, in addition to allowing the listing of consecutive actions generating specific visualizations, calculations and animations, and even *programming.* In the latter case, via the *Jmol scripting* language. These commands and the programming language are explained on the website of its developers, [Jmol - Documentation & scripting](https://chemapps.stolaf.edu/jmol/docs/?ver=14.32#plot){target=\"_blank\"}, with substantial examples and illustrative and interactive *links*. The content of this chapter aims to summarize the main commands for viewing, studying, importing and exporting, calculations and animations of models via the *Console* or via *script*.\n| As a sequence of commands for a more complex observation or animation, **you can create the script** in any simple text editor, **saving it with the \".spt\" attribute**. The *script* can be loaded as a file or pasted into the *Console* field.\n| *Jmol* commands do not distinguish between singular or plural, or between upper or lower case, and both forms can be used, such as *show group* or *Show groups*.\n| An additional note: when creating a *script*, it is recommended that explanations be provided in command lines; to do so, simply use the hashtag sign (*\\#*) after the commands.\n\n\n### Language\n\n| The *Menu* language and the command output (results) can be changed as follows. Remember, however, that the commands themselves refer to computational algorithms; this way, it is not possible to change the language of the commands.\n\n\n```{r, eval=FALSE}\nset language = code # pt (Portuguese), es (Spanish), en (English), fr (French), de (German), etc...\n```\n\n| Note: if you are unable to do so, start *Jmol* by opening a CMD (*Windows*) or Terminal (*Linux*) in the program directory folder, and type, for *Portuguese*:\n\n```{r, eval=FALSE}\njava -Duser.language=pt -jar Jmol.jar\n```\n\n### Directory\n\n```{r, eval=FALSE}\ncd # shows current directory\ncd ? # open window to default directory\ncd path # change default directory (e.g. ../temp)\nset defaultDirectory \"/home/\" # default directory (for applet)\n```\n\n## General commands\n\n```{r, eval=FALSE}\nHelp: help # help zoom\nExit: quit\nUndo: undo\nRedo: redo\nReturn to original model (position, size, centering and orientation): reset\nProgram initialization: initialize\nCommand history: history on or history off\nMinimization by force fields of the model: minimize\n```\n\n| Try some of the above commands with the *applet* for *JSmol* that follows:\n\n[![](jsmol.png){width=\"20%\"}](https://chemapps.stolaf.edu/jmol/jsmol/simple.htm)\n\n## Obtaining molecular models\n\n### One model\n\n```{r, eval=FALSE}\nFrom the internet:\nmolecules in general: load $cholesterol\nmolecules from the PDB (Protein Data Bank): load=9pap\nligands from the RCSB website: load =ligand/hem\ncompounds from the PubChem website: load \":nafamostat\"\n\nFrom the computer (files must be in the root directory or preselected by \"cd\" - see above):\nload \"1aay.pdb\"\n```\n\n### More than one model\n\n```{r, eval=FALSE}\nSeparate: load files \"1a2t.pdb\" \"1aay.pdb\"\nsubmit the 1st model: model 1 or model 1.1\npresent the 2nd. model: model 2 or model 2.1\nshow all models: model* or frame*\nTogether: load append \"1a2t.pdb\" \"1aay.pdb\"\n```\n\n\n## Building simple molecules using SMILES\n\n| *SMILES*, an abbreviation for *“Simplified molecular-input line-entry system”*, allows you to represent the structure of atomic models using symbols and text (ASCII characters).\n\n\n| Try this formatting at the address below.\n\n```{r, eval=FALSE}\nhttps://chemapps.stolaf.edu/jmol/jmol.php?model=C\n```\n\n\n| Then replace the *model* in the *link*, *“model=”* with the following *SMILES* codes, alternatively:\n```{r, eval=FALSE}\n\n1. Single bond: CC, CN, CO\n2. Double bond: C=C, C=N, C=O\n3. Triple bond: N%23N, CC%23C\n\nNote: the code for the triple bond is intended to bypass the *SMILES* command, *“#”*, which is interpreted differently in internet addresses.\n```\n\n\n## Displaying models:\n\n```{r, eval=FALSE}\nView: display 2.1\nHide: hide 1.1\nRemove models: zap\nShading: set ambient 45 (0-shadow; 100-no shadow)\n```\n\n## Displaying model information (*show* command)\n\n```{r, eval=FALSE}\nDisplay nothing: show none\nModel: show model\nAtoms: show atom\nChains (protein or nucleic acid): show chain\nStructural minimization information: show DSSP\nSurfaces (molecular, electrostatic): show isosurface\nGroups: show group\nModel information: show info\nProtein primary sequence: show sequence\nHistory of commands: show history\nResidues (protein): show residues\nMolecular orbital: show mo\nInternet path: show url\nFull PDB file information: show file\n```\n\n### Molecular databases\n\n| There are several databases for rendering molecular models, and with the possibility of saving the file for use with *Jmol*.\n\nNotable among these are [PubChem](https://pubchem.ncbi.nlm.nih.gov/){target=\"_blank\"} or [DrugBank](https://go.drugbank.com/){target=\"_blank\"} for *small molecules*, and [RCSB - Protein DataBank (Research Collaboratory for Structural Bioinformatics)](https://www.rcsb.org/){target=\"_blank\"} for macromolecules. There is also the [IUPHAR/BPS Guide to PHARMACOLOGY](https://www.guidetopharmacology.org/), which allows indirect access to both micro and macromolecules.\n| In any of these, simply look for a field to *download* *3D* molecular models. *Jmol* accepts around **47 different file types** for structural rendering, including *PDB, MOL, CIF, SDF, XYZ, SMILES, and AMBER*.\n\n## General operations\n\n```{r, eval=FALSE}\nResetting the model coordinates: reset (size and centering): Shift+ double click (or *reset* in the *Console*)\n\nRemoving the Jmol *logo* from images: set frank off\n\nBackground: background white\n\nModel resolution: set ambient 10\n```\n\n## Mouse commands\n\n| To open the *Menu* of options for viewing, calculations and surfaces: right click\n\n### Model movements\n\n```{r, eval=FALSE}\nSimple rotation: click and drag in any direction\n\nRotation around the same axis up to 360$^{o}$: Shift+right click\n\nTranslation of the structure: Ctrl+right click\n\nGeneral magnification (zoom): Shift+left click and drag - zoom in/out - (or mouse, middle button). \n```\n\n## Motion commands\n\n```{r, eval=FALSE}\nspin 10 # rotational, with a speed of 10 degrees per frame\nspin z -15 # (z axis)\nrotate 20 # 20 degrees\nrotate x 90 # x axis\ntranslate 50 # value represents the percentage of the window (100 - outside; 0 - center)\n```\n\n## Saving and exporting models (*write*)\n\n```{r, eval=FALSE}\n# (saves as image)\nModel image:\ndefault (png): write model-name\nwith specifications: write PNGJ 2000 2000 \"big.png\"\nothers (jpg, pdf): write name.jpg\nall models: write frames* \"all.jpg\"\nModel coordinates\nwrite name.mol # or other attribute (e.g. pdb)\nModel state (changes after loading): write molecule.spt # of \"script\"\n```\n\n### Copying to the clipboard\n\n| The model image can be copied through the program's main *Menu*.\n\n### Reproducing a model from the internet that does not allow saving\n\n| Sometimes some *sites* make molecules available in the \\*mol or \\*pdb attribute for viewing and studying, but without the possibility of downloading the file. In these cases, it is possible to obtain the model coordinates, copy them into a notepad, and save the file for reading by *Jmol*, as \\*\\mol, for example.\n\n```{r, eval=FALSE}\n1. View the desired model on the site;\n2. Right-click and select Console.\n3. Click again, select Show and:\nExtract mol data.... or\nFile contents\n```\n\n| As a result, the *Console* will display the data for copying to a text file. Simply save it as \\*.mol for future viewing in Jmol.\n\n## Quantities\n\n### Calculating distances and angles (*measure*)\n\n| In addition to the simple and interactive use of the mouse to calculate distances (double right-click on the 1st atom and drag to the 2nd atom) or angles (3 mouse clicks), it is possible to obtain the same information through the *Console*.\n\n```{r, eval=FALSE}\nDistance: measure no. atom1 no. atom2\nAngle: measure no. atom1 no. atom2 no. atom 3\nNote: to obtain the no. of the atom, simply click on the desired point of the model\nTorsion angle: measure atom1 atom2 atom3 atom4\n\nMeasurements: measure on..or off...or delete\nChoose the unit of measurement: set measure nm # or pm, angstroms, au (Bohr atomic unit)\n```\n\n### Obtaining & viewing quantities\n\n```{r, eval=FALSE}\nHydrogen bonds: calculate hbonds (or...hbonds calculate)\nFormal (effective) charges: calculate formalcharge # to label: label %C\nPartial charges: calculate partialcharge # to label: label %P\nSecond structures in a protein: calculate structure # DSSP algorithm - Define Secondary Structure; note: the representation disappears, and it is necessary to type the command again for it to return\nAll bonds in the model and their respective distances: measure allconnected (*)(*)\n```\n\n## Changing representations\n\n| There are several ways to render structures in *Jmol*. The commands below summarize this capability:\n\n```{r, eval=FALSE}\nwireframe, backbone, trace, strands, cartoon, ribbons, meshriboon, rockets, cpk (or spacefill), ball&stick (only through the Menu, or through the combination below in the Console)\n\nTo display a single shape: wireframe only\nTo hide a shape: backbone off\nTo render as \"ball&stick\": wireframe only;wireframe reset;spacefill reset\n```\n\n| The representations render the structure by the size of its atoms. The rendering by *spacefill*, for example, is expressed as a function of the *van der Waals radius* of the atom. For example:\n\n```{r, eval=FALSE}\nspacefill on / off\nwireframe 0.5 # 0.5 Angstrom (the \".\" refers to the absolute value)\nbackbone 50 # 50/250 Angstrom, or 0.2 Angstrom (no dot refers to relative value)\ncartoon 50% # 50% larger than default\nspacefill 2 # 2/250 Angstrom = 0.008 Angstrom (note no dot)\nspacefill 2.0 # 2 Angstrom (note dot)\n```\n\n### Clipping & shading\n\n```{r, eval=FALSE}\nClip in view: slab on; slab 30\nDepth view: depth 30\n```\n\n### Whether to display hydrogen or not\n\n```{r, eval=FALSE}\nInsert into model: set pdbAddHydrogens\nRemove from model: set pdbAddHydrogens false\n```\n\n### Displaying disulfide bonds (proteins)\n\n```{r, eval=FALSE}\nssbonds on or ssbonds off\nssbonds 40 # renders as rods, with a diameter of 40/250 Angstrom\nssbonds 0.5 # renders with a diameter of 0.2 Angstrom\n```\n\n| Just to practice, try some of the above commands with the *applet* for *JSmol*, as follows:\n\n[![](jsmol.png){width=\"20%\"}](https://chemapps.stolaf.edu/jmol/jsmol/simple.htm)\n\n## Selecting colors\n\n| The default option for model colors is *CPK (Corey, Pauling, Koltun)*, for carbon (gray), nitrogen (blue), phosphorus or sulfur (yellow), hydrogen (white), iodine (violet), etc. However, it is possible to change colors globally in the model, or specifically for selected groups of atoms. The program accepts the command *color* or *colour*.\n\n```{r, eval=FALSE}\ncolor [255,125,350] # specific color\ncolor bonds # apply the color without needing to specify the representation\ncolor [xFF00FF] # specific color\ncolor cpk # program default\ncolor molecule # all atoms connected by a bond\ncolor formalcharge\ncolor partialcharge\ncolor amino # for amino acids\ncolor structure # for secondary structure\nProteins: red (alpha-helix), yellow (beta-sheets), blue (turns), white (rest)\nNucleic acid: violet (DNA), reddish (RNA)\ncolor chain: chains\ncolor inherit: objects inherit the color of their associated atoms\ncolor shapely: color scheme that includes nucleotides\ncolor group: rainbow gradient (blue; N- or 5'-terminal; red; C- or 3'-terminal)\n```\n\n### Specific colors\n\n| An atom or group of atoms can also be assigned a specific color, as follows:\n\n```{r, eval=FALSE}\nAliceBlue,AntiqueWhite,Aqua,Aquamarine,Azure,Beige,Bisque,Black,\nBlanchedAlmond,Blue,BlueViolet,Brown,BurlyWood,CadetBlue,Chartreuse,\nChocolate,Coral,CornflowerBlue,Cornsilk,Crimson,Cyan,DarkBlue,DarkCyan,\nDarkGoldenRod,DarkGray,DarkGrey,DarkGreen,DarkKhaki,DarkMagenta,\nDarkOliveGreen,Darkorange,DarkOrchid,DarkRed,DarkSalmon,DarkSeaGreen,\nDarkSlateBlue,DarkSlateGray ,DarkSlateGrey,DarkTurquoise,DarkViolet,\nDeepPink,DeepSkyBlue,DimGray,DimGrey,DodgerBlue,FireBrick,FloralWhite,\nForestGreen,Fuchsia,Gainsboro,GhostWhite,Gold,GoldenRod,Gray,Grey,Green,\nGreenYellow,HoneyDew,HotPink,IndianRed,Indigo,Ivory,Khaki,Lavender,\nLavenderBlush,LawnGreen,LemonChiffon,LightBlue,LightCoral,LightCyan,\nLightGoldenRodYellow,LightGray,LightGrey,LightG reen,LightPink,LightSalmon,\nLightSeaGreen,LightSkyBlue,LightSlateGray,LightSlateGrey,LightSteelBlue,\nLightYellow,Lime,LimeGreen,Linen,Magenta,Maroon,MediumAquaMarine,MediumBlue,\nMediumOrchid,MediumPurple,MediumSeaGreen,MediumSlateBlue,MediumSpringGreen,\nMediumTurquoise,MediumVioletRed,MidnightBlue,MintCream,MistyRose,Moccasin,\nNavajoWhite,Navy,OldLace,Olive,OliveDrab ,Orange,OrangeRed,Orchid,PaleGoldenRod,PaleGreen,PaleTurquoise,PaleVioletRed,PapayaWhip,PeachPuff,Turkey,Pink,Plum,\nPowderBlue,Purple,Red,RosyBrown,RoyalBlue,SaddleBrown,Salmon,SandyBrown,\nSeaGreen,SeaShell,Sienna,Silver,SkyBlue,SlateBlue,SlateGray,SlateGrey,Snow,\nSpringGreen,SteelBlue,Tan,Teal,Thistle,Tomato,Turquoise,Violet,Wheat,White,\nWhiteSmoke,Yellow,YellowGreen.\n```\n\n## Labeling the model (*label*)\n\n```{r, eval=FALSE}\nLabel on/off: label on...or label off\nString: label %c\nFormal charge: label %C\nPartial charge: label %P\nAmino acid residue in protein: %n\nResidue no.: %r\nAtom: %a\nAtom identifier no.: %i\nElement symbol: %e\nString: %c\n```\n\n| To view a specific set of atoms, such as residues in a protein, you can use:\n\n```{r, eval=FALSE}\nselect (Ser195,His57,Asp102) and *.ca; label \"\\%n \\%R\";color label orange ;set labelfront\n```\n\n| Some specific operations also allow labeling.\n\n```{r, eval=FALSE}\nlabel binding site # label with the expression\nlabel binding | site # label with the expression, separated by lines (\"|\" is the \"pipe\" command)\n```\n\n| *Jmol* also allows you to label a specific atom, residue, interaction or reaction site, or some group for better identification and exploration of the model. To do this, you can select the structure by *select*, followed by the proposed label. For example:\n\n```{r, eval=FALSE}\nselect pro31 # selection of the Proline residue at position 31 of the protein sequence\nlabel Proline-31\nset echo top left; echo \"Model 1\" # insertion of text on the screen\nselect all; label on # names all atoms with symbol and atomic number\n```\n\n## Selecting parts of the model\n\n| To select a general group of atoms, simply combine with the mouse *Shift+left click+drag* for the selected group (you must click on the icon that represents it in the menu first). For a more specific selection, you can use some of the specific or predefined *atom expressions*, as below:\n\n```{r, eval=FALSE}\nNature of the molecule:\nall, none, protein, nucleic, dna, rna, carbohydrate, hetero, ligand, solvent, water or hoh, ions, hem, amino\n\nChemical element\nBy name: oxygen, nitrogen, carbon\nBy symbol: _N, _C, _Fe\nBy atomic no.: elemNo=7, or atomNo=5\nBy no. atom identification in the sequence (serial): atomNo<50\n\nPart of the molecule:\nbackbone, sidechain, :b (for chain), spine\n\nResidue type\n3-letter abbreviation for amino acids, acidic, basic, polar, neutral, charged, purine, pyrimidine, large, small, buried, surface, cyclic, hydrophilic, hydrophobic, aromatic, cystine, aliphatic, spine, base\n\nStructure 2a. in proteins\nhelix, sheet, turn\n```\n\n| The general commands for using the above expressions or combinations of them are, basically:\n\n```{r, eval=FALSE}\nselect, restrict, hide, display, delete\n```\n\n| Each expression must be enclosed in parentheses. You can also apply *boolean operations* (*or, and, but not*, or *=, \\<, \\>, \\<=, \\>=, !=*).\n\n| The *restrict* command is irreversible in nature, while the *hide* command is reversible in rendering. followed by the desired expression. Some examples:\n\n| Here are some examples:\n\n```{r, eval=FALSE}\nRestrict command\nrestrict helix # only keeps the helices of the secondary structure\nrestrict ligand # only the ligand\nrestrict not ligand # only the protein without prosthetic groups\nrestrict 42-60 # only keeps the indicated residue sequence\nrestrict f6p # only keeps the identified group (a ligand, in this case)\nrestrict not(:a, :b) # keeps chains other than \"a\" and \"b\"\n\nSelect command\nselect Tyr\nselect polar\nselect all # selects all atoms\nselect none # does not select any atoms\nselect bmp,amp # selects two ligands\nselect (bmp, amp) and oxygen\nselect hem and :b # selects the heme group of chain \"b\"\nselect hem and not iron :b # selects the heme group of chain \"b\", omitting Fe\nselect */2 # all atoms of model 2\nselect connected(oxygen) # all atoms bonded to an oxygen\nselect ser70 :A .ca # alpha carbon of serine no. 70 of chain A\nselect hetero and not solvent # heteroatoms except water\nselect remove group hetero and not water # only water\nselect hetero and not ligand # heteroatoms except ligand\nselect buried only # only protein core residues\nselect helix or backbone # select helices or protein backbone\nselect not helix # select other 2nd protein structures (turn, sheet)\nselect 62 and(sidechain or alpha) # sidechain or alpha carbon of residue 62\nselect ser70.ca # alpha carbons of serine no. 70\nselect ser70 :a.ca # alpha carbons of serine no. 70 of chain \"a\"\nselect (lys,arg) # only Lys and Arg residues\nselect (lys,arg) and :b # Lys and Arg residues of chain \"b\"\nselect 19-32 :y # sequence of residues of chain \"y\"\nselect asp47 # Asp residue at position 47\nselect [asp]47 :y # asp47 residue of chain \"y\"\nselect (10 or 25) and backbone\nselect resNo>14 and resNo<25 and *.CA # alpha carbons of residues 14 to 25\nselect hoh.o/2 # oxygen of water molecules in model 2\nselect (14,16,18,20) # the numbered residues\nselect backbone and *:b # the backbone of chain \"b\"\nselect backbone and not *:b # the backbone of all chains except \"b\"\nselect not hidden...select displayed # everything that is not hidden\nselect not selected # everything that was not previously selected\nselect carbon and not selected # carbon atoms not previously selected\n\nDelete command\ndelete(calcium,nadph)\n```\n\n### Special selections\n\n#### *within* command\n\n| This command allows a recursive selection, that is, a selection within a selection.\n\n```{r, eval=FALSE}\nselect within (5, (bca,amp)) # selects two ligands that are 5 Angstroms away from the selected group of atoms\nselect within(3.0, _Fe) # all atoms within 3 Angstroms of the iron atom\n```\n\n#### *define* command\n\n| Allows you to define a group of atoms for specific rendering or observation. After defining, simply use *select* or another command to change the model.\n\n```{r, eval=FALSE}\ndefine test (arg10) # select only Arg10\ndefine test (arg10 or asn46) # select both residues\ndefine test (ser195 or asp102 or his57)\ndefine Site within(3.0, _Cu) # 3 Angstroms away from copper atom\ndefine PointX within(5.0,arg31) # 5 Angstroms away from Arg31\ndefine neighbors selected # previously selected\n```\n\n#### Commands *selected*, *hidden*, *displayed*\n\n| Allows you to direct an action to the group of atoms already selected, hidden or displayed, respectively.\n\n## Model magnification (*zoom*)\n\n| There are two basic commands in *Jmol* for magnification:\n\n1. *zoom* : (expression) size\n2. *zoomTo* : time (expression) size\n\n| The second command allows an animation of the model, which will be explained in the homonymous section below. Here are some examples for the *zoom* command.\n\n```{r, eval=FALSE}\n2x magnification: zoom in\n3x magnification: zoom \\*3\n2x reduction: zoom out\n3x reduction: zoom /3\nRemove magnification: zoom off\nRestrict ligand and magnification: restrict ligand; zoom 0\nzoom 100: restores the initial size\n```\n\n## Surfaces\n\n| *Jmol* allows you to render some types of surfaces around the atoms of the model. For macromolecules it should be noted that rendering will take longer.\n\n```{r, eval=FALSE}\n\ndots on / off \\# van der Waals surface dots only \\# only vdw surface present (without model) dots vanderwaals...or dots vdw dots ionic\n\nisosurface on/off # molecular surface\nisosurface solvent # excluding solvent\nisosurface molecular # including solvent\nisosurface molecular 5 # surface at a given VDW radius\nisosurface sasurface # surface accessible solvent\nisosurface mep # \"molecular electrostatic potential\"\nisosurface map vdw # Van der Waals surface\nisosurface map mep # electrostatic potential\nisosurface molecular map property PartialCharge # or temperature, vanderwaals\n\ngeosurface on/off # molecular surface geodesic (curved) geosurface only # only the surface, without model geosurface vdw\ngeosurface ionic geosurface 5 # value in Angstrom\n\nNote: To visualize the surfaces including the solvent, you can use the \"set solvent on\" command first.\n```\n\n## Graphs\n\n| Some two- and three-dimensional graphs can be generated from simple *Jmol* commands. To return to the original model, issue the *model 1* command. Some examples:\n\n```{r, eval=FALSE}\nplot properties resno partialcharge # resno = residue number (plots after command to calculate surface charge - see above)\nplot properties phi psi resno # 3D plot with dihedral angles against residue no. plot rama...or...\nplot ramachandran # Ramachandran plot for structure 2a. in proteins\nNote: to view the phi and psi angles in the model (not in the plot), type: draw rama (draw off to hide)\n\nOther properties: hydrophobicity, mass, temperature, radius, occupancy, chaino\n```\n\n## Creating and reading scripts\n\n| \"Scripting\" allows the observation and analysis of a specific part of the model under study, by composing code snippets as command lines. In this way, the *script* resembles an *algorithm* with a succession of commands. A *script* can be loaded by calling program files (*File, Open*), or even by dragging the file to the program's screen area.\n\n| A *Jmol* *script* is based on a *Java Script* dialect, and can be driven by a sequence of commands on each line of a simple text file, saving it as *.spt*.\n\n| On the other hand, *Jmol* has its own construction and testing environment, *Script Editor*, accessible through the main *Menu*. In this environment, it is possible to create, open, create, check, and run a *script*.\n\n| The *Editor* can be used when there are several command lines, for better visualization of the algorithmic sequence. In this case, it is also possible to include comments, using:\n\n```{r, eval=FALSE}\n/* comment */\nor\n// comment //\nor\n# comment\n```\n\n| In the *Programming* section, some *scripts* created in the *Editor* will be presented.\n\n| It is also valid to copy/paste some code snippets in the *Console* or *Jmol/JSmol*, separating the commands with *semicolons* on successive lines. This way, the *Script Editor* is simulated in the *Console* itself.\n| It is also possible through *Jmol* to define an initial *script* to be run when the program is opened. To do this:\n\n```{r, eval=FALSE}\nset defaultLoadScript \"commands\"\n```\n\n## Mutation\n\n| It is also possible to observe consequences of mutating specific residues in a model, such as weak interactions (electrostatics or hydrogen bonds, for example).\n\n```{r, eval=FALSE}\n\nmutate 33Lys \\# specifically changes position 33 of the primary sequence to Lysine mutate Ala34 \\~W \\# alteral Ala to Trp mutate(1:3) \\~GAL \\# changes the first three positions in the protein to Gly, Ala and Leu\n```\n\n## Visualizing regions with `strut` function\n\n| This function allows you to connect atoms in the structure of a protein, showing a dash between them.\n\n```{r, eval=FALSE}\nselect atomno=1392 or atomno=1403\nconnect\nstrut\nstrut 2.0\ncolor strut pink\n```\n\n## Animations\n\n```{r, eval=FALSE}\nFocusing on the Fe atom in myoglobin: select hem; wireframe only; wireframe 70 \\# exclusive rendering of the zooto group 2(\\_Fe) 0 \\# 2x magnification\n```\n\n### Zoom in (*zoomto*)\n\n| This feature allows you to view in a magnified and temporally adjusted way mind, some parts of the model of interest, such as ligand interaction sites or prosthetic groups. The syntax of the expression is:\n\n```{r, eval=FALSE}\nzoomto or zoomTo (atom/group expression) size or...\nzoomto time (atom/group expression) size\n```\n\nExamples:\n\n```{r, eval=FALSE}\nZoom in 3x, half a second at a time: zoomto 0.5 *3\nZoom in 4x, half a second at a time: zoomto 0.5 400\nFocus on a ligand at 2x magnification: zoomto 2(ligand) 0\nFocus on a ligand at 4x magnification, half a second at a time: zoomto 0.5(ligand)* 4\n```\n\n### Delay\n\n| Command that allows you to wait for a certain period (in seconds), before the next action. Normally used in the sequence of commands by the *Console*, throughout a *script*.\n\n### Move\n\n| The *move* and *moveTo* commands allow you to combine rotation, translation, and zoom actions on models. The *move* command reorients the model based on the current coordinates, and has the syntax:\n\n```{r, eval=FALSE}\nmove rotX rotY rotZ zoom dX dy dZ slab time\n```\n\n| Where *rot* represents the rotation on a given axis, and *d* the translation on the axis. Examples:\n\n```{r, eval=FALSE}\nmove 90 0 0 0 0 0 0 0 1 - rotates the model 90º on the X axis;\nmove 0 720 0 0 0 0 0 0 1 - rotates the model two complete turns around the Y axis, during 1 s;\nmove 90 15 0 100 0 20 0 0 2 - for 2 s, rotates the model by 90º on the X axis and 15º on the Y axis, increases its size to 100, and translates it by 20% of the panel height, all at the same time\n```\n\n### MoveTo\n\n| Results in an *absolute* orientation of the model, regardless of its previous coordinates. Its insertion is not simple, since it depends on the orientation data of the model when loaded for the first time, and which can be obtained by:\n\n```{r, eval=FALSE}\nshow orientation\n```\n\n| An example of the result of the command is:\n\n```{r, eval=FALSE}\nmoveto /* time, axisAngle */ 1.0 { 616 -708 -346 47.68} /* zoom, translation */ 400.0 0.0 0.0 /* center, rotationRadius */ {15.174467 28.719118 4.726837} 35.148052 /* navigation center, translation, depth */ {0 0 0} 0 0 0 /* cameraDepth, cameraX, cameraY */ 3.0 0.0 0.0;\n#OR\n#Follows Z-Y-Z convention for Euler angles\nreset;center {15.174467 28.719118 4.726837}; rotate z 130.27; rotate y 44.57; rotate z -147.67; zoom 400.0;\n```\n\n| Note that there are two sets of commands, one for *moveTo* and the other for *reset, center, rotate and translate*. To obtain the model in its original coordinates, simply copy one or the other set of data.\n\n| Using the first set (*moveTo*), the line is copied and the animation time is changed, in this case the value 1.0 in \"axisAngle \\*/ 1.0\".\n\n### Compare\n\n| Compares 2 models and reorients the coordinates of the second one to be juxtaposed to the first one, using a correlation algorithm.\n\n```{r, eval=FALSE}\nload files \"$tyrosine\" \"$epinephrine\";\nframe *;\ncompare {2.1} {1.1} rotate translate 5.0\n```\n\n### Navigate\n\n| The command allows you to explore the model by simulating a panoramic tour of the interior of the structure. The parameters involve the travel time (or 2s when omitted). For example:\n\n```{r, eval=FALSE}\nnavigate depth 50 # immersion in the model in 2s\nnavigate 3 rotate y 20 # rotation 20º on the y axis\nnavigate 4 trace # walk through the model in 4s\nnavigate 3 translate {30 50 70} model slightly translates for 3s\nnavigate 5 center {10 20 30} # probe next to the model, and in the coordinates x, y, z\nnavigate 2 depth 30 / 5 rotate 180 / depth 20 / translate X 10\n```\n\n## Programming in Jmol\n\n| Programming and loop commands implemented in *Jmol*:\n\n```{r, eval=FALSE}\nIF FOR WHILE STEP BREAK WAIT PAUSE\nBREAK CASE CONTINUE QUIT\n```\n\n### Loop (*loop*)\n\n| Allows you to execute a command line repeatedly.\n\n```{r, eval=FALSE}\ncolor bonds red; delay 3; color bonds green; loop 1 # the loop is executed every 1 s\n```\n\n## Molecular modeling\n\n| Although quite limited as a tool for molecular modeling purposes, *Jmol* allows some didactic approaches. The following *script* exemplifies the tool in modeling. It can be copied and pasted into the *Script Editor* window, or loaded from a text file.\n\n```{r, eval=FALSE}\n# Molecular modeling #1\n\nload=3fgu;\ndefine ligbind (ANP, BGC, MG); select ligbind\nconnect 3.3\nstrut 0.5\ncolor strut yellow\nhide protein or water\n```\n\n```{r, eval=FALSE}\n# Molecular modeling #2\n\nload =3fgu # load structure\ncartoon only\nhide water\nselect(BGC,ANP)\nwireframe only\n\nselect MG\nspacefill 100\ncolor palegreen\ndefines ligbind (ANP,BGC,MG)\n\nselect remove hetero and not water\nconnect 3.3(ligbind and (oxygen or nitrogen)) (selected and (oxygen or nitrogen)) strut yellow # creates lig.H sticks of the protein with the ligands\nzoomTo 0.5(ligbind) *4 # zooms every half second, up to 4x at the ligand site\n\nzoom 0; center \nnavigate 2 DEPTH 30 / ROTATE 120 \nzoomto (mg) *7 \n\n# Note: adapted from Procko, K., Bakheet, S., Beckham, J. T., Franzen, M. A., Jakubowski, H., & Novak, W. R. (2021). Modeling an Enzyme Active Site using Molecular Visualization Freeware. JoVE (Journal of Visualized Experiments), (178), e63170.\n```\n\n\n<!-- ## Settings (*set*) -->","srcMarkdownNoYaml":"\n\n<!-- Google tag (gtag.js)-->\n\n\n| *Jmol* has a multitude of commands for viewing and studying molecular models. Most of these commands are accessed through the *Jmol* main *Menu*, or by right-clicking on the program's main screen or the *JSmol* applet on the internet. | However, *scripting* allows the execution of a much larger set of actions via the *Console*, both of the installed program and of the *applet*, in addition to allowing the listing of consecutive actions generating specific visualizations, calculations and animations, and even *programming.* In the latter case, via the *Jmol scripting* language. These commands and the programming language are explained on the website of its developers, [Jmol - Documentation & scripting](https://chemapps.stolaf.edu/jmol/docs/?ver=14.32#plot){target=\"_blank\"}, with substantial examples and illustrative and interactive *links*. The content of this chapter aims to summarize the main commands for viewing, studying, importing and exporting, calculations and animations of models via the *Console* or via *script*.\n| As a sequence of commands for a more complex observation or animation, **you can create the script** in any simple text editor, **saving it with the \".spt\" attribute**. The *script* can be loaded as a file or pasted into the *Console* field.\n| *Jmol* commands do not distinguish between singular or plural, or between upper or lower case, and both forms can be used, such as *show group* or *Show groups*.\n| An additional note: when creating a *script*, it is recommended that explanations be provided in command lines; to do so, simply use the hashtag sign (*\\#*) after the commands.\n\n## Changing the interface language & file directory\n\n### Language\n\n| The *Menu* language and the command output (results) can be changed as follows. Remember, however, that the commands themselves refer to computational algorithms; this way, it is not possible to change the language of the commands.\n\n\n```{r, eval=FALSE}\nset language = code # pt (Portuguese), es (Spanish), en (English), fr (French), de (German), etc...\n```\n\n| Note: if you are unable to do so, start *Jmol* by opening a CMD (*Windows*) or Terminal (*Linux*) in the program directory folder, and type, for *Portuguese*:\n\n```{r, eval=FALSE}\njava -Duser.language=pt -jar Jmol.jar\n```\n\n### Directory\n\n```{r, eval=FALSE}\ncd # shows current directory\ncd ? # open window to default directory\ncd path # change default directory (e.g. ../temp)\nset defaultDirectory \"/home/\" # default directory (for applet)\n```\n\n## General commands\n\n```{r, eval=FALSE}\nHelp: help # help zoom\nExit: quit\nUndo: undo\nRedo: redo\nReturn to original model (position, size, centering and orientation): reset\nProgram initialization: initialize\nCommand history: history on or history off\nMinimization by force fields of the model: minimize\n```\n\n| Try some of the above commands with the *applet* for *JSmol* that follows:\n\n[![](jsmol.png){width=\"20%\"}](https://chemapps.stolaf.edu/jmol/jsmol/simple.htm)\n\n## Obtaining molecular models\n\n### One model\n\n```{r, eval=FALSE}\nFrom the internet:\nmolecules in general: load $cholesterol\nmolecules from the PDB (Protein Data Bank): load=9pap\nligands from the RCSB website: load =ligand/hem\ncompounds from the PubChem website: load \":nafamostat\"\n\nFrom the computer (files must be in the root directory or preselected by \"cd\" - see above):\nload \"1aay.pdb\"\n```\n\n### More than one model\n\n```{r, eval=FALSE}\nSeparate: load files \"1a2t.pdb\" \"1aay.pdb\"\nsubmit the 1st model: model 1 or model 1.1\npresent the 2nd. model: model 2 or model 2.1\nshow all models: model* or frame*\nTogether: load append \"1a2t.pdb\" \"1aay.pdb\"\n```\n\n\n## Building simple molecules using SMILES\n\n| *SMILES*, an abbreviation for *“Simplified molecular-input line-entry system”*, allows you to represent the structure of atomic models using symbols and text (ASCII characters).\n\n\n| Try this formatting at the address below.\n\n```{r, eval=FALSE}\nhttps://chemapps.stolaf.edu/jmol/jmol.php?model=C\n```\n\n\n| Then replace the *model* in the *link*, *“model=”* with the following *SMILES* codes, alternatively:\n```{r, eval=FALSE}\n\n1. Single bond: CC, CN, CO\n2. Double bond: C=C, C=N, C=O\n3. Triple bond: N%23N, CC%23C\n\nNote: the code for the triple bond is intended to bypass the *SMILES* command, *“#”*, which is interpreted differently in internet addresses.\n```\n\n\n## Displaying models:\n\n```{r, eval=FALSE}\nView: display 2.1\nHide: hide 1.1\nRemove models: zap\nShading: set ambient 45 (0-shadow; 100-no shadow)\n```\n\n## Displaying model information (*show* command)\n\n```{r, eval=FALSE}\nDisplay nothing: show none\nModel: show model\nAtoms: show atom\nChains (protein or nucleic acid): show chain\nStructural minimization information: show DSSP\nSurfaces (molecular, electrostatic): show isosurface\nGroups: show group\nModel information: show info\nProtein primary sequence: show sequence\nHistory of commands: show history\nResidues (protein): show residues\nMolecular orbital: show mo\nInternet path: show url\nFull PDB file information: show file\n```\n\n### Molecular databases\n\n| There are several databases for rendering molecular models, and with the possibility of saving the file for use with *Jmol*.\n\nNotable among these are [PubChem](https://pubchem.ncbi.nlm.nih.gov/){target=\"_blank\"} or [DrugBank](https://go.drugbank.com/){target=\"_blank\"} for *small molecules*, and [RCSB - Protein DataBank (Research Collaboratory for Structural Bioinformatics)](https://www.rcsb.org/){target=\"_blank\"} for macromolecules. There is also the [IUPHAR/BPS Guide to PHARMACOLOGY](https://www.guidetopharmacology.org/), which allows indirect access to both micro and macromolecules.\n| In any of these, simply look for a field to *download* *3D* molecular models. *Jmol* accepts around **47 different file types** for structural rendering, including *PDB, MOL, CIF, SDF, XYZ, SMILES, and AMBER*.\n\n## General operations\n\n```{r, eval=FALSE}\nResetting the model coordinates: reset (size and centering): Shift+ double click (or *reset* in the *Console*)\n\nRemoving the Jmol *logo* from images: set frank off\n\nBackground: background white\n\nModel resolution: set ambient 10\n```\n\n## Mouse commands\n\n| To open the *Menu* of options for viewing, calculations and surfaces: right click\n\n### Model movements\n\n```{r, eval=FALSE}\nSimple rotation: click and drag in any direction\n\nRotation around the same axis up to 360$^{o}$: Shift+right click\n\nTranslation of the structure: Ctrl+right click\n\nGeneral magnification (zoom): Shift+left click and drag - zoom in/out - (or mouse, middle button). \n```\n\n## Motion commands\n\n```{r, eval=FALSE}\nspin 10 # rotational, with a speed of 10 degrees per frame\nspin z -15 # (z axis)\nrotate 20 # 20 degrees\nrotate x 90 # x axis\ntranslate 50 # value represents the percentage of the window (100 - outside; 0 - center)\n```\n\n## Saving and exporting models (*write*)\n\n```{r, eval=FALSE}\n# (saves as image)\nModel image:\ndefault (png): write model-name\nwith specifications: write PNGJ 2000 2000 \"big.png\"\nothers (jpg, pdf): write name.jpg\nall models: write frames* \"all.jpg\"\nModel coordinates\nwrite name.mol # or other attribute (e.g. pdb)\nModel state (changes after loading): write molecule.spt # of \"script\"\n```\n\n### Copying to the clipboard\n\n| The model image can be copied through the program's main *Menu*.\n\n### Reproducing a model from the internet that does not allow saving\n\n| Sometimes some *sites* make molecules available in the \\*mol or \\*pdb attribute for viewing and studying, but without the possibility of downloading the file. In these cases, it is possible to obtain the model coordinates, copy them into a notepad, and save the file for reading by *Jmol*, as \\*\\mol, for example.\n\n```{r, eval=FALSE}\n1. View the desired model on the site;\n2. Right-click and select Console.\n3. Click again, select Show and:\nExtract mol data.... or\nFile contents\n```\n\n| As a result, the *Console* will display the data for copying to a text file. Simply save it as \\*.mol for future viewing in Jmol.\n\n## Quantities\n\n### Calculating distances and angles (*measure*)\n\n| In addition to the simple and interactive use of the mouse to calculate distances (double right-click on the 1st atom and drag to the 2nd atom) or angles (3 mouse clicks), it is possible to obtain the same information through the *Console*.\n\n```{r, eval=FALSE}\nDistance: measure no. atom1 no. atom2\nAngle: measure no. atom1 no. atom2 no. atom 3\nNote: to obtain the no. of the atom, simply click on the desired point of the model\nTorsion angle: measure atom1 atom2 atom3 atom4\n\nMeasurements: measure on..or off...or delete\nChoose the unit of measurement: set measure nm # or pm, angstroms, au (Bohr atomic unit)\n```\n\n### Obtaining & viewing quantities\n\n```{r, eval=FALSE}\nHydrogen bonds: calculate hbonds (or...hbonds calculate)\nFormal (effective) charges: calculate formalcharge # to label: label %C\nPartial charges: calculate partialcharge # to label: label %P\nSecond structures in a protein: calculate structure # DSSP algorithm - Define Secondary Structure; note: the representation disappears, and it is necessary to type the command again for it to return\nAll bonds in the model and their respective distances: measure allconnected (*)(*)\n```\n\n## Changing representations\n\n| There are several ways to render structures in *Jmol*. The commands below summarize this capability:\n\n```{r, eval=FALSE}\nwireframe, backbone, trace, strands, cartoon, ribbons, meshriboon, rockets, cpk (or spacefill), ball&stick (only through the Menu, or through the combination below in the Console)\n\nTo display a single shape: wireframe only\nTo hide a shape: backbone off\nTo render as \"ball&stick\": wireframe only;wireframe reset;spacefill reset\n```\n\n| The representations render the structure by the size of its atoms. The rendering by *spacefill*, for example, is expressed as a function of the *van der Waals radius* of the atom. For example:\n\n```{r, eval=FALSE}\nspacefill on / off\nwireframe 0.5 # 0.5 Angstrom (the \".\" refers to the absolute value)\nbackbone 50 # 50/250 Angstrom, or 0.2 Angstrom (no dot refers to relative value)\ncartoon 50% # 50% larger than default\nspacefill 2 # 2/250 Angstrom = 0.008 Angstrom (note no dot)\nspacefill 2.0 # 2 Angstrom (note dot)\n```\n\n### Clipping & shading\n\n```{r, eval=FALSE}\nClip in view: slab on; slab 30\nDepth view: depth 30\n```\n\n### Whether to display hydrogen or not\n\n```{r, eval=FALSE}\nInsert into model: set pdbAddHydrogens\nRemove from model: set pdbAddHydrogens false\n```\n\n### Displaying disulfide bonds (proteins)\n\n```{r, eval=FALSE}\nssbonds on or ssbonds off\nssbonds 40 # renders as rods, with a diameter of 40/250 Angstrom\nssbonds 0.5 # renders with a diameter of 0.2 Angstrom\n```\n\n| Just to practice, try some of the above commands with the *applet* for *JSmol*, as follows:\n\n[![](jsmol.png){width=\"20%\"}](https://chemapps.stolaf.edu/jmol/jsmol/simple.htm)\n\n## Selecting colors\n\n| The default option for model colors is *CPK (Corey, Pauling, Koltun)*, for carbon (gray), nitrogen (blue), phosphorus or sulfur (yellow), hydrogen (white), iodine (violet), etc. However, it is possible to change colors globally in the model, or specifically for selected groups of atoms. The program accepts the command *color* or *colour*.\n\n```{r, eval=FALSE}\ncolor [255,125,350] # specific color\ncolor bonds # apply the color without needing to specify the representation\ncolor [xFF00FF] # specific color\ncolor cpk # program default\ncolor molecule # all atoms connected by a bond\ncolor formalcharge\ncolor partialcharge\ncolor amino # for amino acids\ncolor structure # for secondary structure\nProteins: red (alpha-helix), yellow (beta-sheets), blue (turns), white (rest)\nNucleic acid: violet (DNA), reddish (RNA)\ncolor chain: chains\ncolor inherit: objects inherit the color of their associated atoms\ncolor shapely: color scheme that includes nucleotides\ncolor group: rainbow gradient (blue; N- or 5'-terminal; red; C- or 3'-terminal)\n```\n\n### Specific colors\n\n| An atom or group of atoms can also be assigned a specific color, as follows:\n\n```{r, eval=FALSE}\nAliceBlue,AntiqueWhite,Aqua,Aquamarine,Azure,Beige,Bisque,Black,\nBlanchedAlmond,Blue,BlueViolet,Brown,BurlyWood,CadetBlue,Chartreuse,\nChocolate,Coral,CornflowerBlue,Cornsilk,Crimson,Cyan,DarkBlue,DarkCyan,\nDarkGoldenRod,DarkGray,DarkGrey,DarkGreen,DarkKhaki,DarkMagenta,\nDarkOliveGreen,Darkorange,DarkOrchid,DarkRed,DarkSalmon,DarkSeaGreen,\nDarkSlateBlue,DarkSlateGray ,DarkSlateGrey,DarkTurquoise,DarkViolet,\nDeepPink,DeepSkyBlue,DimGray,DimGrey,DodgerBlue,FireBrick,FloralWhite,\nForestGreen,Fuchsia,Gainsboro,GhostWhite,Gold,GoldenRod,Gray,Grey,Green,\nGreenYellow,HoneyDew,HotPink,IndianRed,Indigo,Ivory,Khaki,Lavender,\nLavenderBlush,LawnGreen,LemonChiffon,LightBlue,LightCoral,LightCyan,\nLightGoldenRodYellow,LightGray,LightGrey,LightG reen,LightPink,LightSalmon,\nLightSeaGreen,LightSkyBlue,LightSlateGray,LightSlateGrey,LightSteelBlue,\nLightYellow,Lime,LimeGreen,Linen,Magenta,Maroon,MediumAquaMarine,MediumBlue,\nMediumOrchid,MediumPurple,MediumSeaGreen,MediumSlateBlue,MediumSpringGreen,\nMediumTurquoise,MediumVioletRed,MidnightBlue,MintCream,MistyRose,Moccasin,\nNavajoWhite,Navy,OldLace,Olive,OliveDrab ,Orange,OrangeRed,Orchid,PaleGoldenRod,PaleGreen,PaleTurquoise,PaleVioletRed,PapayaWhip,PeachPuff,Turkey,Pink,Plum,\nPowderBlue,Purple,Red,RosyBrown,RoyalBlue,SaddleBrown,Salmon,SandyBrown,\nSeaGreen,SeaShell,Sienna,Silver,SkyBlue,SlateBlue,SlateGray,SlateGrey,Snow,\nSpringGreen,SteelBlue,Tan,Teal,Thistle,Tomato,Turquoise,Violet,Wheat,White,\nWhiteSmoke,Yellow,YellowGreen.\n```\n\n## Labeling the model (*label*)\n\n```{r, eval=FALSE}\nLabel on/off: label on...or label off\nString: label %c\nFormal charge: label %C\nPartial charge: label %P\nAmino acid residue in protein: %n\nResidue no.: %r\nAtom: %a\nAtom identifier no.: %i\nElement symbol: %e\nString: %c\n```\n\n| To view a specific set of atoms, such as residues in a protein, you can use:\n\n```{r, eval=FALSE}\nselect (Ser195,His57,Asp102) and *.ca; label \"\\%n \\%R\";color label orange ;set labelfront\n```\n\n| Some specific operations also allow labeling.\n\n```{r, eval=FALSE}\nlabel binding site # label with the expression\nlabel binding | site # label with the expression, separated by lines (\"|\" is the \"pipe\" command)\n```\n\n| *Jmol* also allows you to label a specific atom, residue, interaction or reaction site, or some group for better identification and exploration of the model. To do this, you can select the structure by *select*, followed by the proposed label. For example:\n\n```{r, eval=FALSE}\nselect pro31 # selection of the Proline residue at position 31 of the protein sequence\nlabel Proline-31\nset echo top left; echo \"Model 1\" # insertion of text on the screen\nselect all; label on # names all atoms with symbol and atomic number\n```\n\n## Selecting parts of the model\n\n| To select a general group of atoms, simply combine with the mouse *Shift+left click+drag* for the selected group (you must click on the icon that represents it in the menu first). For a more specific selection, you can use some of the specific or predefined *atom expressions*, as below:\n\n```{r, eval=FALSE}\nNature of the molecule:\nall, none, protein, nucleic, dna, rna, carbohydrate, hetero, ligand, solvent, water or hoh, ions, hem, amino\n\nChemical element\nBy name: oxygen, nitrogen, carbon\nBy symbol: _N, _C, _Fe\nBy atomic no.: elemNo=7, or atomNo=5\nBy no. atom identification in the sequence (serial): atomNo<50\n\nPart of the molecule:\nbackbone, sidechain, :b (for chain), spine\n\nResidue type\n3-letter abbreviation for amino acids, acidic, basic, polar, neutral, charged, purine, pyrimidine, large, small, buried, surface, cyclic, hydrophilic, hydrophobic, aromatic, cystine, aliphatic, spine, base\n\nStructure 2a. in proteins\nhelix, sheet, turn\n```\n\n| The general commands for using the above expressions or combinations of them are, basically:\n\n```{r, eval=FALSE}\nselect, restrict, hide, display, delete\n```\n\n| Each expression must be enclosed in parentheses. You can also apply *boolean operations* (*or, and, but not*, or *=, \\<, \\>, \\<=, \\>=, !=*).\n\n| The *restrict* command is irreversible in nature, while the *hide* command is reversible in rendering. followed by the desired expression. Some examples:\n\n| Here are some examples:\n\n```{r, eval=FALSE}\nRestrict command\nrestrict helix # only keeps the helices of the secondary structure\nrestrict ligand # only the ligand\nrestrict not ligand # only the protein without prosthetic groups\nrestrict 42-60 # only keeps the indicated residue sequence\nrestrict f6p # only keeps the identified group (a ligand, in this case)\nrestrict not(:a, :b) # keeps chains other than \"a\" and \"b\"\n\nSelect command\nselect Tyr\nselect polar\nselect all # selects all atoms\nselect none # does not select any atoms\nselect bmp,amp # selects two ligands\nselect (bmp, amp) and oxygen\nselect hem and :b # selects the heme group of chain \"b\"\nselect hem and not iron :b # selects the heme group of chain \"b\", omitting Fe\nselect */2 # all atoms of model 2\nselect connected(oxygen) # all atoms bonded to an oxygen\nselect ser70 :A .ca # alpha carbon of serine no. 70 of chain A\nselect hetero and not solvent # heteroatoms except water\nselect remove group hetero and not water # only water\nselect hetero and not ligand # heteroatoms except ligand\nselect buried only # only protein core residues\nselect helix or backbone # select helices or protein backbone\nselect not helix # select other 2nd protein structures (turn, sheet)\nselect 62 and(sidechain or alpha) # sidechain or alpha carbon of residue 62\nselect ser70.ca # alpha carbons of serine no. 70\nselect ser70 :a.ca # alpha carbons of serine no. 70 of chain \"a\"\nselect (lys,arg) # only Lys and Arg residues\nselect (lys,arg) and :b # Lys and Arg residues of chain \"b\"\nselect 19-32 :y # sequence of residues of chain \"y\"\nselect asp47 # Asp residue at position 47\nselect [asp]47 :y # asp47 residue of chain \"y\"\nselect (10 or 25) and backbone\nselect resNo>14 and resNo<25 and *.CA # alpha carbons of residues 14 to 25\nselect hoh.o/2 # oxygen of water molecules in model 2\nselect (14,16,18,20) # the numbered residues\nselect backbone and *:b # the backbone of chain \"b\"\nselect backbone and not *:b # the backbone of all chains except \"b\"\nselect not hidden...select displayed # everything that is not hidden\nselect not selected # everything that was not previously selected\nselect carbon and not selected # carbon atoms not previously selected\n\nDelete command\ndelete(calcium,nadph)\n```\n\n### Special selections\n\n#### *within* command\n\n| This command allows a recursive selection, that is, a selection within a selection.\n\n```{r, eval=FALSE}\nselect within (5, (bca,amp)) # selects two ligands that are 5 Angstroms away from the selected group of atoms\nselect within(3.0, _Fe) # all atoms within 3 Angstroms of the iron atom\n```\n\n#### *define* command\n\n| Allows you to define a group of atoms for specific rendering or observation. After defining, simply use *select* or another command to change the model.\n\n```{r, eval=FALSE}\ndefine test (arg10) # select only Arg10\ndefine test (arg10 or asn46) # select both residues\ndefine test (ser195 or asp102 or his57)\ndefine Site within(3.0, _Cu) # 3 Angstroms away from copper atom\ndefine PointX within(5.0,arg31) # 5 Angstroms away from Arg31\ndefine neighbors selected # previously selected\n```\n\n#### Commands *selected*, *hidden*, *displayed*\n\n| Allows you to direct an action to the group of atoms already selected, hidden or displayed, respectively.\n\n## Model magnification (*zoom*)\n\n| There are two basic commands in *Jmol* for magnification:\n\n1. *zoom* : (expression) size\n2. *zoomTo* : time (expression) size\n\n| The second command allows an animation of the model, which will be explained in the homonymous section below. Here are some examples for the *zoom* command.\n\n```{r, eval=FALSE}\n2x magnification: zoom in\n3x magnification: zoom \\*3\n2x reduction: zoom out\n3x reduction: zoom /3\nRemove magnification: zoom off\nRestrict ligand and magnification: restrict ligand; zoom 0\nzoom 100: restores the initial size\n```\n\n## Surfaces\n\n| *Jmol* allows you to render some types of surfaces around the atoms of the model. For macromolecules it should be noted that rendering will take longer.\n\n```{r, eval=FALSE}\n\ndots on / off \\# van der Waals surface dots only \\# only vdw surface present (without model) dots vanderwaals...or dots vdw dots ionic\n\nisosurface on/off # molecular surface\nisosurface solvent # excluding solvent\nisosurface molecular # including solvent\nisosurface molecular 5 # surface at a given VDW radius\nisosurface sasurface # surface accessible solvent\nisosurface mep # \"molecular electrostatic potential\"\nisosurface map vdw # Van der Waals surface\nisosurface map mep # electrostatic potential\nisosurface molecular map property PartialCharge # or temperature, vanderwaals\n\ngeosurface on/off # molecular surface geodesic (curved) geosurface only # only the surface, without model geosurface vdw\ngeosurface ionic geosurface 5 # value in Angstrom\n\nNote: To visualize the surfaces including the solvent, you can use the \"set solvent on\" command first.\n```\n\n## Graphs\n\n| Some two- and three-dimensional graphs can be generated from simple *Jmol* commands. To return to the original model, issue the *model 1* command. Some examples:\n\n```{r, eval=FALSE}\nplot properties resno partialcharge # resno = residue number (plots after command to calculate surface charge - see above)\nplot properties phi psi resno # 3D plot with dihedral angles against residue no. plot rama...or...\nplot ramachandran # Ramachandran plot for structure 2a. in proteins\nNote: to view the phi and psi angles in the model (not in the plot), type: draw rama (draw off to hide)\n\nOther properties: hydrophobicity, mass, temperature, radius, occupancy, chaino\n```\n\n## Creating and reading scripts\n\n| \"Scripting\" allows the observation and analysis of a specific part of the model under study, by composing code snippets as command lines. In this way, the *script* resembles an *algorithm* with a succession of commands. A *script* can be loaded by calling program files (*File, Open*), or even by dragging the file to the program's screen area.\n\n| A *Jmol* *script* is based on a *Java Script* dialect, and can be driven by a sequence of commands on each line of a simple text file, saving it as *.spt*.\n\n| On the other hand, *Jmol* has its own construction and testing environment, *Script Editor*, accessible through the main *Menu*. In this environment, it is possible to create, open, create, check, and run a *script*.\n\n| The *Editor* can be used when there are several command lines, for better visualization of the algorithmic sequence. In this case, it is also possible to include comments, using:\n\n```{r, eval=FALSE}\n/* comment */\nor\n// comment //\nor\n# comment\n```\n\n| In the *Programming* section, some *scripts* created in the *Editor* will be presented.\n\n| It is also valid to copy/paste some code snippets in the *Console* or *Jmol/JSmol*, separating the commands with *semicolons* on successive lines. This way, the *Script Editor* is simulated in the *Console* itself.\n| It is also possible through *Jmol* to define an initial *script* to be run when the program is opened. To do this:\n\n```{r, eval=FALSE}\nset defaultLoadScript \"commands\"\n```\n\n## Mutation\n\n| It is also possible to observe consequences of mutating specific residues in a model, such as weak interactions (electrostatics or hydrogen bonds, for example).\n\n```{r, eval=FALSE}\n\nmutate 33Lys \\# specifically changes position 33 of the primary sequence to Lysine mutate Ala34 \\~W \\# alteral Ala to Trp mutate(1:3) \\~GAL \\# changes the first three positions in the protein to Gly, Ala and Leu\n```\n\n## Visualizing regions with `strut` function\n\n| This function allows you to connect atoms in the structure of a protein, showing a dash between them.\n\n```{r, eval=FALSE}\nselect atomno=1392 or atomno=1403\nconnect\nstrut\nstrut 2.0\ncolor strut pink\n```\n\n## Animations\n\n```{r, eval=FALSE}\nFocusing on the Fe atom in myoglobin: select hem; wireframe only; wireframe 70 \\# exclusive rendering of the zooto group 2(\\_Fe) 0 \\# 2x magnification\n```\n\n### Zoom in (*zoomto*)\n\n| This feature allows you to view in a magnified and temporally adjusted way mind, some parts of the model of interest, such as ligand interaction sites or prosthetic groups. The syntax of the expression is:\n\n```{r, eval=FALSE}\nzoomto or zoomTo (atom/group expression) size or...\nzoomto time (atom/group expression) size\n```\n\nExamples:\n\n```{r, eval=FALSE}\nZoom in 3x, half a second at a time: zoomto 0.5 *3\nZoom in 4x, half a second at a time: zoomto 0.5 400\nFocus on a ligand at 2x magnification: zoomto 2(ligand) 0\nFocus on a ligand at 4x magnification, half a second at a time: zoomto 0.5(ligand)* 4\n```\n\n### Delay\n\n| Command that allows you to wait for a certain period (in seconds), before the next action. Normally used in the sequence of commands by the *Console*, throughout a *script*.\n\n### Move\n\n| The *move* and *moveTo* commands allow you to combine rotation, translation, and zoom actions on models. The *move* command reorients the model based on the current coordinates, and has the syntax:\n\n```{r, eval=FALSE}\nmove rotX rotY rotZ zoom dX dy dZ slab time\n```\n\n| Where *rot* represents the rotation on a given axis, and *d* the translation on the axis. Examples:\n\n```{r, eval=FALSE}\nmove 90 0 0 0 0 0 0 0 1 - rotates the model 90º on the X axis;\nmove 0 720 0 0 0 0 0 0 1 - rotates the model two complete turns around the Y axis, during 1 s;\nmove 90 15 0 100 0 20 0 0 2 - for 2 s, rotates the model by 90º on the X axis and 15º on the Y axis, increases its size to 100, and translates it by 20% of the panel height, all at the same time\n```\n\n### MoveTo\n\n| Results in an *absolute* orientation of the model, regardless of its previous coordinates. Its insertion is not simple, since it depends on the orientation data of the model when loaded for the first time, and which can be obtained by:\n\n```{r, eval=FALSE}\nshow orientation\n```\n\n| An example of the result of the command is:\n\n```{r, eval=FALSE}\nmoveto /* time, axisAngle */ 1.0 { 616 -708 -346 47.68} /* zoom, translation */ 400.0 0.0 0.0 /* center, rotationRadius */ {15.174467 28.719118 4.726837} 35.148052 /* navigation center, translation, depth */ {0 0 0} 0 0 0 /* cameraDepth, cameraX, cameraY */ 3.0 0.0 0.0;\n#OR\n#Follows Z-Y-Z convention for Euler angles\nreset;center {15.174467 28.719118 4.726837}; rotate z 130.27; rotate y 44.57; rotate z -147.67; zoom 400.0;\n```\n\n| Note that there are two sets of commands, one for *moveTo* and the other for *reset, center, rotate and translate*. To obtain the model in its original coordinates, simply copy one or the other set of data.\n\n| Using the first set (*moveTo*), the line is copied and the animation time is changed, in this case the value 1.0 in \"axisAngle \\*/ 1.0\".\n\n### Compare\n\n| Compares 2 models and reorients the coordinates of the second one to be juxtaposed to the first one, using a correlation algorithm.\n\n```{r, eval=FALSE}\nload files \"$tyrosine\" \"$epinephrine\";\nframe *;\ncompare {2.1} {1.1} rotate translate 5.0\n```\n\n### Navigate\n\n| The command allows you to explore the model by simulating a panoramic tour of the interior of the structure. The parameters involve the travel time (or 2s when omitted). For example:\n\n```{r, eval=FALSE}\nnavigate depth 50 # immersion in the model in 2s\nnavigate 3 rotate y 20 # rotation 20º on the y axis\nnavigate 4 trace # walk through the model in 4s\nnavigate 3 translate {30 50 70} model slightly translates for 3s\nnavigate 5 center {10 20 30} # probe next to the model, and in the coordinates x, y, z\nnavigate 2 depth 30 / 5 rotate 180 / depth 20 / translate X 10\n```\n\n## Programming in Jmol\n\n| Programming and loop commands implemented in *Jmol*:\n\n```{r, eval=FALSE}\nIF FOR WHILE STEP BREAK WAIT PAUSE\nBREAK CASE CONTINUE QUIT\n```\n\n### Loop (*loop*)\n\n| Allows you to execute a command line repeatedly.\n\n```{r, eval=FALSE}\ncolor bonds red; delay 3; color bonds green; loop 1 # the loop is executed every 1 s\n```\n\n## Molecular modeling\n\n| Although quite limited as a tool for molecular modeling purposes, *Jmol* allows some didactic approaches. The following *script* exemplifies the tool in modeling. It can be copied and pasted into the *Script Editor* window, or loaded from a text file.\n\n```{r, eval=FALSE}\n# Molecular modeling #1\n\nload=3fgu;\ndefine ligbind (ANP, BGC, MG); select ligbind\nconnect 3.3\nstrut 0.5\ncolor strut yellow\nhide protein or water\n```\n\n```{r, eval=FALSE}\n# Molecular modeling #2\n\nload =3fgu # load structure\ncartoon only\nhide water\nselect(BGC,ANP)\nwireframe only\n\nselect MG\nspacefill 100\ncolor palegreen\ndefines ligbind (ANP,BGC,MG)\n\nselect remove hetero and not water\nconnect 3.3(ligbind and (oxygen or nitrogen)) (selected and (oxygen or nitrogen)) strut yellow # creates lig.H sticks of the protein with the ligands\nzoomTo 0.5(ligbind) *4 # zooms every half second, up to 4x at the ligand site\n\nzoom 0; center \nnavigate 2 DEPTH 30 / ROTATE 120 \nzoomto (mg) *7 \n\n# Note: adapted from Procko, K., Bakheet, S., Beckham, J. T., Franzen, M. A., Jakubowski, H., & Novak, W. R. (2021). Modeling an Enzyme Active Site using Molecular Visualization Freeware. JoVE (Journal of Visualized Experiments), (178), e63170.\n```\n\n\n<!-- ## Settings (*set*) -->"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"comandos_en.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.29","theme":{"light":"flatly"},"title":"Commands"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}