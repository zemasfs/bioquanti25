{"title":"Proteínas","markdown":{"yaml":{"title":"Proteínas","toc":true,"lang":"pt","bibliography":"referencias.bib"},"headingText":"Composição de aminoácidos","headingAttr":{"id":"sec-Proteinas","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n\n|     Proteínas constituem biopolímeros formados por 20 aminoácidos. Dessa forma pode-se avaliar facilmente a composição de qualquer proteína disponível em banco de dados, como o *PDB* visto no capítulo de *Aminoácidos*. Tomando-se a albumina de soro humano como exemplo, código *AAA98797* do *National Center for Biotechnology Information*, é possível contabilizar os 20 tipos de aminoácidos que compõe sua sequência. Para isto basta considerar a sequência *FASTA* como uma *string*, e extrair a quantidade de cada letra, utilizando-se a biblioteca *stringr*, como segue.\n\n\n|     Primeiro, obtém-se a sequência *FASTA* da albumina de soro. \n\n```{r  bsa seq}\nseq <- \"MKWVTFISLLFLFSSAYSRGVFRRDAHKSEVAHRFKDLGEENFKALVLIAFAQYLQQCPFEDHVKLVNEV\nTEFAKTCVADESAENCDKSLHTLFGDKLCTVATLRETYGEMADCCAKQEPERNECFLQHKDDNPNLPRLV\nRPEVDVMCTAFHDNEETFLKKYLYEIARRHPYFYAPELLFFAKRYKAAFTECCQAADKAACLLPKLDELR\nDEGKASSAKQRLKCASLQKFGERAFKAWAVARLSQRFPKAEFAEVSKLVTDLTKVHTECCHGDLLECADD\nRADLAKYICENQDSISSKLKECCEKPLLEKSHCIAEVENDEMPADLPSLAADFVESKDVCKNYAEAKDVF\nLGMFLYEYARRHPDYSVVLLLRLAKTYETTLEKCCAAADPHECYAKVFDEFKPLVEEPQNLIKQNCELFE\nQLGEYKFQNALLVRYTKKVPQVSTPTLVEVSRNLGKVGSKCCKHPEAKRMPCAEDYLSVVLNQLCVLHEK\nTPVSDRVTKCCTESLVNRRPCFSALEVDETYVPKEFNAETFTFHADICTLSEKERQIKKQTALVELVKHK\nPKATKEQLKAVMDDFAAFVEKCCKADDKETCFAEEGKKLVAASQAALGL\"\n```\n\n|     Pode-se observar que há espaços vazios, que podem ser omitidos por razões estéticas ou não, já que o pacote *stringr* não os contabilizará, contrariamente a pacotes mais específicos para sequências biológicas, como o *seqinr* visto anteriormente. Mas se desejar omitir esses espaços, basta executar o código abaixo.\n\n```{r, eval=FALSE}\nseq <- seq[seq != \"\\n\"]\nseq # operação booleana != significa \"não\"\n```\n\nA seguir, obtém-se o quantitativo de uma letra específica da sequência.\n\n```{r}\nlibrary(stringr)\naa <- str_count(seq, pattern = \"A\")\naa\n```\n\n|     Veja que o comando `str_count` contabiliza apenas a letra \"A\" na sequência. Dessa forma, é possível obter todos os 20 aminoácidos, repetindo-se esse comando.\n\n```{r}\nlibrary(stringr)\nala <- str_count(seq, pattern = \"A\")\narg <- str_count(seq, pattern = \"R\")\nasn <- str_count(seq, pattern = \"N\")\nasp <- str_count(seq, pattern = \"D\")\ncys <- str_count(seq, pattern = \"C\")\nglu <- str_count(seq, pattern = \"E\")\ngln <- str_count(seq, pattern = \"Q\")\ngly <- str_count(seq, pattern = \"G\")\nhis <- str_count(seq, pattern = \"H\")\nile <- str_count(seq, pattern = \"I\")\nleu <- str_count(seq, pattern = \"L\")\nlys <- str_count(seq, pattern = \"K\")\nmet <- str_count(seq, pattern = \"M\")\nphe <- str_count(seq, pattern = \"F\")\npro <- str_count(seq, pattern = \"P\")\nser <- str_count(seq, pattern = \"S\")\nthr <- str_count(seq, pattern = \"T\")\ntrp <- str_count(seq, pattern = \"W\")\ntyr <- str_count(seq, pattern = \"Y\")\nval <- str_count(seq, pattern = \"V\")\n```\n\nE, para visualizar o resultado numa tabela:\n\n\n```{r, bsa compos, tidy=TRUE, tidy.opts=list(width.cutoff=50)}\naa_3abrev <- c(\"Ala\", \"Arg\", \"Asn\", \"Asp\", \"Cys\", \"Glu\", \"Gln\", \"Gly\", \"His\", \"Ile\", \"Leu\", \"Lys\", \"Met\", \"Phe\", \"Pro\", \"Ser\", \"Thr\", \"Trp\", \"Tyr\", \"Val\")\naa_quant <- c(ala, arg, asn, asp, cys, glu, gln, gly, his, ile, leu, lys, met, phe, pro, ser, thr, trp, tyr, val) # vetor com o quantitativo de aminoácidos da proteína\naa_seq <- data.frame(aa_3abrev, aa_quant) # dataframe com os resultados\ncolnames(aa_seq) <- c(\"Tipo\", \"Qtde\") # renomear as colunas\n\n\n# Composição de aminoácidos em albumina de soro humano\naa_seq # apresenta a tabela\n```\n\n|       O 'R' possui alguns comandos para a geração estética de tabelas, entre os quais os incluídos no pacote 'knitr', como segue:\n```{r}\nlibrary(knitr) # para gerar a tabela\n\nknitr::kable(aa_seq, caption = \"Composição de aminoácidos em albumina \n             # de soro humano.\", \"pipe\") # tabela\n```\n\n|     Observe que, à despeito do resultado obtido, houve certo trabalho em se obter a composição da albumina, a partir das 20 linhas modificadas para cada aminoácido. Uma alternativa mais prática consiste em considerar um *loop* que execute a extração da informação desejada para um vetor contendo a abreviação de uma letra para cada aminoácido. \n\n```{r loop table bsa}\naa_1abrev <- c(\"A\", \"R\", \"N\", \"D\", \"C\", \"E\", \"Q\", \"G\", \"H\", \"I\", \"L\", \"K\", \"M\",\n               \"F\", \"P\", \"S\", \"T\", \"W\", \"Y\", \"V\")\nfor (i in aa_1abrev) {\n  aa_quant2 <- str_count(seq, pattern = aa_1abrev)\n  return(aa_quant2) # sintaxe opcional para função com apenas uma saída\n}\n\n\naa_seq <- data.frame(aa_3abrev, aa_quant2) # dataframe com os resultados\ncolnames(aa_seq) <- c(\"Tipo\", \"Qtde\") # renomear as colunas\nknitr::kable(aa_seq, caption = \"Composição de aminoácidos em albumina de soro\n             humano (uso de loop).\", \"pipe\") # tabela\n```\n\n|     Dessa forma obtém-se o mesmo resultado, mas com menor consumo de memória e maior velocidade de processamento, características em qualquer lógica de programação. Apesar do *loop* exemplificar uma automação, a função `str_count` retém em si um *loop* interno, já que aplica uma função de contagem de elementos a uma sequência, a partir de um padrão pré-definido (o vetor *aa_1abrev*, no caso). Dessa forma, pode-se simplificar ainda mais o script, não necessitando do *loop* externo.\n\n```{r}\nstr_count(seq, pattern = aa_1abrev)\n```\n\n|     Diversas funções do R exibem esse *loop* interno, e que pode ser aplicado em vetores, listas, matrizes e *dataframes* (planilha de dados). As mais simples envolvem a aplicação de uma função pré-programada do R a um vetor, por ex:\n\n```{r}\ny <- c(1, 2, 4, 8, 16, 32)\nmean(y)\nsum(y)\n```\n|       Outra vetorização frequente decorre da aplicação de uma *função* de usuário a vetor, reduzindo a necessidade de repetição de comandos, como no exemplo abaixo:\n\n```{r size prot estim} \n# Tamanho médio estimado de uma proteína a partir do no. de resíduos de\n# aminoácidos\nprot.tamanho <- function(x) {\n  MM <- x * 110 # 'x' representa o número de aminoácidos da proteína\n  return(MM)\n}\n\nprot.tamanho(575) # no. de resíduos de aminoácidos de albumina humana\n```\n\n|       Outra forma de vetorização envolve a família de funções `apply`, composta pelos comandos `apply`, `sapply`, `tapply`, `lapply`, e `mapply`. Embora possuam processamento mais rápido que funções de *loop* externo para uso de matrizes muito complexas, cada qual é voltado a um objeto distinto ou situação específica do R (retorno de lista, vetor ou matriz), permite o uso de `subset` (subconjuntos de dados), utiliza funções do R ou funções previamente definidas pelo usuário, e roda em apenas uma linha de comando. Essas vantagens contrapõe-se ao uso de *loop for* aplicado para vetores. Contudo, a vetorização opera muito bem quando se deseja aplicar ou mapear  uma função a um vetor/matriz/lista. Quando, por outro lado, se deseja aplicar uma função cujo resultado dependa de mais de um vetor/matriz/lista, o *loop for* torna-se indispensável, como na titulação de ácidos fracos do capítulo de *Aminoácidos*.\n\n|     Seja qual for o método empregado (e aí vale destacar as chamadas *boas práticas de programação* na construção de *scripts* [^label-1]), é possível construir uma composição mais geral para o conjunto de resíduos da proteína. Assim, podemos obter qualquer relação quantitativa a partir da sequência, já que a estamos tratando como uma *string*. Exemplificando, uma tabela contendo a classe de cada aminoácido que compõe a sequência.\n\n[^label-1]: Algumas práticas de programação (*Best Codes*):\n1) organizar um projeto em pastas (ex: dados,figuras,scripts) ou criar um pacote do R como opção; 2) criar seções num código pra facilitar localização; 3) nomear os *code chunks* (pedaços de código); 4) colocar no início do código as bibliotecas utilizadas, fontes, e chamada de dados (evita procurar algo necessário pro *script* rodar ao longo do código); 5) identar, preferivelmente com 1 ou 2 comandos por linha; 6) parâmetros de função sempre dentro de função; 7) evitar parâmetros globais; 8) não usar 'attach'; 8) usar parâmetros com nomes intuitivos (e não x e y; ex: nome_função); 9) atribuir nomes à objetos com uma das três convenções nominais (ex: KiCompet, ki_compet, ki.compet).\n\n\n```{r}\naa_ac <- aa_seq[4, 2] + aa_seq[6, 2] # AA ácicos\naa_bas <- aa_seq[2, 2] + aa_seq[9, 2] + aa_seq[12, 2] # AA básicos\naa_arom <- aa_seq[14, 2] + aa_seq[18, 2] + aa_seq[19, 2] # AA aromáticos\naa_alif <- aa_seq[10, 2] + aa_seq[11, 2] + aa_seq[15, 2] + aa_seq[1, 2] +\n  aa_seq[20, 2] # AA alifáticos\naa_pol <- aa_seq[3, 2] + aa_seq[5, 2] + aa_seq[7, 2] + aa_seq[8, 2] + \n  aa_seq[13, 2] + aa_seq[16, 2] + aa_seq[17, 2] ## AA polares neutros\n```\n|     Agora, ao invés de se construir uma tabela com a contagem desses grupos, façamos o percentual dos mesmos, para uma visão mais geral da sequência.\n\n```{r}\naa_tot <- str_count(seq, pattern = \"\") # comprimento da sequência\nclass_perc <- round(c(aa_ac, aa_bas, aa_arom, aa_alif, aa_pol) / aa_tot * 100)\n```\n\nE agora, sim, constroi-se a tabela.\n\n```{r}\naa_class <- c(\"ácido\", \"básico\", \"aromático\", \"alifático\", \"polar\")\naa_perc <- data.frame(aa_class, class_perc) # dataframe com os resultados\ncolnames(aa_perc) <- c(\"Classe\", \"%\") # renomear as colunas\nknitr::kable(aa_perc, caption = \"Distribuição de classes de aminoácidos \n             em albumina humana.\", \"pipe\") # tabela\n```\n\n|     Percebe-se pela tabela acima que a distribuição de classes de resíduos de aminoácidos na albumina é razoavelmente homogênea, o que contribui para sua função anfotérica de transporte para compostos polares (ex:cálcio) e apolares (ex: colesterol, ácidos graxos).\n\n## Tabela de  Purificação de Proteínas & R como planilha eletrônica\n\n|      Não obstante a facilidade com que podemos elaborar/editar planilhas eletrônicas convencionais (*spreadsheet*; ex: MS Excel, Libreoffice Calc, Gnumeric, etc), o 'R' também permite trabalhar-se com planilhas. Ainda que menos intuitivo como as mencionadas, a scriptagem no R permite a elaboração/edição de planilhas de alta complexidade, dada a natureza da programação estatística que envolve a suite.\n|       Para exemplificar a construção de uma planilha simples, tomemos como exemplo uma *Tabela de Purificação de Proteínas*, usualmente utilizada em Biotecnologia e áreas afins. A forma mais simples de construção de uma planilha envolve 1) a elaboração individual de vetores, e 2) a união dos vetores em uma planilha. \n|       Os procedimentos para purificação (ou isolamento, fracionamento) proteica envolvem técnicas como **tratamento químico (precipitação por sulfato de amônio, acetona)**, **tratamento ácido**, **tratamento térmico**, **diálise**,  **cromatografia (filtração molecular, troca-iônica, afinidade, fase reversa)**, entre outros. Para aferição do grau de pureza da amostra obtida utilizam-se normalmente a **eletroforese** simples, **focalização isoelétrica**, **eletroforese 2D**, uso de **anticorpos monoclonais**, e **ensaios de atividade** específicos, dentre vários.\n|       Para a tabela de purificação são exigidos somente os vetores de **massa de amostra** e de **atividade enzimática da amostra**, obtidos em cada etapa de purificação. Uma planilha simples poderia ser construida como:\n\n\n```{r plan purif}\n# Elaboração de planilha simples de purificação de enzima\n# (cada elemento do vetor representa uma etapa de purificação)\n\n# 1. Definição dos vetores principais:\nprot.total <- c(6344, 302, 145, 34, 10, 3.8) # proteína, mg\nativ.tot <- c(200, 122, 106, 70, 53, 24) * 1000 # atividade, U\n\n# 2. Construção da planilha:\npurif.plan <- data.frame(prot.total, ativ.tot)\npurif.plan\n```\n\n|       A planilha construida compõe agora um 'dataset' do R. Há outras formas de construção simples, também, como o uso da função 'cbind' (pra união de colunas) ou 'rbind' (união de linhas; rows):\n\n```{r plan purif cbind}\npurif.plan2 <- cbind(prot.total, ativ.tot)\npurif.plan2\n```\n\n|       Seja qual for o procedimento, pode-se alterar os nomes das colunas, como segue:\n\n```{r plan purif colnames}\n# Edição de nome de colunas\ncolnames(purif.plan2) <- c(\"totalProt\", \"enzAtiv\")\npurif.plan2\n```\n\n|       Como numa planilha convencional, também é possível se criar novos vetores calculados a partir dos iniciais:\n\n```{r plan purif calc}\npurif.plan3 <- data.frame(prot.total, ativ.tot, ativ.tot / prot.total)\noptions(digits = 1) # opção para no. de casas decimais\ncolnames(purif.plan3) <- c(\"prot.total\", \"ativ.tot\", \"ativ.specif\")\nrownames(purif.plan3) <- c(\"extr.bruto\", \"NH4SO2\", \"acetona\", \n                           \"Sephadex G-100\", \"DEAE-celulose\", \"C8-fase rev\")\npurif.plan3\n```\n\n|       A planilha pode ser editada em seus valores, também, bastando pra isso atribuir um novo nome para que as modificações sejam salvas:\n\n```{r plan purif edit, eval=FALSE}\n# Edição simples de planilha (alterações de valores e nomes de colunas)\n\npurif.plan4 <- edit(purif.plan3) # ou data.entry( )\n```\n\n|       É claro, também, que se pode importar os dados de uma planilha já construida em outro programa. Exemplificando para uma planilha salva como *CSV*: \n\n```{r plan purif import, eval = FALSE}\n# Importação de dados de outra planilha (CSV):\n\n# 1. Importação com nome da planilha desejada:\npurif.plan5 <- read.table(\"planilha.csv\", header = T, sep = \",\")\n\n# 2. Importação com tela de busca da planilha desejada:\npurif.plan5 <- frame <- read.csv(file.choose())\n```\n\n|       Um grande número de operações pode ser conduzido em planilhas no 'R', tais como inserção, deleção, modificação, agregação (*merge*), filtragem, extração de subconjunto, operações matemáticas e cálculos estatísticos (média, desvio-padrão, etc). Pode-se também converter a planilha em uma tabela de visual mais completo, por uso da biblioteca 'tibble', parte de um conjunto de pacotes utilizado em ciência de dados denominado *Tidyverse* :\n\n```{r plan purif convert tibble}\nlibrary(tibble)\npurif.plan6 <- as_tibble(purif.plan3)\npurif.plan6\n```\n\n\n|       O *Tidyverse* compõe um ecossistema de pacotes do 'R' que comungam da mesma filosofia, gramática e estrutura de dados. Entre esses pacotes inlcui-se o 'tibble' (tabelas), 'ggplot2' (gráficos de alta qualidade visual), e 'dplyr' (manipulação de dados). No que tange ao 'dplyr', é bastante flexível a criação e edição de planilhas, e que são convertidas a tabelas, tal como segue para o exemplo da purificação acima:\n```{r plan purif dplyr}\n# Tabela de purificação de enzima com pacote 'dplyr':\n\nlibrary(dplyr)\npurif.plan7 <- mutate(purif.plan, ativ.esp = ativ.tot / prot.total)\npurif.plan7\n```\n\n|       Observe que com o pacote 'dplyr' a inserção de uma nova coluna não requereu um novo vetor para nomes de colunas ('colnames'). Além disso, a planilha final foi elaborada junto à gramática do pacote 'tibble' do *Tidyverse*. Essa facilidade também se extende para os processos de edição e filtragem da planilha, tal a extração de uma coluna modificada:\n\n```{r plan purif altera coluna}\nativ.tot.kU <- transmute(purif.plan7, ativ.tot = ativ.tot / 1e3)\nativ.tot.kU # vetor de atividade específica em U x 10^3\n```\n\n|       Dessa forma pode-se construir uma tabela completa de purificação, elencando-se, além da *atividade específica*, o *nível de purificação* (de quantas vezes a atividade específica aumentou em relação à da amostra inicial) e o *rendimento* obtido (de quantas vezes o teor da enzima alvo reduziu em relação à amostra inicial - atividade remanescente):\n\n```{r}\npurif.plan8 <- mutate(purif.plan7,\n  purif = ativ.esp / ativ.esp[1], # nível de purificação\n  rend.perc = 100 * ativ.tot / ativ.tot[1]\n) # rendimento percentual\n\n# Convetendo à tabela...\nlibrary(knitr)\nknitr::kable(purif.plan8, caption = \"Tabela de purificação para uma enzima\", \"pipe\")\n```\n\n|       Adicionalmente, o 'R' possui alguns pacotes que agilizam a criação/edição de planilhas de modo interativo e mais próximo ao de uma planilha eletrônica convencional, dentre os quais destaca-se o pacote 'DT', uma biblioteca elaborada em *JavaScript* que produz uma planilha editável em *HTML*:\n\n```{r plan purif DT, eval=FALSE, include=TRUE}\nlibrary(DT)\npurif.plan9 <- as.data.frame(purif.plan8)\nrownames(purif.plan9) <- c(\"extr.bruto\", \"NH4SO2\", \"acetona\", \n                           \"Sephadex G-100\", \"DEAE-celulose\",\n                           \"C8-fase rev\") # converte a tabela de purificação\n# em planilha para se utilizada pelo pacote DT\ndatatable(purif.plan9) %>% formatRound(1:5, 1) # colunas com 1 casa decimal\n```\n\n|       Por tratar-se de saída em HTML interativo, o resultado do trecho de código precisa ser omitido para a correta compilação pelo 'R' (eval=FALSE, include=TRUE).\n\n|       A biblioteca 'DT' permite, entre outros, reordenamento, filtragem, e mesmo edição dos valores, de modo interativo (basta clicar na célula desejada):\n\n```{r plan purif DT edit, eval=FALSE, include=TRUE}\nDT::datatable(purif.plan9, editable = \"cell\")\n```\n\n\n## Interação de oxigênio com mioglobina e hemoglobina\n\n|     Tanto a mioglobina (*PD 1MBO*) como a hemoglobina humanas (*PDB 6BB5*) constituem proteínas de transporte do oxigênio molecular. A hemoglobina, de estrutura quaternária, o faz dos pulmões aos tecidos, enquanto que a mioglobina, terciária, o distribui entre esses. Suas curvas de saturação com oxigênio são bem conhecidas em livros-texto, cujo aprendizado pode agregar valor quando simuladas.\n\n|     Dessa forma, pode-se considerar a ligação do O$_{2}$ à mioglobina como uma fração de saturação *y* dada em função de sua meia satuação a 50% de pressão de O$_{2}$ (constante de dissociação *$K_{50}$* de 2.8 mmHg). \n\n\n$$\ny=\\frac{pO_2}{K_{50}+pO_2}\n$$ {#eq-Mb}\n\nPor outro lado, o valor de *$K_{50}$* para a hemoglobina é de 26 mmHg, mas sua função exprime-se de forma diferente à da mioglobina:\n\n$$\ny=\\frac{pO_2^{nH}} {K_{50}^{nH}+pO_2^{nH}}\n$$ {#eq-Hb}\n\n\n\nNessa @eq-Hb, *nH* representa o coeficiente de cooperatividade de Hill, que resume a energia distribuida entre as quatro constantes microscópicas de dissociação de O$_{2}$ aos quatro centros porfirínicos da hemoglobina (grupos *heme*). Simulando ambas as curvas:\n\n```{r, fig.cap=\"Isoterma de saturação de oxigênio à mioglobina (linha contínua) e hemoglobina (linha pontilhada), indicando o intercepto em pO2 de 50% (meia saturação).\"}\nK50 <- 2.8\ncurve(x / (K50 + x),\n  xlim = c(0, 100),\n  xlab = \"pO2 (mmHg)\", ylab = \"y\", lty = \"dotted\"\n)\n\nK50 <- 26\nnH <- 2.8\ncurve(x^nH / (K50^nH + x^nH),\n  xlim = c(0, 100),\n  xlab = \"pO2 (mmHg)\", ylab = \"y\", col = \"red\",\n  add = TRUE\n) # \"add\" permite adicionar curvas ao gráfico\nabline(0.5, 0, lty = 2) # acrescenta linha de base em meia saturação\n```\n\n|    Como mencionado no parágrafo anterior, aos quatro centros de ligação com oxigênio molecular reportam-se quatro constantes microscópicas de equilíbrio de dissociação, de *K1* a *K4*. Simplificando o valor de pO$_{2}$ para *L*, ligante, é possível também representar a ligação de O$_{2}$ à hemoglobina pela equação de Adair [@pauling1935oxygen]:\n\n\n$$\ny=\\frac{K1*L+2*K2*K1*L^2+3*K3*K2*K1*L^3+4*K4*K3*K2*K1*L^4} {4*(1+K1*L+2*K2*K1*L^2+3*K3*K2*K1*L^3+4*K4*K3*K2*K1*L^4)}\n$${#eq-HbKmicro}\n\n|     Ocorre que existe um efeito estatístico associado à interação em estudo, já que o O$_{2}$ possui 4 sítios iniciais de interação à hemoglobina [@tyuma1973analysis], valores que reduzem até a saturação dos 4 sítios. Dessa forma, é necessário contabilizar as constantes microscópicas *Ki* em razão desse comprometimento estatístico:\n\n\n$$\nKi_{corr} = \\frac{i}{N-1+i}*Ki\n$$ {#eq-HbKSta}\n\n|     No R, isso pode ser auxiliado por um *loop for*:\n\n```{r}\nK <- c(0.011, 0.016, 0.118, 0.400) # vetor de constantes microscópicas de \n# dissociação de Hb para O2\nL <- seq(1, 201, 2) # vetor de teores de O2\n\nKcorr <- c() # inicializa um vetor vazio para saída do vetor corrigido de Ki\nN <- 4 # declara o número de sítios na Hb\nfor (i in 1:N) Kcorr[i] <- i / (N - i + 1) * K[i]\nKcorr # apresenta o vetor de valores de Ki corrigidos para o efeito estatístico\n```\n\n|     Perceba que os valores para *Ki* corrigidos estão em proporção que segue a disponibilidade de sítios, de 4 vezes menor para o 1o. sítio (maior ligação), até 4 vezes maior para o 4o. sítio (menor ligação). Agora é possível aplicar-se a @eq-HbKmicro utilizando-se as constantes calculadas como segue:\n\n```{r, fig.cap=\"Isoterma de saturação de oxigênio à hemoglobina pela equação de Adair.\"}\nnumer <- K[1] * L + 2 * K[2] * K[1] * L^2 + 3 * K[3] * K[2] * K[1] * L^3 + \n  4 * K[4] * K[3] * K[2] * K[1] * L^4\ndenom <- 1 + numer\ny <- numer / denom\nplot(L, y, xlab = \"pO2\", type = \"l\", col = 2)\n```\n\n|       Por fim, também é possível obter a curva de ligação utilizando-se uma variação de *loop for* na qual a @eq-HbKmicro é produzida por iteração, como segue [@bloomfield2009computer]:\n\n```{r, fig.cap=\"Curva de saturação de oxigênio à hemoglobina obtida por iteração da equação de Adair, tal como corrigida para o efeito estatístico.\"}\n# Cálculo de y em cada L\nYi <- function(L, Kcorr) {\n  N <- length(Kcorr)\n  conc <- c()\n  conc[1] <- L * Kcorr[1]\n  for (i in 2:N) conc[i] <- conc[i - 1] * L * Kcorr[i]\n  numer2 <- sum((1:N) * conc) / N\n  denom2 <- 1 + sum(conc)\n  return(numer2 / denom2)\n}\n\n# Cálculo de y para o vetor de L\nY <- function(L, Kcorr) {\n  YY <- c()\n  for (j in 1:length(L)) YY[j] <- Yi(L[j], Kcorr)\n  return(YY)\n}\n\n#  Aplicação da função de y para L e gráfico\nYfinal <- Y(L, Kcorr)\nplot(L, Yfinal, type = \"l\", col = 2, xlab = \"pO2\", ylab = \"y\")\n```\n\n|       Observe que há mínimas diferenças entre as curvas obtidas pelos distintos procedimentos, em razão dos diferentes algoritmos utilizados.\n\n## Alguns pacotes do R para estudo de proteínas\n\n|       Alguns pacote do R são bastante úteis no estudo de proteínas, em especial a biblioteca `seqinr` vista no capítulo de *Aminoácidos*, e que computa diversos valores e informações para sequências proteicas, tais como *pI*, index de hidroxipatia, distribuição de resíduos, entre outros. O sítio do projeto [^seqinrSitio-1] contém informação detalhada para seu uso. Utilizando-se o mesmo procedimento para obtenção da sequência *FASTA* para a lisozima do capítulo de *Aminoácidos* (código CAA32175 no sítio *NCBI*), pode-se obter um conjunto extenso de informações da proteína, como exemplificado abaixo:\n\n[^seqinrSitio-1]: Sítio do projeto Seqinr: http://seqinr.r-forge.r-project.org/\n\n```{r}\nlibrary(seqinr)\nlisozima <- c(\"KVFERCELARTLKRLGMDGYRGISLANWMCLAKWESGYNTRATNYNAGDRSTDYGIFQ\nINSRYWCNDGKTPGAVNACHLSCSALLQDNIADAVACAKRVVRDPQGIRAWVAWRNRCQNRDVRQYVQGCGV\")\nseq_liso <- s2c(lisozima) # converte sequência de string de aminoácidos para \n# o padrão do seqinr (vetor de caracteres)\nseq_liso2 <- seq_liso[seq_liso != \"\\n\"] # eliminação de espaços exigida pelo\n # seqinr advindos do procedimento de copiar/colar.\nseq_liso2\npmw(seq_liso2) # peso molecular da proteína\naaa(seq_liso2) # distribuição de resíduos\nAAstat(seq_liso2, plot = TRUE) # gráfico de distribuição, composição \n# e proporção de resíduos, valor de pI\n```\n\n|       Entre outras funções constantes do `seqinr` inclui-se a conversão de aminoácidos para abreviações de 1 e 3 letras (`a`e `aaa`, respectivamente), listagem de 544 propriedades físico-químicas dos 20 aminoácidos proteicos (`aaindex`),`pK` (autoexplicativo, e visto anteriormente),  e cômputo isolado de *pI* (`computePI`) e de massa molecular (`pmw`), além de várias outras, tanto para proteômica como para genômica. \n|       Outro pacote do R interessante para estudo de proteínas é o *Peptides* [^Peptides-1],  que também computa diversas propriedades físico-químicas para sequências de aminoácidos, além de possibilitar a integração de plotagem com o pacote de dinâmica molecular *GROMACS*. Como para o `seqinr`, o `Peptides` necessita de conversão da sequência em *string* para o padrão vetorial reconhecido. Entre as funções do pacote destacam-se o cômputo de 66 descritores para cada aminoácido de uma sequência (`aaDescriptors`), a composição da sequência por classificação dos resíduos (`aaComp`), o cômputo de índice alifático (`aIndex`), o índice de hidrofobicidade (`hydrophobicity`), índice de instabilidade (`instalIndex`), relação de massa/carga (`mz`), massa molecular (`mw`), e pI (`pI`), entre outros.\n|       Entre pacotes mais direcionados ao estudo comparativo e visualização de estruturas, bem como para descritores de bioinformática e quimiogenômica vale mencionar `Bio3d`, `Autoplotprotein`, `protr`, `BioMedR`, e `UniprotR`, entre muitos. \n\n[^Peptides-1]: Pacote Peptides: https://cran.r-project.org/web/packages/Peptides/index.html\n\n\n\n","srcMarkdownNoYaml":"\n\n\n## Composição de aminoácidos {#sec-Proteinas}\n\n|     Proteínas constituem biopolímeros formados por 20 aminoácidos. Dessa forma pode-se avaliar facilmente a composição de qualquer proteína disponível em banco de dados, como o *PDB* visto no capítulo de *Aminoácidos*. Tomando-se a albumina de soro humano como exemplo, código *AAA98797* do *National Center for Biotechnology Information*, é possível contabilizar os 20 tipos de aminoácidos que compõe sua sequência. Para isto basta considerar a sequência *FASTA* como uma *string*, e extrair a quantidade de cada letra, utilizando-se a biblioteca *stringr*, como segue.\n\n\n|     Primeiro, obtém-se a sequência *FASTA* da albumina de soro. \n\n```{r  bsa seq}\nseq <- \"MKWVTFISLLFLFSSAYSRGVFRRDAHKSEVAHRFKDLGEENFKALVLIAFAQYLQQCPFEDHVKLVNEV\nTEFAKTCVADESAENCDKSLHTLFGDKLCTVATLRETYGEMADCCAKQEPERNECFLQHKDDNPNLPRLV\nRPEVDVMCTAFHDNEETFLKKYLYEIARRHPYFYAPELLFFAKRYKAAFTECCQAADKAACLLPKLDELR\nDEGKASSAKQRLKCASLQKFGERAFKAWAVARLSQRFPKAEFAEVSKLVTDLTKVHTECCHGDLLECADD\nRADLAKYICENQDSISSKLKECCEKPLLEKSHCIAEVENDEMPADLPSLAADFVESKDVCKNYAEAKDVF\nLGMFLYEYARRHPDYSVVLLLRLAKTYETTLEKCCAAADPHECYAKVFDEFKPLVEEPQNLIKQNCELFE\nQLGEYKFQNALLVRYTKKVPQVSTPTLVEVSRNLGKVGSKCCKHPEAKRMPCAEDYLSVVLNQLCVLHEK\nTPVSDRVTKCCTESLVNRRPCFSALEVDETYVPKEFNAETFTFHADICTLSEKERQIKKQTALVELVKHK\nPKATKEQLKAVMDDFAAFVEKCCKADDKETCFAEEGKKLVAASQAALGL\"\n```\n\n|     Pode-se observar que há espaços vazios, que podem ser omitidos por razões estéticas ou não, já que o pacote *stringr* não os contabilizará, contrariamente a pacotes mais específicos para sequências biológicas, como o *seqinr* visto anteriormente. Mas se desejar omitir esses espaços, basta executar o código abaixo.\n\n```{r, eval=FALSE}\nseq <- seq[seq != \"\\n\"]\nseq # operação booleana != significa \"não\"\n```\n\nA seguir, obtém-se o quantitativo de uma letra específica da sequência.\n\n```{r}\nlibrary(stringr)\naa <- str_count(seq, pattern = \"A\")\naa\n```\n\n|     Veja que o comando `str_count` contabiliza apenas a letra \"A\" na sequência. Dessa forma, é possível obter todos os 20 aminoácidos, repetindo-se esse comando.\n\n```{r}\nlibrary(stringr)\nala <- str_count(seq, pattern = \"A\")\narg <- str_count(seq, pattern = \"R\")\nasn <- str_count(seq, pattern = \"N\")\nasp <- str_count(seq, pattern = \"D\")\ncys <- str_count(seq, pattern = \"C\")\nglu <- str_count(seq, pattern = \"E\")\ngln <- str_count(seq, pattern = \"Q\")\ngly <- str_count(seq, pattern = \"G\")\nhis <- str_count(seq, pattern = \"H\")\nile <- str_count(seq, pattern = \"I\")\nleu <- str_count(seq, pattern = \"L\")\nlys <- str_count(seq, pattern = \"K\")\nmet <- str_count(seq, pattern = \"M\")\nphe <- str_count(seq, pattern = \"F\")\npro <- str_count(seq, pattern = \"P\")\nser <- str_count(seq, pattern = \"S\")\nthr <- str_count(seq, pattern = \"T\")\ntrp <- str_count(seq, pattern = \"W\")\ntyr <- str_count(seq, pattern = \"Y\")\nval <- str_count(seq, pattern = \"V\")\n```\n\nE, para visualizar o resultado numa tabela:\n\n\n```{r, bsa compos, tidy=TRUE, tidy.opts=list(width.cutoff=50)}\naa_3abrev <- c(\"Ala\", \"Arg\", \"Asn\", \"Asp\", \"Cys\", \"Glu\", \"Gln\", \"Gly\", \"His\", \"Ile\", \"Leu\", \"Lys\", \"Met\", \"Phe\", \"Pro\", \"Ser\", \"Thr\", \"Trp\", \"Tyr\", \"Val\")\naa_quant <- c(ala, arg, asn, asp, cys, glu, gln, gly, his, ile, leu, lys, met, phe, pro, ser, thr, trp, tyr, val) # vetor com o quantitativo de aminoácidos da proteína\naa_seq <- data.frame(aa_3abrev, aa_quant) # dataframe com os resultados\ncolnames(aa_seq) <- c(\"Tipo\", \"Qtde\") # renomear as colunas\n\n\n# Composição de aminoácidos em albumina de soro humano\naa_seq # apresenta a tabela\n```\n\n|       O 'R' possui alguns comandos para a geração estética de tabelas, entre os quais os incluídos no pacote 'knitr', como segue:\n```{r}\nlibrary(knitr) # para gerar a tabela\n\nknitr::kable(aa_seq, caption = \"Composição de aminoácidos em albumina \n             # de soro humano.\", \"pipe\") # tabela\n```\n\n|     Observe que, à despeito do resultado obtido, houve certo trabalho em se obter a composição da albumina, a partir das 20 linhas modificadas para cada aminoácido. Uma alternativa mais prática consiste em considerar um *loop* que execute a extração da informação desejada para um vetor contendo a abreviação de uma letra para cada aminoácido. \n\n```{r loop table bsa}\naa_1abrev <- c(\"A\", \"R\", \"N\", \"D\", \"C\", \"E\", \"Q\", \"G\", \"H\", \"I\", \"L\", \"K\", \"M\",\n               \"F\", \"P\", \"S\", \"T\", \"W\", \"Y\", \"V\")\nfor (i in aa_1abrev) {\n  aa_quant2 <- str_count(seq, pattern = aa_1abrev)\n  return(aa_quant2) # sintaxe opcional para função com apenas uma saída\n}\n\n\naa_seq <- data.frame(aa_3abrev, aa_quant2) # dataframe com os resultados\ncolnames(aa_seq) <- c(\"Tipo\", \"Qtde\") # renomear as colunas\nknitr::kable(aa_seq, caption = \"Composição de aminoácidos em albumina de soro\n             humano (uso de loop).\", \"pipe\") # tabela\n```\n\n|     Dessa forma obtém-se o mesmo resultado, mas com menor consumo de memória e maior velocidade de processamento, características em qualquer lógica de programação. Apesar do *loop* exemplificar uma automação, a função `str_count` retém em si um *loop* interno, já que aplica uma função de contagem de elementos a uma sequência, a partir de um padrão pré-definido (o vetor *aa_1abrev*, no caso). Dessa forma, pode-se simplificar ainda mais o script, não necessitando do *loop* externo.\n\n```{r}\nstr_count(seq, pattern = aa_1abrev)\n```\n\n|     Diversas funções do R exibem esse *loop* interno, e que pode ser aplicado em vetores, listas, matrizes e *dataframes* (planilha de dados). As mais simples envolvem a aplicação de uma função pré-programada do R a um vetor, por ex:\n\n```{r}\ny <- c(1, 2, 4, 8, 16, 32)\nmean(y)\nsum(y)\n```\n|       Outra vetorização frequente decorre da aplicação de uma *função* de usuário a vetor, reduzindo a necessidade de repetição de comandos, como no exemplo abaixo:\n\n```{r size prot estim} \n# Tamanho médio estimado de uma proteína a partir do no. de resíduos de\n# aminoácidos\nprot.tamanho <- function(x) {\n  MM <- x * 110 # 'x' representa o número de aminoácidos da proteína\n  return(MM)\n}\n\nprot.tamanho(575) # no. de resíduos de aminoácidos de albumina humana\n```\n\n|       Outra forma de vetorização envolve a família de funções `apply`, composta pelos comandos `apply`, `sapply`, `tapply`, `lapply`, e `mapply`. Embora possuam processamento mais rápido que funções de *loop* externo para uso de matrizes muito complexas, cada qual é voltado a um objeto distinto ou situação específica do R (retorno de lista, vetor ou matriz), permite o uso de `subset` (subconjuntos de dados), utiliza funções do R ou funções previamente definidas pelo usuário, e roda em apenas uma linha de comando. Essas vantagens contrapõe-se ao uso de *loop for* aplicado para vetores. Contudo, a vetorização opera muito bem quando se deseja aplicar ou mapear  uma função a um vetor/matriz/lista. Quando, por outro lado, se deseja aplicar uma função cujo resultado dependa de mais de um vetor/matriz/lista, o *loop for* torna-se indispensável, como na titulação de ácidos fracos do capítulo de *Aminoácidos*.\n\n|     Seja qual for o método empregado (e aí vale destacar as chamadas *boas práticas de programação* na construção de *scripts* [^label-1]), é possível construir uma composição mais geral para o conjunto de resíduos da proteína. Assim, podemos obter qualquer relação quantitativa a partir da sequência, já que a estamos tratando como uma *string*. Exemplificando, uma tabela contendo a classe de cada aminoácido que compõe a sequência.\n\n[^label-1]: Algumas práticas de programação (*Best Codes*):\n1) organizar um projeto em pastas (ex: dados,figuras,scripts) ou criar um pacote do R como opção; 2) criar seções num código pra facilitar localização; 3) nomear os *code chunks* (pedaços de código); 4) colocar no início do código as bibliotecas utilizadas, fontes, e chamada de dados (evita procurar algo necessário pro *script* rodar ao longo do código); 5) identar, preferivelmente com 1 ou 2 comandos por linha; 6) parâmetros de função sempre dentro de função; 7) evitar parâmetros globais; 8) não usar 'attach'; 8) usar parâmetros com nomes intuitivos (e não x e y; ex: nome_função); 9) atribuir nomes à objetos com uma das três convenções nominais (ex: KiCompet, ki_compet, ki.compet).\n\n\n```{r}\naa_ac <- aa_seq[4, 2] + aa_seq[6, 2] # AA ácicos\naa_bas <- aa_seq[2, 2] + aa_seq[9, 2] + aa_seq[12, 2] # AA básicos\naa_arom <- aa_seq[14, 2] + aa_seq[18, 2] + aa_seq[19, 2] # AA aromáticos\naa_alif <- aa_seq[10, 2] + aa_seq[11, 2] + aa_seq[15, 2] + aa_seq[1, 2] +\n  aa_seq[20, 2] # AA alifáticos\naa_pol <- aa_seq[3, 2] + aa_seq[5, 2] + aa_seq[7, 2] + aa_seq[8, 2] + \n  aa_seq[13, 2] + aa_seq[16, 2] + aa_seq[17, 2] ## AA polares neutros\n```\n|     Agora, ao invés de se construir uma tabela com a contagem desses grupos, façamos o percentual dos mesmos, para uma visão mais geral da sequência.\n\n```{r}\naa_tot <- str_count(seq, pattern = \"\") # comprimento da sequência\nclass_perc <- round(c(aa_ac, aa_bas, aa_arom, aa_alif, aa_pol) / aa_tot * 100)\n```\n\nE agora, sim, constroi-se a tabela.\n\n```{r}\naa_class <- c(\"ácido\", \"básico\", \"aromático\", \"alifático\", \"polar\")\naa_perc <- data.frame(aa_class, class_perc) # dataframe com os resultados\ncolnames(aa_perc) <- c(\"Classe\", \"%\") # renomear as colunas\nknitr::kable(aa_perc, caption = \"Distribuição de classes de aminoácidos \n             em albumina humana.\", \"pipe\") # tabela\n```\n\n|     Percebe-se pela tabela acima que a distribuição de classes de resíduos de aminoácidos na albumina é razoavelmente homogênea, o que contribui para sua função anfotérica de transporte para compostos polares (ex:cálcio) e apolares (ex: colesterol, ácidos graxos).\n\n## Tabela de  Purificação de Proteínas & R como planilha eletrônica\n\n|      Não obstante a facilidade com que podemos elaborar/editar planilhas eletrônicas convencionais (*spreadsheet*; ex: MS Excel, Libreoffice Calc, Gnumeric, etc), o 'R' também permite trabalhar-se com planilhas. Ainda que menos intuitivo como as mencionadas, a scriptagem no R permite a elaboração/edição de planilhas de alta complexidade, dada a natureza da programação estatística que envolve a suite.\n|       Para exemplificar a construção de uma planilha simples, tomemos como exemplo uma *Tabela de Purificação de Proteínas*, usualmente utilizada em Biotecnologia e áreas afins. A forma mais simples de construção de uma planilha envolve 1) a elaboração individual de vetores, e 2) a união dos vetores em uma planilha. \n|       Os procedimentos para purificação (ou isolamento, fracionamento) proteica envolvem técnicas como **tratamento químico (precipitação por sulfato de amônio, acetona)**, **tratamento ácido**, **tratamento térmico**, **diálise**,  **cromatografia (filtração molecular, troca-iônica, afinidade, fase reversa)**, entre outros. Para aferição do grau de pureza da amostra obtida utilizam-se normalmente a **eletroforese** simples, **focalização isoelétrica**, **eletroforese 2D**, uso de **anticorpos monoclonais**, e **ensaios de atividade** específicos, dentre vários.\n|       Para a tabela de purificação são exigidos somente os vetores de **massa de amostra** e de **atividade enzimática da amostra**, obtidos em cada etapa de purificação. Uma planilha simples poderia ser construida como:\n\n\n```{r plan purif}\n# Elaboração de planilha simples de purificação de enzima\n# (cada elemento do vetor representa uma etapa de purificação)\n\n# 1. Definição dos vetores principais:\nprot.total <- c(6344, 302, 145, 34, 10, 3.8) # proteína, mg\nativ.tot <- c(200, 122, 106, 70, 53, 24) * 1000 # atividade, U\n\n# 2. Construção da planilha:\npurif.plan <- data.frame(prot.total, ativ.tot)\npurif.plan\n```\n\n|       A planilha construida compõe agora um 'dataset' do R. Há outras formas de construção simples, também, como o uso da função 'cbind' (pra união de colunas) ou 'rbind' (união de linhas; rows):\n\n```{r plan purif cbind}\npurif.plan2 <- cbind(prot.total, ativ.tot)\npurif.plan2\n```\n\n|       Seja qual for o procedimento, pode-se alterar os nomes das colunas, como segue:\n\n```{r plan purif colnames}\n# Edição de nome de colunas\ncolnames(purif.plan2) <- c(\"totalProt\", \"enzAtiv\")\npurif.plan2\n```\n\n|       Como numa planilha convencional, também é possível se criar novos vetores calculados a partir dos iniciais:\n\n```{r plan purif calc}\npurif.plan3 <- data.frame(prot.total, ativ.tot, ativ.tot / prot.total)\noptions(digits = 1) # opção para no. de casas decimais\ncolnames(purif.plan3) <- c(\"prot.total\", \"ativ.tot\", \"ativ.specif\")\nrownames(purif.plan3) <- c(\"extr.bruto\", \"NH4SO2\", \"acetona\", \n                           \"Sephadex G-100\", \"DEAE-celulose\", \"C8-fase rev\")\npurif.plan3\n```\n\n|       A planilha pode ser editada em seus valores, também, bastando pra isso atribuir um novo nome para que as modificações sejam salvas:\n\n```{r plan purif edit, eval=FALSE}\n# Edição simples de planilha (alterações de valores e nomes de colunas)\n\npurif.plan4 <- edit(purif.plan3) # ou data.entry( )\n```\n\n|       É claro, também, que se pode importar os dados de uma planilha já construida em outro programa. Exemplificando para uma planilha salva como *CSV*: \n\n```{r plan purif import, eval = FALSE}\n# Importação de dados de outra planilha (CSV):\n\n# 1. Importação com nome da planilha desejada:\npurif.plan5 <- read.table(\"planilha.csv\", header = T, sep = \",\")\n\n# 2. Importação com tela de busca da planilha desejada:\npurif.plan5 <- frame <- read.csv(file.choose())\n```\n\n|       Um grande número de operações pode ser conduzido em planilhas no 'R', tais como inserção, deleção, modificação, agregação (*merge*), filtragem, extração de subconjunto, operações matemáticas e cálculos estatísticos (média, desvio-padrão, etc). Pode-se também converter a planilha em uma tabela de visual mais completo, por uso da biblioteca 'tibble', parte de um conjunto de pacotes utilizado em ciência de dados denominado *Tidyverse* :\n\n```{r plan purif convert tibble}\nlibrary(tibble)\npurif.plan6 <- as_tibble(purif.plan3)\npurif.plan6\n```\n\n\n|       O *Tidyverse* compõe um ecossistema de pacotes do 'R' que comungam da mesma filosofia, gramática e estrutura de dados. Entre esses pacotes inlcui-se o 'tibble' (tabelas), 'ggplot2' (gráficos de alta qualidade visual), e 'dplyr' (manipulação de dados). No que tange ao 'dplyr', é bastante flexível a criação e edição de planilhas, e que são convertidas a tabelas, tal como segue para o exemplo da purificação acima:\n```{r plan purif dplyr}\n# Tabela de purificação de enzima com pacote 'dplyr':\n\nlibrary(dplyr)\npurif.plan7 <- mutate(purif.plan, ativ.esp = ativ.tot / prot.total)\npurif.plan7\n```\n\n|       Observe que com o pacote 'dplyr' a inserção de uma nova coluna não requereu um novo vetor para nomes de colunas ('colnames'). Além disso, a planilha final foi elaborada junto à gramática do pacote 'tibble' do *Tidyverse*. Essa facilidade também se extende para os processos de edição e filtragem da planilha, tal a extração de uma coluna modificada:\n\n```{r plan purif altera coluna}\nativ.tot.kU <- transmute(purif.plan7, ativ.tot = ativ.tot / 1e3)\nativ.tot.kU # vetor de atividade específica em U x 10^3\n```\n\n|       Dessa forma pode-se construir uma tabela completa de purificação, elencando-se, além da *atividade específica*, o *nível de purificação* (de quantas vezes a atividade específica aumentou em relação à da amostra inicial) e o *rendimento* obtido (de quantas vezes o teor da enzima alvo reduziu em relação à amostra inicial - atividade remanescente):\n\n```{r}\npurif.plan8 <- mutate(purif.plan7,\n  purif = ativ.esp / ativ.esp[1], # nível de purificação\n  rend.perc = 100 * ativ.tot / ativ.tot[1]\n) # rendimento percentual\n\n# Convetendo à tabela...\nlibrary(knitr)\nknitr::kable(purif.plan8, caption = \"Tabela de purificação para uma enzima\", \"pipe\")\n```\n\n|       Adicionalmente, o 'R' possui alguns pacotes que agilizam a criação/edição de planilhas de modo interativo e mais próximo ao de uma planilha eletrônica convencional, dentre os quais destaca-se o pacote 'DT', uma biblioteca elaborada em *JavaScript* que produz uma planilha editável em *HTML*:\n\n```{r plan purif DT, eval=FALSE, include=TRUE}\nlibrary(DT)\npurif.plan9 <- as.data.frame(purif.plan8)\nrownames(purif.plan9) <- c(\"extr.bruto\", \"NH4SO2\", \"acetona\", \n                           \"Sephadex G-100\", \"DEAE-celulose\",\n                           \"C8-fase rev\") # converte a tabela de purificação\n# em planilha para se utilizada pelo pacote DT\ndatatable(purif.plan9) %>% formatRound(1:5, 1) # colunas com 1 casa decimal\n```\n\n|       Por tratar-se de saída em HTML interativo, o resultado do trecho de código precisa ser omitido para a correta compilação pelo 'R' (eval=FALSE, include=TRUE).\n\n|       A biblioteca 'DT' permite, entre outros, reordenamento, filtragem, e mesmo edição dos valores, de modo interativo (basta clicar na célula desejada):\n\n```{r plan purif DT edit, eval=FALSE, include=TRUE}\nDT::datatable(purif.plan9, editable = \"cell\")\n```\n\n\n## Interação de oxigênio com mioglobina e hemoglobina\n\n|     Tanto a mioglobina (*PD 1MBO*) como a hemoglobina humanas (*PDB 6BB5*) constituem proteínas de transporte do oxigênio molecular. A hemoglobina, de estrutura quaternária, o faz dos pulmões aos tecidos, enquanto que a mioglobina, terciária, o distribui entre esses. Suas curvas de saturação com oxigênio são bem conhecidas em livros-texto, cujo aprendizado pode agregar valor quando simuladas.\n\n|     Dessa forma, pode-se considerar a ligação do O$_{2}$ à mioglobina como uma fração de saturação *y* dada em função de sua meia satuação a 50% de pressão de O$_{2}$ (constante de dissociação *$K_{50}$* de 2.8 mmHg). \n\n\n$$\ny=\\frac{pO_2}{K_{50}+pO_2}\n$$ {#eq-Mb}\n\nPor outro lado, o valor de *$K_{50}$* para a hemoglobina é de 26 mmHg, mas sua função exprime-se de forma diferente à da mioglobina:\n\n$$\ny=\\frac{pO_2^{nH}} {K_{50}^{nH}+pO_2^{nH}}\n$$ {#eq-Hb}\n\n\n\nNessa @eq-Hb, *nH* representa o coeficiente de cooperatividade de Hill, que resume a energia distribuida entre as quatro constantes microscópicas de dissociação de O$_{2}$ aos quatro centros porfirínicos da hemoglobina (grupos *heme*). Simulando ambas as curvas:\n\n```{r, fig.cap=\"Isoterma de saturação de oxigênio à mioglobina (linha contínua) e hemoglobina (linha pontilhada), indicando o intercepto em pO2 de 50% (meia saturação).\"}\nK50 <- 2.8\ncurve(x / (K50 + x),\n  xlim = c(0, 100),\n  xlab = \"pO2 (mmHg)\", ylab = \"y\", lty = \"dotted\"\n)\n\nK50 <- 26\nnH <- 2.8\ncurve(x^nH / (K50^nH + x^nH),\n  xlim = c(0, 100),\n  xlab = \"pO2 (mmHg)\", ylab = \"y\", col = \"red\",\n  add = TRUE\n) # \"add\" permite adicionar curvas ao gráfico\nabline(0.5, 0, lty = 2) # acrescenta linha de base em meia saturação\n```\n\n|    Como mencionado no parágrafo anterior, aos quatro centros de ligação com oxigênio molecular reportam-se quatro constantes microscópicas de equilíbrio de dissociação, de *K1* a *K4*. Simplificando o valor de pO$_{2}$ para *L*, ligante, é possível também representar a ligação de O$_{2}$ à hemoglobina pela equação de Adair [@pauling1935oxygen]:\n\n\n$$\ny=\\frac{K1*L+2*K2*K1*L^2+3*K3*K2*K1*L^3+4*K4*K3*K2*K1*L^4} {4*(1+K1*L+2*K2*K1*L^2+3*K3*K2*K1*L^3+4*K4*K3*K2*K1*L^4)}\n$${#eq-HbKmicro}\n\n|     Ocorre que existe um efeito estatístico associado à interação em estudo, já que o O$_{2}$ possui 4 sítios iniciais de interação à hemoglobina [@tyuma1973analysis], valores que reduzem até a saturação dos 4 sítios. Dessa forma, é necessário contabilizar as constantes microscópicas *Ki* em razão desse comprometimento estatístico:\n\n\n$$\nKi_{corr} = \\frac{i}{N-1+i}*Ki\n$$ {#eq-HbKSta}\n\n|     No R, isso pode ser auxiliado por um *loop for*:\n\n```{r}\nK <- c(0.011, 0.016, 0.118, 0.400) # vetor de constantes microscópicas de \n# dissociação de Hb para O2\nL <- seq(1, 201, 2) # vetor de teores de O2\n\nKcorr <- c() # inicializa um vetor vazio para saída do vetor corrigido de Ki\nN <- 4 # declara o número de sítios na Hb\nfor (i in 1:N) Kcorr[i] <- i / (N - i + 1) * K[i]\nKcorr # apresenta o vetor de valores de Ki corrigidos para o efeito estatístico\n```\n\n|     Perceba que os valores para *Ki* corrigidos estão em proporção que segue a disponibilidade de sítios, de 4 vezes menor para o 1o. sítio (maior ligação), até 4 vezes maior para o 4o. sítio (menor ligação). Agora é possível aplicar-se a @eq-HbKmicro utilizando-se as constantes calculadas como segue:\n\n```{r, fig.cap=\"Isoterma de saturação de oxigênio à hemoglobina pela equação de Adair.\"}\nnumer <- K[1] * L + 2 * K[2] * K[1] * L^2 + 3 * K[3] * K[2] * K[1] * L^3 + \n  4 * K[4] * K[3] * K[2] * K[1] * L^4\ndenom <- 1 + numer\ny <- numer / denom\nplot(L, y, xlab = \"pO2\", type = \"l\", col = 2)\n```\n\n|       Por fim, também é possível obter a curva de ligação utilizando-se uma variação de *loop for* na qual a @eq-HbKmicro é produzida por iteração, como segue [@bloomfield2009computer]:\n\n```{r, fig.cap=\"Curva de saturação de oxigênio à hemoglobina obtida por iteração da equação de Adair, tal como corrigida para o efeito estatístico.\"}\n# Cálculo de y em cada L\nYi <- function(L, Kcorr) {\n  N <- length(Kcorr)\n  conc <- c()\n  conc[1] <- L * Kcorr[1]\n  for (i in 2:N) conc[i] <- conc[i - 1] * L * Kcorr[i]\n  numer2 <- sum((1:N) * conc) / N\n  denom2 <- 1 + sum(conc)\n  return(numer2 / denom2)\n}\n\n# Cálculo de y para o vetor de L\nY <- function(L, Kcorr) {\n  YY <- c()\n  for (j in 1:length(L)) YY[j] <- Yi(L[j], Kcorr)\n  return(YY)\n}\n\n#  Aplicação da função de y para L e gráfico\nYfinal <- Y(L, Kcorr)\nplot(L, Yfinal, type = \"l\", col = 2, xlab = \"pO2\", ylab = \"y\")\n```\n\n|       Observe que há mínimas diferenças entre as curvas obtidas pelos distintos procedimentos, em razão dos diferentes algoritmos utilizados.\n\n## Alguns pacotes do R para estudo de proteínas\n\n|       Alguns pacote do R são bastante úteis no estudo de proteínas, em especial a biblioteca `seqinr` vista no capítulo de *Aminoácidos*, e que computa diversos valores e informações para sequências proteicas, tais como *pI*, index de hidroxipatia, distribuição de resíduos, entre outros. O sítio do projeto [^seqinrSitio-1] contém informação detalhada para seu uso. Utilizando-se o mesmo procedimento para obtenção da sequência *FASTA* para a lisozima do capítulo de *Aminoácidos* (código CAA32175 no sítio *NCBI*), pode-se obter um conjunto extenso de informações da proteína, como exemplificado abaixo:\n\n[^seqinrSitio-1]: Sítio do projeto Seqinr: http://seqinr.r-forge.r-project.org/\n\n```{r}\nlibrary(seqinr)\nlisozima <- c(\"KVFERCELARTLKRLGMDGYRGISLANWMCLAKWESGYNTRATNYNAGDRSTDYGIFQ\nINSRYWCNDGKTPGAVNACHLSCSALLQDNIADAVACAKRVVRDPQGIRAWVAWRNRCQNRDVRQYVQGCGV\")\nseq_liso <- s2c(lisozima) # converte sequência de string de aminoácidos para \n# o padrão do seqinr (vetor de caracteres)\nseq_liso2 <- seq_liso[seq_liso != \"\\n\"] # eliminação de espaços exigida pelo\n # seqinr advindos do procedimento de copiar/colar.\nseq_liso2\npmw(seq_liso2) # peso molecular da proteína\naaa(seq_liso2) # distribuição de resíduos\nAAstat(seq_liso2, plot = TRUE) # gráfico de distribuição, composição \n# e proporção de resíduos, valor de pI\n```\n\n|       Entre outras funções constantes do `seqinr` inclui-se a conversão de aminoácidos para abreviações de 1 e 3 letras (`a`e `aaa`, respectivamente), listagem de 544 propriedades físico-químicas dos 20 aminoácidos proteicos (`aaindex`),`pK` (autoexplicativo, e visto anteriormente),  e cômputo isolado de *pI* (`computePI`) e de massa molecular (`pmw`), além de várias outras, tanto para proteômica como para genômica. \n|       Outro pacote do R interessante para estudo de proteínas é o *Peptides* [^Peptides-1],  que também computa diversas propriedades físico-químicas para sequências de aminoácidos, além de possibilitar a integração de plotagem com o pacote de dinâmica molecular *GROMACS*. Como para o `seqinr`, o `Peptides` necessita de conversão da sequência em *string* para o padrão vetorial reconhecido. Entre as funções do pacote destacam-se o cômputo de 66 descritores para cada aminoácido de uma sequência (`aaDescriptors`), a composição da sequência por classificação dos resíduos (`aaComp`), o cômputo de índice alifático (`aIndex`), o índice de hidrofobicidade (`hydrophobicity`), índice de instabilidade (`instalIndex`), relação de massa/carga (`mz`), massa molecular (`mw`), e pI (`pI`), entre outros.\n|       Entre pacotes mais direcionados ao estudo comparativo e visualização de estruturas, bem como para descritores de bioinformática e quimiogenômica vale mencionar `Bio3d`, `Autoplotprotein`, `protr`, `BioMedR`, e `UniprotR`, entre muitos. \n\n[^Peptides-1]: Pacote Peptides: https://cran.r-project.org/web/packages/Peptides/index.html\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"proteinas.html"},"language":{"toc-title-document":"Índice","toc-title-website":"Nesta página","related-formats-title":"Outros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fonte","other-links-title":"Outros Links","code-links-title":"Ligações de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Caderno do Artigo","notebook-preview-download":"Baixar Caderno","notebook-preview-download-src":"Descarregar código fonte","notebook-preview-back":"Voltar ao Artigo","manuscript-meca-bundle":"Arquivo MECA","section-title-abstract":"Resumo","section-title-appendices":"Apêndices","section-title-footnotes":"Notas de rodapé","section-title-references":"Referências","section-title-reuse":"Reuso","section-title-copyright":"Direito autoral","section-title-citation":"Citação","appendix-attribution-cite-as":"Por favor, cite este trabalho como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licença","title-block-author-single":"Autor","title-block-author-plural":"Autores","title-block-affiliation-single":"Afiliação","title-block-affiliation-plural":"Afiliações","title-block-published":"Data de Publicação","title-block-modified":"Data de Modificação","title-block-keywords":"Palavras-chave","callout-tip-title":"Dica","callout-note-title":"Nota","callout-warning-title":"Aviso","callout-important-title":"Importante","callout-caution-title":"Cuidado","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar o código","code-tools-hide-all-code":"Esconder o código","code-tools-view-source":"Ver o código fonte","code-tools-source-code":"Código fonte","tools-share":"Share","tools-download":"Download","code-line":"Linha","code-lines":"Linhas","copy-button-tooltip":"Copiar para a área de transferência","copy-button-tooltip-success":"Copiada","repo-action-links-edit":"Editar essa página","repo-action-links-source":"Ver o código fonte","repo-action-links-issue":"Criar uma issue","back-to-top":"De volta ao topo","search-no-results-text":"Nenhum resultado","search-matching-documents-text":"documentos correspondentes","search-copy-link-title":"Copiar link para a busca","search-hide-matches-text":"Esconder correspondências adicionais","search-more-match-text":"mais correspondência neste documento","search-more-matches-text":"mais correspondências neste documento","search-clear-button-title":"Limpar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Procurar","toggle-section":"Alternar seção","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo escuro","toggle-reader-mode":"Alternar modo de leitor","toggle-navigation":"Alternar de navegação","crossref-fig-title":"Figura","crossref-tbl-title":"Tabela","crossref-lst-title":"Listagem","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolário","crossref-prp-title":"Proposição","crossref-cnj-title":"Conjetura","crossref-def-title":"Definição","crossref-exm-title":"Exemplo","crossref-exr-title":"Exercício","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apêndice","crossref-sec-prefix":"Seção","crossref-eq-prefix":"Equação","crossref-lof-title":"Lista de Figuras","crossref-lot-title":"Lista de Tabelas","crossref-lol-title":"Lista de Listagens","environment-proof-title":"Comprovação","environment-remark-title":"Comentário","environment-solution-title":"Solução","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Pré-selecionado","listing-page-order-by-date-asc":"Mais velho","listing-page-order-by-date-desc":"O mais novo","listing-page-order-by-number-desc":"Decrescente","listing-page-order-by-number-asc":"Crescente","listing-page-field-date":"Data","listing-page-field-title":"Título","listing-page-field-description":"Descrição","listing-page-field-author":"Autor","listing-page-field-filename":"Nome do arquivo","listing-page-field-filemodified":"Arquivo modificado","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tempo de leitura","listing-page-field-wordcount":"Contagem de Palavras","listing-page-field-categories":"Categorias","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Tudo","listing-page-no-matches":"Nenhum item correspondente","listing-page-words":"{0} palavras","listing-page-filter":"Filtro","draft":"Rascunho"},"metadata":{"lang":"pt","fig-responsive":true,"quarto-version":"1.7.32","theme":{"light":"flatly"},"title":"Proteínas","bibliography":["referencias.bib"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}