{"title":"Matemática","markdown":{"yaml":{"number-sections":true,"toc":true,"lang":"pt","class":"fundo-basico"},"headingText":"Matemática","headingAttr":{"id":"","classes":["unnumbered"],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n<!-- #########  EXPONENCIAL versus LOGARITMO ########## -->\n\n<div class=\"mat-fundo\">  \n\n## Curvas para função exponencial *versus* logaritmo (EM13MAT401, EM13MAT402)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\nx_values <- seq(1, 10, length.out = 10)\ny_exp <- exp(x_values)  # Função exponencial\ny_log <- log(x_values)  # Função logarítmica\n\nexp_plot <- plot_ly(x = x_values, y = y_exp, type = 'scatter', mode = 'markers+lines', name = 'Exponencial') %>%\n  layout(title = \"Função Exponencial\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Exp'))\n\nlog_plot <- plot_ly(x = x_values, y = y_log, type = 'scatter', mode = 'markers+lines', name = 'Logarítmica') %>%\n  layout(title = \"Função Logarítmica\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Log'))\n\n# Combinar os gráficos\nsubplot(exp_plot, log_plot, nrows = 1) %>%\n  layout(title = \"Exponencial vs Logarítmica\", clickmode = 'event+select')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\nx_values <- seq(1, 10, length.out = 10)\ny_exp <- exp(x_values)  # Função exponencial\ny_log <- log(x_values)  # Função logarítmica\n\nexp_plot <- plot_ly(x = x_values, y = y_exp, type = 'scatter', mode = 'markers+lines', name = 'Exponencial') %>%\n  layout(title = \"Função Exponencial\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Exp'))\n\nlog_plot <- plot_ly(x = x_values, y = y_log, type = 'scatter', mode = 'markers+lines', name = 'Logarítmica') %>%\n  layout(title = \"Função Logarítmica\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Log'))\n\n# Combinar os gráficos\nsubplot(exp_plot, log_plot, nrows = 1) %>%\n  layout(title = \"Exponencial vs Logarítmica\", clickmode = 'event+select')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Alterar as cores dos gráficos:\n\n  exp_plot <- plot_ly(x = x_values, y = y_exp, type = 'scatter', mode = 'markers+lines', name = 'Exponencial', marker = list(color = 'blue'), line = list(color = 'blue')) %>% layout(title = \"Função Exponencial\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Exp'))\n\n```\n\n</div>\n\n\\\n\n<!-- #########  FUNÇÕES DE 1o, 2o, e 3o. GRAUS ########## -->\n\n<div class=\"mat-fundo\">  <!--modifica para cada área-->\n\n## Funções de 1o, 2o., e 3o. grau (EM13MAT301, EM13MAT302)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Função para gerar polinômios de 1º, 2º e 3º grau\ngenerate_data <- function(degree) {\n  x <- seq(-5, 5, length.out = 100)\n  y <- if (degree == 1) 2 * x + 1 else if (degree == 2) x^2 - 3 * x + 2 else x^3 - 2 * x^2 + x - 1\n  list(x = x, y = y)\n}\n\nplot_ly() %>%\n  add_trace(x = generate_data(1)$x, y = generate_data(1)$y, mode = 'lines') %>%\n  layout(\n    title = 'Polinômio de 1º a 3º Grau',\n    sliders = list(list(\n      steps = lapply(1:3, function(degree) {\n        list(label = degree, method = \"restyle\",\n             args = list(list(y = list(generate_data(degree)$y))))\n      })\n    ))\n  )\n\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Função para gerar polinômios de 1º, 2º e 3º grau\ngenerate_data <- function(degree) {\n  x <- seq(-5, 5, length.out = 100)\n  y <- if (degree == 1) 2 * x + 1 else if (degree == 2) x^2 - 3 * x + 2 else x^3 - 2 * x^2 + x - 1\n  list(x = x, y = y)\n}\n\nplot_ly() %>%\n  add_trace(x = generate_data(1)$x, y = generate_data(1)$y, mode = 'lines') %>%\n  layout(\n    title = 'Polinômio de 1º a 3º Grau',\n    sliders = list(list(\n      steps = lapply(1:3, function(degree) {\n        list(label = degree, method = \"restyle\",\n             args = list(list(y = list(generate_data(degree)$y))))\n      })\n    ))\n  )\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente, os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Adicionar cores e labels para melhorar a visualização \n\nplot_ly() %>% add_trace(x = generate_data(1)$x, y = generate_data(1)$y, mode = 'lines', name = '1º Grau', line = list(color = 'blue')) %>% add_trace(x = generate_data(2)$x, y = generate_data(2)$y, mode = 'lines', name = '2º Grau', line = list(color = 'green')) %>% add_trace(x = generate_data(3)$x, y = generate_data(3)$y, mode = 'lines', name = '3º Grau', line = list(color = 'red')) %>%\n\n```\n\n</div>\n\n\\\n\n<!-- #########  SENO E COSSENO ########## -->\n\n<div class=\"mat-fundo\">  <!--modifica para cada área-->\n\n## Seno e Cosseno (EM13MAT409, EM13CIF301)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Valores de x\nx <- seq(0, 2 * pi, length.out = 100)\n\nplot_ly() %>%\n  add_trace(x = x, y = sin(x), mode = 'lines', name = 'Seno') %>%\n  add_trace(x = x, y = cos(x), mode = 'lines', name = 'Cosseno') %>%\n  layout(\n    title = 'Comparação: Seno e Cosseno',\n    xaxis = list(title = 'Ângulo (radianos)'), \n    yaxis = list(title = 'Valor'),\n    showlegend = TRUE\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Valores de x\nx <- seq(0, 2 * pi, length.out = 100)\n\nplot_ly() %>%\n  add_trace(x = x, y = sin(x), mode = 'lines', name = 'Seno') %>%\n  add_trace(x = x, y = cos(x), mode = 'lines', name = 'Cosseno') %>%\n  layout(\n    title = 'Comparação: Seno e Cosseno',\n    xaxis = list(title = 'Ângulo (radianos)'), \n    yaxis = list(title = 'Valor'),\n    showlegend = TRUE\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Aumentar os valores das funções seno e cosseno \n\namplificacao <- 2 y_sin <- amplificacao * sin(x) y_cos <- amplificacao * cos(x)\n```\n\n</div>\n\n\\\n\n<!-- #########  TENDÊNCIA CENTRAL E HISTOGRAMA ########## -->\n\n<div class=\"mat-fundo\">  <!--modifica para cada área-->\n\n## Tendência central: média e mediana (EM13MAT306, EM13MAT305)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Dados de exemplo\nset.seed(123)\ndados <- rnorm(100, mean = 50, sd = 10)\n\n# Estatísticas\nmedia_val <- mean(dados)\nmediana_val <- median(dados)\n\nplot_ly() %>%\n  add_trace(x = dados, type = 'histogram', name = 'Distribuição', opacity = 0.6) %>%\n  add_trace(x = c(media_val, media_val), y = c(0, 15), mode = 'lines', name = 'Média', line = list(color = 'red')) %>%\n  add_trace(x = c(mediana_val, mediana_val), y = c(0, 15), mode = 'lines', name = 'Mediana', line = list(color = 'blue')) %>%\n  layout(title = 'Tendência Central',\n         xaxis = list(title = 'Valores'),\n         yaxis = list(title = 'Frequência'),\n         showlegend = TRUE)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Dados de exemplo\nset.seed(123)\ndados <- rnorm(100, mean = 50, sd = 10)\n\n# Estatísticas\nmedia_val <- mean(dados)\nmediana_val <- median(dados)\n\nplot_ly() %>%\n  add_trace(x = dados, type = 'histogram', name = 'Distribuição', opacity = 0.6) %>%\n  add_trace(x = c(media_val, media_val), y = c(0, 15), mode = 'lines', name = 'Média', line = list(color = 'red')) %>%\n  add_trace(x = c(mediana_val, mediana_val), y = c(0, 15), mode = 'lines', name = 'Mediana', line = list(color = 'blue')) %>%\n  layout(title = 'Tendência Central',\n         xaxis = list(title = 'Valores'),\n         yaxis = list(title = 'Frequência'),\n         showlegend = TRUE)\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Dados de exemplo (aumentando o número de dados)\n\nset.seed(123)\ndados <- rnorm(1000, mean = 50, sd = 10)  # Aumentado de 100 para 1000\n```\n\n</div>\n\n\\\n\n\n<!--  ############ SUPERFÍCIE E VOLUME DE ESFERA #############-->\n\n<div class=\"mat-fundo\">\n\n## Comparação de área superficial e volume de uma esfera (EM13MT05)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE, eval=TRUE}\nlibrary(plotly)\n\nplot_ly() %>%\n  add_trace(x = 1:10, y = 4 * pi * (1:10)^2, mode = 'lines+markers', name = 'Superfície') %>%\n  add_trace(x = 1:10, y = (4/3) * pi * (1:10)^3, mode = 'lines+markers', name = 'Volume') %>%\n  layout(\n    title = 'Superfície e Volume de uma Esfera',\n    xaxis = list(title = 'Raio'), \n    yaxis = list(title = 'Valor')\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\nplot_ly() %>%\n  add_trace(x = 1:10, y = 4 * pi * (1:10)^2, mode = 'lines+markers', name = 'Superfície') %>%\n  add_trace(x = 1:10, y = (4/3) * pi * (1:10)^3, mode = 'lines+markers', name = 'Volume') %>%\n  layout(\n    title = 'Superfície e Volume de uma Esfera',\n    xaxis = list(title = 'Raio'), \n    yaxis = list(title = 'Valor')\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\">\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n\nx = 1:100\ny = 1:100 # aumenta o no. de pontos em 10 vezes\n```\n\n</div>\n\n\\\n\n<!--  ############ CURVA AJUSTÁVEL DE SENO #############-->\n\n<div class=\"mat-fundo\">  <!--modifica para cada área-->\n\n## Função Seno e ajuste de parâmetros (EM13MAT403, EM13MAT406, EM13MAT408)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Instalar os pacotes necessários\n# install.packages(\"plotly\")\n\nlibrary(plotly)\n\n# Geração de dados\nx <- seq(0, 2 * pi, length.out = 500)\n\n# Função para gerar y com base no parâmetro a\nfunc <- function(a, x) {\n  return(a * sin(x))\n}\n\n# Valores do parâmetro 'a' que irão variar\na_values <- seq(0.5, 3, length.out = 30)\n\n# Criando um data frame com todos os valores de a e x para plotar\ndata <- data.frame(\n  x = rep(x, times = length(a_values)),\n  y = unlist(lapply(a_values, function(a) func(a, x))),\n  a = rep(a_values, each = length(x))\n)\n\n# Criando o gráfico interativo com animação\nplot_ly(data, \n        x = ~x, \n        y = ~y, \n        frame = ~a, \n        type = 'scatter', \n        mode = 'lines') %>%\n  layout(\n    title = \"Variação da função y = a * sin(x) com diferentes valores de a\",\n    xaxis = list(title = \"x\"),\n    yaxis = list(title = \"y\", range = c(-3, 3))\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Instalar os pacotes necessários\n# install.packages(\"plotly\")\n\nlibrary(plotly)\n\n# Geração de dados\nx <- seq(0, 2 * pi, length.out = 500)\n\n# Função para gerar y com base no parâmetro a\nfunc <- function(a, x) {\n  return(a * sin(x))\n}\n\n# Valores do parâmetro 'a' que irão variar\na_values <- seq(0.5, 3, length.out = 30)\n\n# Criando um data frame com todos os valores de a e x para plotar\ndata <- data.frame(\n  x = rep(x, times = length(a_values)),\n  y = unlist(lapply(a_values, function(a) func(a, x))),\n  a = rep(a_values, each = length(x))\n)\n\n# Criando o gráfico interativo com animação\nplot_ly(data, \n        x = ~x, \n        y = ~y, \n        frame = ~a, \n        type = 'scatter', \n        mode = 'lines') %>%\n  layout(\n    title = \"Variação da função y = a * sin(x) com diferentes valores de a\",\n    xaxis = list(title = \"x\"),\n    yaxis = list(title = \"y\", range = c(-3, 3))\n  )\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Geração de dados\n\nx <- seq(0, 2 * pi, length.out = 1000)  # Aumentado de 500 para 1000 para maior suavidade\"\n\n```\n\n</div>\n\n\\\n\n<!--  ############ REGRESSÃO LINEAR #############-->\n\n<div class=\"mat-fundo\">\n\n## Regressão linear (EM13MT10)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\ndados <- function(ruido_func) {\n  set.seed(123)\n  x <- seq(0, 5, length.out = 50)\n  desvio <- 2 * x + 5 + rnorm(50, 0, ruido_func)\n  y_esperado <- predict(lm(desvio ~ x), data.frame(x = x))\n  list(x = x, desvio = desvio, y_esperado = y_esperado)\n}\n\nplot_ly() %>%\n  add_trace(x = dados(1)$x, y = dados(1)$desvio, mode = 'markers', type = \"scatter\", name = \"Dados\") %>%\n  add_trace(x = dados(1)$x, y = dados(1)$y_esperado, mode = 'lines', type = \"scatter\", name = \"Linha de Regressão\") %>%\n  layout(\n    title = 'Regressão Linear',\n    xaxis = list(title = 'X'), yaxis = list(title = 'Y'),\n    sliders = list(list(\n      currentvalue = list(prefix = \"Desvio: \"),\n      steps = lapply(seq(0, 5, 1), function(sd_value) {\n        list(label = as.character(sd_value),\n             args = list(list(y = list(dados(sd_value)$desvio, dados(sd_value)$y_esperado))))\n      })\n    ))\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\ndados <- function(ruido_func) {\n  set.seed(123)\n  x <- seq(0, 5, length.out = 50)\n  desvio <- 2 * x + 5 + rnorm(50, 0, ruido_func)\n  y_esperado <- predict(lm(desvio ~ x), data.frame(x = x))\n  list(x = x, desvio = desvio, y_esperado = y_esperado)\n}\n\nplot_ly() %>%\n  add_trace(x = dados(1)$x, y = dados(1)$desvio, mode = 'markers', type = \"scatter\", name = \"Dados\") %>%\n  add_trace(x = dados(1)$x, y = dados(1)$y_esperado, mode = 'lines', type = \"scatter\", name = \"Linha de Regressão\") %>%\n  layout(\n    title = 'Regressão Linear',\n    xaxis = list(title = 'X'), yaxis = list(title = 'Y'),\n    sliders = list(list(\n      currentvalue = list(prefix = \"Desvio: \"),\n      steps = lapply(seq(0, 5, 1), function(sd_value) {\n        list(label = as.character(sd_value),\n             args = list(list(y = list(dados(sd_value)$desvio, dados(sd_value)$y_esperado))))\n      })\n    ))\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n\n<div class=\"mat-fundo2\">\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n\nlenght.out = 50 # aumenta o no. de pontos pra visualizar melhor o espalhamento\n\nlapply(seq(0, 50, 1) # aumenta o no. de desvios-padrão, para se visualizar o valor de sua influência no espalhamento dos pontos (veja que acima de 3 desvios-padrão o espalhamento fica muito grande, e com pouca alteração).\n\nlapply(seq(0, 3, 0.1) # altera o controle deslizante, pra se visualizar o espalhamento de forma mais suave até o valor de 3 desvios-padrão\n```\n\n</div>\n\n","srcMarkdownNoYaml":"\n\n# Matemática {.unnumbered}\n\n<!-- #########  EXPONENCIAL versus LOGARITMO ########## -->\n\n<div class=\"mat-fundo\">  \n\n## Curvas para função exponencial *versus* logaritmo (EM13MAT401, EM13MAT402)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\nx_values <- seq(1, 10, length.out = 10)\ny_exp <- exp(x_values)  # Função exponencial\ny_log <- log(x_values)  # Função logarítmica\n\nexp_plot <- plot_ly(x = x_values, y = y_exp, type = 'scatter', mode = 'markers+lines', name = 'Exponencial') %>%\n  layout(title = \"Função Exponencial\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Exp'))\n\nlog_plot <- plot_ly(x = x_values, y = y_log, type = 'scatter', mode = 'markers+lines', name = 'Logarítmica') %>%\n  layout(title = \"Função Logarítmica\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Log'))\n\n# Combinar os gráficos\nsubplot(exp_plot, log_plot, nrows = 1) %>%\n  layout(title = \"Exponencial vs Logarítmica\", clickmode = 'event+select')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\nx_values <- seq(1, 10, length.out = 10)\ny_exp <- exp(x_values)  # Função exponencial\ny_log <- log(x_values)  # Função logarítmica\n\nexp_plot <- plot_ly(x = x_values, y = y_exp, type = 'scatter', mode = 'markers+lines', name = 'Exponencial') %>%\n  layout(title = \"Função Exponencial\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Exp'))\n\nlog_plot <- plot_ly(x = x_values, y = y_log, type = 'scatter', mode = 'markers+lines', name = 'Logarítmica') %>%\n  layout(title = \"Função Logarítmica\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Log'))\n\n# Combinar os gráficos\nsubplot(exp_plot, log_plot, nrows = 1) %>%\n  layout(title = \"Exponencial vs Logarítmica\", clickmode = 'event+select')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Alterar as cores dos gráficos:\n\n  exp_plot <- plot_ly(x = x_values, y = y_exp, type = 'scatter', mode = 'markers+lines', name = 'Exponencial', marker = list(color = 'blue'), line = list(color = 'blue')) %>% layout(title = \"Função Exponencial\", xaxis = list(title = 'X'), yaxis = list(title = 'Y Exp'))\n\n```\n\n</div>\n\n\\\n\n<!-- #########  FUNÇÕES DE 1o, 2o, e 3o. GRAUS ########## -->\n\n<div class=\"mat-fundo\">  <!--modifica para cada área-->\n\n## Funções de 1o, 2o., e 3o. grau (EM13MAT301, EM13MAT302)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Função para gerar polinômios de 1º, 2º e 3º grau\ngenerate_data <- function(degree) {\n  x <- seq(-5, 5, length.out = 100)\n  y <- if (degree == 1) 2 * x + 1 else if (degree == 2) x^2 - 3 * x + 2 else x^3 - 2 * x^2 + x - 1\n  list(x = x, y = y)\n}\n\nplot_ly() %>%\n  add_trace(x = generate_data(1)$x, y = generate_data(1)$y, mode = 'lines') %>%\n  layout(\n    title = 'Polinômio de 1º a 3º Grau',\n    sliders = list(list(\n      steps = lapply(1:3, function(degree) {\n        list(label = degree, method = \"restyle\",\n             args = list(list(y = list(generate_data(degree)$y))))\n      })\n    ))\n  )\n\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Função para gerar polinômios de 1º, 2º e 3º grau\ngenerate_data <- function(degree) {\n  x <- seq(-5, 5, length.out = 100)\n  y <- if (degree == 1) 2 * x + 1 else if (degree == 2) x^2 - 3 * x + 2 else x^3 - 2 * x^2 + x - 1\n  list(x = x, y = y)\n}\n\nplot_ly() %>%\n  add_trace(x = generate_data(1)$x, y = generate_data(1)$y, mode = 'lines') %>%\n  layout(\n    title = 'Polinômio de 1º a 3º Grau',\n    sliders = list(list(\n      steps = lapply(1:3, function(degree) {\n        list(label = degree, method = \"restyle\",\n             args = list(list(y = list(generate_data(degree)$y))))\n      })\n    ))\n  )\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente, os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Adicionar cores e labels para melhorar a visualização \n\nplot_ly() %>% add_trace(x = generate_data(1)$x, y = generate_data(1)$y, mode = 'lines', name = '1º Grau', line = list(color = 'blue')) %>% add_trace(x = generate_data(2)$x, y = generate_data(2)$y, mode = 'lines', name = '2º Grau', line = list(color = 'green')) %>% add_trace(x = generate_data(3)$x, y = generate_data(3)$y, mode = 'lines', name = '3º Grau', line = list(color = 'red')) %>%\n\n```\n\n</div>\n\n\\\n\n<!-- #########  SENO E COSSENO ########## -->\n\n<div class=\"mat-fundo\">  <!--modifica para cada área-->\n\n## Seno e Cosseno (EM13MAT409, EM13CIF301)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Valores de x\nx <- seq(0, 2 * pi, length.out = 100)\n\nplot_ly() %>%\n  add_trace(x = x, y = sin(x), mode = 'lines', name = 'Seno') %>%\n  add_trace(x = x, y = cos(x), mode = 'lines', name = 'Cosseno') %>%\n  layout(\n    title = 'Comparação: Seno e Cosseno',\n    xaxis = list(title = 'Ângulo (radianos)'), \n    yaxis = list(title = 'Valor'),\n    showlegend = TRUE\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Valores de x\nx <- seq(0, 2 * pi, length.out = 100)\n\nplot_ly() %>%\n  add_trace(x = x, y = sin(x), mode = 'lines', name = 'Seno') %>%\n  add_trace(x = x, y = cos(x), mode = 'lines', name = 'Cosseno') %>%\n  layout(\n    title = 'Comparação: Seno e Cosseno',\n    xaxis = list(title = 'Ângulo (radianos)'), \n    yaxis = list(title = 'Valor'),\n    showlegend = TRUE\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Aumentar os valores das funções seno e cosseno \n\namplificacao <- 2 y_sin <- amplificacao * sin(x) y_cos <- amplificacao * cos(x)\n```\n\n</div>\n\n\\\n\n<!-- #########  TENDÊNCIA CENTRAL E HISTOGRAMA ########## -->\n\n<div class=\"mat-fundo\">  <!--modifica para cada área-->\n\n## Tendência central: média e mediana (EM13MAT306, EM13MAT305)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Dados de exemplo\nset.seed(123)\ndados <- rnorm(100, mean = 50, sd = 10)\n\n# Estatísticas\nmedia_val <- mean(dados)\nmediana_val <- median(dados)\n\nplot_ly() %>%\n  add_trace(x = dados, type = 'histogram', name = 'Distribuição', opacity = 0.6) %>%\n  add_trace(x = c(media_val, media_val), y = c(0, 15), mode = 'lines', name = 'Média', line = list(color = 'red')) %>%\n  add_trace(x = c(mediana_val, mediana_val), y = c(0, 15), mode = 'lines', name = 'Mediana', line = list(color = 'blue')) %>%\n  layout(title = 'Tendência Central',\n         xaxis = list(title = 'Valores'),\n         yaxis = list(title = 'Frequência'),\n         showlegend = TRUE)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Dados de exemplo\nset.seed(123)\ndados <- rnorm(100, mean = 50, sd = 10)\n\n# Estatísticas\nmedia_val <- mean(dados)\nmediana_val <- median(dados)\n\nplot_ly() %>%\n  add_trace(x = dados, type = 'histogram', name = 'Distribuição', opacity = 0.6) %>%\n  add_trace(x = c(media_val, media_val), y = c(0, 15), mode = 'lines', name = 'Média', line = list(color = 'red')) %>%\n  add_trace(x = c(mediana_val, mediana_val), y = c(0, 15), mode = 'lines', name = 'Mediana', line = list(color = 'blue')) %>%\n  layout(title = 'Tendência Central',\n         xaxis = list(title = 'Valores'),\n         yaxis = list(title = 'Frequência'),\n         showlegend = TRUE)\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Dados de exemplo (aumentando o número de dados)\n\nset.seed(123)\ndados <- rnorm(1000, mean = 50, sd = 10)  # Aumentado de 100 para 1000\n```\n\n</div>\n\n\\\n\n\n<!--  ############ SUPERFÍCIE E VOLUME DE ESFERA #############-->\n\n<div class=\"mat-fundo\">\n\n## Comparação de área superficial e volume de uma esfera (EM13MT05)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE, eval=TRUE}\nlibrary(plotly)\n\nplot_ly() %>%\n  add_trace(x = 1:10, y = 4 * pi * (1:10)^2, mode = 'lines+markers', name = 'Superfície') %>%\n  add_trace(x = 1:10, y = (4/3) * pi * (1:10)^3, mode = 'lines+markers', name = 'Volume') %>%\n  layout(\n    title = 'Superfície e Volume de uma Esfera',\n    xaxis = list(title = 'Raio'), \n    yaxis = list(title = 'Valor')\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\nplot_ly() %>%\n  add_trace(x = 1:10, y = 4 * pi * (1:10)^2, mode = 'lines+markers', name = 'Superfície') %>%\n  add_trace(x = 1:10, y = (4/3) * pi * (1:10)^3, mode = 'lines+markers', name = 'Volume') %>%\n  layout(\n    title = 'Superfície e Volume de uma Esfera',\n    xaxis = list(title = 'Raio'), \n    yaxis = list(title = 'Valor')\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\">\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n\nx = 1:100\ny = 1:100 # aumenta o no. de pontos em 10 vezes\n```\n\n</div>\n\n\\\n\n<!--  ############ CURVA AJUSTÁVEL DE SENO #############-->\n\n<div class=\"mat-fundo\">  <!--modifica para cada área-->\n\n## Função Seno e ajuste de parâmetros (EM13MAT403, EM13MAT406, EM13MAT408)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Instalar os pacotes necessários\n# install.packages(\"plotly\")\n\nlibrary(plotly)\n\n# Geração de dados\nx <- seq(0, 2 * pi, length.out = 500)\n\n# Função para gerar y com base no parâmetro a\nfunc <- function(a, x) {\n  return(a * sin(x))\n}\n\n# Valores do parâmetro 'a' que irão variar\na_values <- seq(0.5, 3, length.out = 30)\n\n# Criando um data frame com todos os valores de a e x para plotar\ndata <- data.frame(\n  x = rep(x, times = length(a_values)),\n  y = unlist(lapply(a_values, function(a) func(a, x))),\n  a = rep(a_values, each = length(x))\n)\n\n# Criando o gráfico interativo com animação\nplot_ly(data, \n        x = ~x, \n        y = ~y, \n        frame = ~a, \n        type = 'scatter', \n        mode = 'lines') %>%\n  layout(\n    title = \"Variação da função y = a * sin(x) com diferentes valores de a\",\n    xaxis = list(title = \"x\"),\n    yaxis = list(title = \"y\", range = c(-3, 3))\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Instalar os pacotes necessários\n# install.packages(\"plotly\")\n\nlibrary(plotly)\n\n# Geração de dados\nx <- seq(0, 2 * pi, length.out = 500)\n\n# Função para gerar y com base no parâmetro a\nfunc <- function(a, x) {\n  return(a * sin(x))\n}\n\n# Valores do parâmetro 'a' que irão variar\na_values <- seq(0.5, 3, length.out = 30)\n\n# Criando um data frame com todos os valores de a e x para plotar\ndata <- data.frame(\n  x = rep(x, times = length(a_values)),\n  y = unlist(lapply(a_values, function(a) func(a, x))),\n  a = rep(a_values, each = length(x))\n)\n\n# Criando o gráfico interativo com animação\nplot_ly(data, \n        x = ~x, \n        y = ~y, \n        frame = ~a, \n        type = 'scatter', \n        mode = 'lines') %>%\n  layout(\n    title = \"Variação da função y = a * sin(x) com diferentes valores de a\",\n    xaxis = list(title = \"x\"),\n    yaxis = list(title = \"y\", range = c(-3, 3))\n  )\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"mat-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Geração de dados\n\nx <- seq(0, 2 * pi, length.out = 1000)  # Aumentado de 500 para 1000 para maior suavidade\"\n\n```\n\n</div>\n\n\\\n\n<!--  ############ REGRESSÃO LINEAR #############-->\n\n<div class=\"mat-fundo\">\n\n## Regressão linear (EM13MT10)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\ndados <- function(ruido_func) {\n  set.seed(123)\n  x <- seq(0, 5, length.out = 50)\n  desvio <- 2 * x + 5 + rnorm(50, 0, ruido_func)\n  y_esperado <- predict(lm(desvio ~ x), data.frame(x = x))\n  list(x = x, desvio = desvio, y_esperado = y_esperado)\n}\n\nplot_ly() %>%\n  add_trace(x = dados(1)$x, y = dados(1)$desvio, mode = 'markers', type = \"scatter\", name = \"Dados\") %>%\n  add_trace(x = dados(1)$x, y = dados(1)$y_esperado, mode = 'lines', type = \"scatter\", name = \"Linha de Regressão\") %>%\n  layout(\n    title = 'Regressão Linear',\n    xaxis = list(title = 'X'), yaxis = list(title = 'Y'),\n    sliders = list(list(\n      currentvalue = list(prefix = \"Desvio: \"),\n      steps = lapply(seq(0, 5, 1), function(sd_value) {\n        list(label = as.character(sd_value),\n             args = list(list(y = list(dados(sd_value)$desvio, dados(sd_value)$y_esperado))))\n      })\n    ))\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\ndados <- function(ruido_func) {\n  set.seed(123)\n  x <- seq(0, 5, length.out = 50)\n  desvio <- 2 * x + 5 + rnorm(50, 0, ruido_func)\n  y_esperado <- predict(lm(desvio ~ x), data.frame(x = x))\n  list(x = x, desvio = desvio, y_esperado = y_esperado)\n}\n\nplot_ly() %>%\n  add_trace(x = dados(1)$x, y = dados(1)$desvio, mode = 'markers', type = \"scatter\", name = \"Dados\") %>%\n  add_trace(x = dados(1)$x, y = dados(1)$y_esperado, mode = 'lines', type = \"scatter\", name = \"Linha de Regressão\") %>%\n  layout(\n    title = 'Regressão Linear',\n    xaxis = list(title = 'X'), yaxis = list(title = 'Y'),\n    sliders = list(list(\n      currentvalue = list(prefix = \"Desvio: \"),\n      steps = lapply(seq(0, 5, 1), function(sd_value) {\n        list(label = as.character(sd_value),\n             args = list(list(y = list(dados(sd_value)$desvio, dados(sd_value)$y_esperado))))\n      })\n    ))\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n\n<div class=\"mat-fundo2\">\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n\nlenght.out = 50 # aumenta o no. de pontos pra visualizar melhor o espalhamento\n\nlapply(seq(0, 50, 1) # aumenta o no. de desvios-padrão, para se visualizar o valor de sua influência no espalhamento dos pontos (veja que acima de 3 desvios-padrão o espalhamento fica muito grande, e com pouca alteração).\n\nlapply(seq(0, 3, 0.1) # altera o controle deslizante, pra se visualizar o espalhamento de forma mais suave até o valor de 3 desvios-padrão\n```\n\n</div>\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"number-sections":true,"toc":true,"output-file":"matematica.html"},"language":{"toc-title-document":"Índice","toc-title-website":"Nesta página","related-formats-title":"Outros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fonte","other-links-title":"Outros Links","code-links-title":"Ligações de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Caderno do Artigo","notebook-preview-download":"Baixar Caderno","notebook-preview-download-src":"Descarregar código fonte","notebook-preview-back":"Voltar ao Artigo","manuscript-meca-bundle":"Arquivo MECA","section-title-abstract":"Resumo","section-title-appendices":"Apêndices","section-title-footnotes":"Notas de rodapé","section-title-references":"Referências","section-title-reuse":"Reuso","section-title-copyright":"Direito autoral","section-title-citation":"Citação","appendix-attribution-cite-as":"Por favor, cite este trabalho como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licença","title-block-author-single":"Autor","title-block-author-plural":"Autores","title-block-affiliation-single":"Afiliação","title-block-affiliation-plural":"Afiliações","title-block-published":"Data de Publicação","title-block-modified":"Data de Modificação","title-block-keywords":"Palavras-chave","callout-tip-title":"Dica","callout-note-title":"Nota","callout-warning-title":"Aviso","callout-important-title":"Importante","callout-caution-title":"Cuidado","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar o código","code-tools-hide-all-code":"Esconder o código","code-tools-view-source":"Ver o código fonte","code-tools-source-code":"Código fonte","tools-share":"Share","tools-download":"Download","code-line":"Linha","code-lines":"Linhas","copy-button-tooltip":"Copiar para a área de transferência","copy-button-tooltip-success":"Copiada","repo-action-links-edit":"Editar essa página","repo-action-links-source":"Ver o código fonte","repo-action-links-issue":"Criar uma issue","back-to-top":"De volta ao topo","search-no-results-text":"Nenhum resultado","search-matching-documents-text":"documentos correspondentes","search-copy-link-title":"Copiar link para a busca","search-hide-matches-text":"Esconder correspondências adicionais","search-more-match-text":"mais correspondência neste documento","search-more-matches-text":"mais correspondências neste documento","search-clear-button-title":"Limpar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Procurar","toggle-section":"Alternar seção","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo escuro","toggle-reader-mode":"Alternar modo de leitor","toggle-navigation":"Alternar de navegação","crossref-fig-title":"Figura","crossref-tbl-title":"Tabela","crossref-lst-title":"Listagem","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolário","crossref-prp-title":"Proposição","crossref-cnj-title":"Conjetura","crossref-def-title":"Definição","crossref-exm-title":"Exemplo","crossref-exr-title":"Exercício","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apêndice","crossref-sec-prefix":"Seção","crossref-eq-prefix":"Equação","crossref-lof-title":"Lista de Figuras","crossref-lot-title":"Lista de Tabelas","crossref-lol-title":"Lista de Listagens","environment-proof-title":"Comprovação","environment-remark-title":"Comentário","environment-solution-title":"Solução","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Pré-selecionado","listing-page-order-by-date-asc":"Mais velho","listing-page-order-by-date-desc":"O mais novo","listing-page-order-by-number-desc":"Decrescente","listing-page-order-by-number-asc":"Crescente","listing-page-field-date":"Data","listing-page-field-title":"Título","listing-page-field-description":"Descrição","listing-page-field-author":"Autor","listing-page-field-filename":"Nome do arquivo","listing-page-field-filemodified":"Arquivo modificado","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tempo de leitura","listing-page-field-wordcount":"Contagem de Palavras","listing-page-field-categories":"Categorias","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Tudo","listing-page-no-matches":"Nenhum item correspondente","listing-page-words":"{0} palavras","listing-page-filter":"Filtro","draft":"Rascunho"},"metadata":{"lang":"pt","fig-responsive":true,"quarto-version":"1.7.29","theme":{"light":"flatly"},"class":"fundo-basico"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}