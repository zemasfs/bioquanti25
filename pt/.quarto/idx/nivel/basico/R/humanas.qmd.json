{"title":"Ciências Humanas","markdown":{"yaml":{"title":"Ciências Humanas","number-sections":true,"toc":true,"lang":"pt","class":"fundo-basico"},"headingText":"Relação de área e população em municípios brasileiros (EM13MAT405, EM13MAT407, EM13CHS101, EM13CHS104, EM13CNT301)","containsRefs":false,"markdown":"\n\n<!-- ############# ÁREA E POPULAÇÃO BRASILEIRA ################ --->\n\n<div class=\"hum-fundo\">  <!--modifica para cada área-->\n\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nurl <- \"https://raw.githubusercontent.com/turicas/rows/refs/heads/develop/examples/data/brazilian-cities.csv\" # define o link para os dados\ndados <- read.csv(url)  # lê o arquivo dos dados\n\nlibrary(plotly)\nplot_ly(dados, x = ~area, y = ~inhabitants,\n        type = \"scatter\", \n        mode = 'markers',\n        marker = list(line = list(width = 1)),\n        text = ~paste(\"Cidade: \", city, \"<br>Estado: \", state),  # Texto no hover\n        hoverinfo = 'text',           # Mostrar apenas o texto definido\n        frame = ~state)%>%\n  layout(\n    title = \"Distribuição de área e população em cidades brasileiras\",\n    xaxis = list(title = \"Estados\", type = \"log\"),\n    yaxis = list(title = \"População\", type = \"log\"),\n    showlegend = FALSE\n  ) %>%\n  animation_opts(\n    frame = 500,           # Velocidade da animação\n    transition = 0,\n    redraw = FALSE\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nurl <- \"https://raw.githubusercontent.com/turicas/rows/refs/heads/develop/examples/data/brazilian-cities.csv\" # define o link para os dados\ndados <- read.csv(url)  # lê o arquivo dos dados\n\nlibrary(plotly)\nplot_ly(dados, x = ~area, y = ~inhabitants,\n        type = \"scatter\", \n        mode = 'markers',\n        marker = list(line = list(width = 1)),\n        text = ~paste(\"Cidade: \", city, \"<br>Estado: \", state),  # Texto no hover\n        hoverinfo = 'text',           # Mostrar apenas o texto definido\n        frame = ~state)%>%\n  layout(\n    title = \"Distribuição de área e população em cidades brasileiras\",\n    xaxis = list(title = \"Estados\", type = \"log\"),\n    yaxis = list(title = \"População\", type = \"log\"),\n    showlegend = FALSE\n  ) %>%\n  animation_opts(\n    frame = 500,           # Velocidade da animação\n    transition = 0,\n    redraw = FALSE\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nlayout(\n    title = \"Distribuição de Área e População em Cidades Brasileiras\",\n    xaxis = list(title = \"Área (log)\", type = \"log\"),  # Escala logarítmica\n    yaxis = list(title = \"População (log)\", type = \"log\"),\n    showlegend = FALSE\n  ) %>%\n\n```\n\n</div>\n\n\\\n\n<!-- ############# CONSUMO DE ÁLCOOL - MAPA ################ --->\n\n<div class=\"hum-fundo\">  <!--modifica para cada área-->\n\n## Consumo populacional de álcool em 2010 (EM13CHS301, EM13CNT205)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Exemplo de dataframe com valores fictícios\ndf <- read.csv(\"https://raw.githubusercontent.com/plotly/datasets/refs/heads/master/2010_alcohol_consumption_by_country.csv\")\n\n# Criando o mapa choropleth com a escala de cores ajustada\nplot_ly(\n  data = df,\n  locations = ~location,\n  locationmode = \"country names\",\n  z = ~alcohol, # Variável que determina as cores\n  type = \"choropleth\",\n  colorscale = \"Viridis\") # outras escalas: # outras escalas: RdBu, Inferno, Blues, Cividis, Greens, ...\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Exemplo de dataframe com valores fictícios\ndf <- read.csv(\"https://raw.githubusercontent.com/plotly/datasets/refs/heads/master/2010_alcohol_consumption_by_country.csv\")\n\n# Criando o mapa choropleth com a escala de cores ajustada\nplot_ly(\n  data = df,\n  locations = ~location,\n  locationmode = \"country names\",\n  z = ~alcohol, # Variável que determina as cores\n  type = \"choropleth\",\n  colorscale = \"Viridis\") # outras escalas: # outras escalas: RdBu, Inferno, Blues, Cividis, Greens, ...\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Alteração de cor\ncolorscale = \"Blues\"\n\n```\n\n</div>\n\n\\\n\n<!-- ############# EMISSÃO DE CO2 ################ --->\n\n<div class=\"hum-fundo\">  <!--modifica para cada área-->\n\n## Efeito estufa e emissão de CO$_{2}$ no Brasil (EM13CN09, EM13CHS104)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n library(plotly)\n  library(magrittr)  # bibliotecas necessárias\n  \n  # 1) Obtendo os dados da internet\n  \n  url <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define o link para os dados\n  dados <- read.csv(url)  # lê o arquivo dos dados\n  \n  # 2) Construindo o gráfico com animação \n  \n  plot_ly(dados, x = ~Year, y = ~Mean,\n          type = \"bar\", \n          marker = list(line = list(width = 10)),\n          frame = ~Year) %>%\n    animation_opts(\n      frame = 150,           # Velocidade da animação\n      transition = 0,\n      redraw = TRUE\n    ) %>%\n    layout(\n      title = \"Flutuação da temperatura global\",\n      xaxis = list(title = \"Anos\"),\n      yaxis = list(title = \"Diferença de temperatura, C\"))\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n library(plotly)\n  library(magrittr)  # bibliotecas necessárias\n  \n  # 1) Obtendo os dados da internet\n  \n  url <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define o link para os dados\n  dados <- read.csv(url)  # lê o arquivo dos dados\n  \n  # 2) Construindo o gráfico com animação \n  \n  plot_ly(dados, x = ~Year, y = ~Mean,\n          type = \"bar\", \n          marker = list(line = list(width = 10)),\n          frame = ~Year) %>%\n    animation_opts(\n      frame = 150,           # Velocidade da animação\n      transition = 0,\n      redraw = TRUE\n    ) %>%\n    layout(\n      title = \"Flutuação da temperatura global\",\n      xaxis = list(title = \"Anos\"),\n      yaxis = list(title = \"Diferença de temperatura, C\"))\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nframe = 100,  # Velocidade da animação ajustada\n\n```\n\n</div>\n\n\\\n\n\n<!-- ####### PRODUÇÃO DE ÓLEOS - MAPA ########## --->\n\n<div class=\"hum-fundo\">  <!--modifica para cada área-->\n\n## Produção global de óleos em 2014 (em teraWatts) \n\n|       Obs: Petróleo bruto, óleo de xisto, areias betuminosas, condensados, e líquidos de gás natural- etano, GLP e nafta separados da produção de gás natural.\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Exemplo de dataframe com valores fictícios\ndf <- read.csv(\"https://raw.githubusercontent.com/owid/owid-datasets/refs/heads/master/datasets/Oil%20production%20-%20Etemad%20%26%20Luciana/Oil%20production%20-%20Etemad%20%26%20Luciana.csv\")\n\n# Renomeando as colunas para facilitar interpretação e plotagem\n\nnames(df) <- c(\"País\", \"Ano\", \"Produção.TeraWatt\")\n\n# Filtrando os dados para o último ano (2014)\ndf <- subset(df, Ano == \"2014\")\n\n# Criando o mapa choropleth com a escala de cores ajustada\nlibrary(plotly)\nplot_ly(\n  data = df,\n  locations = ~País,\n  locationmode = \"country names\",\n  z = ~Produção.TeraWatt, # Variável que determina as cores\n  type = \"choropleth\",\n  colorscale = \"RdBu\") # outras escalas: # outras escalas: Viridis, Inferno, Blues, Cividis, Greens, ...\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nlibrary(plotly)\n\n# Exemplo de dataframe com valores fictícios\ndf <- read.csv(\"https://raw.githubusercontent.com/owid/owid-datasets/refs/heads/master/datasets/Oil%20production%20-%20Etemad%20%26%20Luciana/Oil%20production%20-%20Etemad%20%26%20Luciana.csv\")\n\n# Renomeando as colunas para facilitar interpretação e plotagem\n\nnames(df) <- c(\"País\", \"Ano\", \"Produção.TeraWatt\")\n\n# Filtrando os dados para o último ano (2014)\ndf <- subset(df, Ano == \"2014\")\n\n# Criando o mapa choropleth com a escala de cores ajustada\nlibrary(plotly)\nplot_ly(\n  data = df,\n  locations = ~País,\n  locationmode = \"country names\",\n  z = ~Produção.TeraWatt, # Variável que determina as cores\n  type = \"choropleth\",\n  colorscale = \"RdBu\") # outras escalas: # outras escalas: Viridis, Inferno, Blues, Cividis, Greens, ...\n```\n\n</div>\n\n\\\n\n<!-- ############# ELEVAÇÃO DA TEMPERATURA DA TERRA ################ --->\n\n<div class=\"hum-fundo\">  <!--modifica para cada área-->\n\n## Aquecimento Global (EM13CN03, EM13CN09, EM13CHS105, EM13CHS205)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\nlibrary(magrittr)  # bibliotecas necessárias\n\n# 1) Obtendo os dados da internet\n\nurl <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define o link para os dados\ndados <- read.csv(url)  # lê o arquivo dos dados\n\n# 2) Construindo o gráfico com animação \n\nplot_ly(dados, x = ~Year, y = ~Mean,\n        type = \"scatter\", \n        marker = list(line = list(width = 10)),\n        frame = ~Year) %>%\n  animation_opts(\n    frame = 150,           # Velocidade da animação\n    transition = 0,\n    redraw = TRUE\n  ) %>%\n  layout(\n    title = \"Flutuação da temperatura global\",\n    xaxis = list(title = \"Anos\"),\n    yaxis = list(title = \"Diferença de temperatura, C\"))\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\nlibrary(magrittr)  # bibliotecas necessárias\n\n# 1) Obtendo os dados da internet\n\nurl <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define o link para os dados\ndados <- read.csv(url)  # lê o arquivo dos dados\n\n# 2) Construindo o gráfico com animação \n\nplot_ly(dados, x = ~Year, y = ~Mean,\n        type = \"bar\", \n        marker = list(line = list(width = 10)),\n        frame = ~Year) %>%\n  animation_opts(\n    frame = 150,           # Velocidade da animação\n    transition = 0,\n    redraw = TRUE\n  ) %>%\n  layout(\n    title = \"Flutuação da temperatura global\",\n    xaxis = list(title = \"Anos\"),\n    yaxis = list(title = \"Diferença de temperatura, C\"))\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nplot_ly(dados, x = ~Year, y = ~Mean, type = \"bar\", \n        text = ~paste(\"Ano:\", Year, \"<br>Temperatura:\", Mean, \"°C\"),\n        hoverinfo = \"text\")\n\n\n```\n\n</div>\n\n\\\n\n<!-- ###### EXPECTATIVA DE VIDA E PRODUTO INTERNO BRUTO ####### --->\n\n<div class=\"hum-fundo\">  <!--modifica para cada área-->\n\n## Expectativa de vida e Produto Interno Bruto - PIB, 1956 a 2007 (EM13CHS101, EM13CHS104, EM13MAT405, EM13MAT410)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Obtendo os dados na internet\nurl <- read.csv(\"https://raw.githubusercontent.com/kirenz/datasets/refs/heads/master/gapminder.csv\")\n\ndadosExpVida <- url  # atribuindo os dados a um objeto do `R`\n\n# Criando o gráfico interativo com animação\nplot_ly(\n  dadosExpVida, # dados convertidos da internet\n  x = ~gdpPercap, # renda per capita\n  y = ~lifeExp, # expectativa de vida\n  size = ~pop, # tamanho dos pontos em função da população\n  color = ~country, # cor dos pontos em função do país\n  frame = ~year,    # Frame para a animação por ano de coleta dos dados\n  text = ~continent,  # País como informação ao passar o mouse\n  hoverinfo = \"text\",\n  type = 'scatter', # tipo de gráfico\n  mode = 'markers',\n  marker = list(sizemode = 'diameter', opacity = 0.7)\n) %>%\n  layout(  # atribuição de título e etiquetas dos eixos\n    title = \"Produto interno bruto X Expectativa de vida\",\n    xaxis = list(title = \"PIB (log), US$\", type = \"log\"),\n    yaxis = list(title = \"Expectativa de Vida, anos\"),\n    showlegend = TRUE # possibilidade ou não de aparecer a legenda\n  ) %>%\n  animation_opts(\n    frame = 1000,           # Velocidade da animação\n    transition = 0,\n    redraw = TRUE\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Obtendo os dados na internet\nurl <- read.csv(\"https://raw.githubusercontent.com/kirenz/datasets/refs/heads/master/gapminder.csv\")\n\ndadosExpVida <- url  # atribuindo os dados a um objeto do `R`\n\n# Criando o gráfico interativo com animação\nplot_ly(\n  dadosExpVida, # dados convertidos da internet\n  x = ~gdpPercap, # renda per capita\n  y = ~lifeExp, # expectativa de vida\n  size = ~pop, # tamanho dos pontos em função da população\n  color = ~country, # cor dos pontos em função do país\n  frame = ~year,    # Frame para a animação por ano de coleta dos dados\n  text = ~continent,  # País como informação ao passar o mouse\n  hoverinfo = \"text\",\n  type = 'scatter', # tipo de gráfico\n  mode = 'markers',\n  marker = list(sizemode = 'diameter', opacity = 0.7)\n) %>%\n  layout(  # atribuição de título e etiquetas dos eixos\n    title = \"Produto interno bruto X Expectativa de vida\",\n    xaxis = list(title = \"PIB (log), US$\", type = \"log\"),\n    yaxis = list(title = \"Expectativa de Vida, anos\"),\n    showlegend = TRUE # possibilidade ou não de aparecer a legenda\n  ) %>%\n  animation_opts(\n    frame = 1000,           # Velocidade da animação\n    transition = 0,\n    redraw = TRUE\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Dentro de plot_ly()\ncolor = ~continent\n\n```\n\n</div>\n\n\\\n\n<!-- ####### QUEDA DE METEORITOS - MAPA ########## --->\n\n<div class=\"hum-fundo\">  <!--modifica para cada área-->\n\n## Queda de meteoritos na Terra - 1800 a 2013 (EM13CHS101, EM13CNT303, EM13CNT301)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(maps)\n\nmeteoritos <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-11/meteorites.csv\")\n\noptions(scipen = 999) \n\nmeteoritos_Mundo <- meteoritos %>%\n  filter(fall == \"Fell\") %>%\n  filter(year > 1800) %>%\n  # drop_na() %>%\n  arrange(mass)\n\n# Carregar o mapa do mundo\nworld <- map_data(\"world\")\n\nmapa_animado <- world %>%\n  ggplot() +\n  geom_polygon(aes( x= long, y = lat, group = group),\n               fill = \"grey20\",\n               color = \"white\",\n               size = 0.01) +\n  geom_point(data= meteoritos_Mundo, \n             aes(x = long, \n                 y = lat, \n                 frame = year,\n                 size = mass),\n             color = \"orange\",\n             alpha = 0.7) +\n  labs( title = \"Queda de meteoritos -  1800 a 2013}\",\n        caption = \"The Meteoritical Society\") +\n  # theme_map() +\n  scale_size_continuous(guide = F) +\n  scale_color_discrete(name = \"Type\") +\n  theme(plot.title = element_text(size = 10, hjust = 0.5))\n\n\nfig_2 <- ggplotly(mapa_animado) %>% animation_slider(currentvalue = list(prefix = \"Year \", font = list(color=\"orange\"))) \n\nfig_2\n\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(maps)\n\nmeteoritos <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-11/meteorites.csv\")\n\noptions(scipen = 999) \n\nmeteoritos_Mundo <- meteoritos %>%\n  filter(fall == \"Fell\") %>%\n  filter(year > 1800) %>%\n  # drop_na() %>%\n  arrange(mass)\n\n# Carregar o mapa do mundo\nworld <- map_data(\"world\")\n\nmapa_animado <- world %>%\n  ggplot() +\n  geom_polygon(aes( x= long, y = lat, group = group),\n               fill = \"grey20\",\n               color = \"white\",\n               size = 0.01) +\n  geom_point(data= meteoritos_Mundo, \n             aes(x = long, \n                 y = lat, \n                 frame = year,\n                 size = mass),\n             color = \"orange\",\n             alpha = 0.7) +\n  labs( title = \"Queda de meteoritos -  1800 a 2013}\",\n        caption = \"The Meteoritical Society\") +\n  # theme_map() +\n  scale_size_continuous(guide = F) +\n  scale_color_discrete(name = \"Type\") +\n  theme(plot.title = element_text(size = 10, hjust = 0.5))\n\n\nfig_2 <- ggplotly(mapa_animado) %>% animation_slider(currentvalue = list(prefix = \"Year \", font = list(color=\"orange\"))) \n\nfig_2\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nfill = \"grey30\",  # Alterado de \"grey20\" para \"grey30\"\n\n```\n\n</div>\n\n\\\n","srcMarkdownNoYaml":"\n\n<!-- ############# ÁREA E POPULAÇÃO BRASILEIRA ################ --->\n\n<div class=\"hum-fundo\">  <!--modifica para cada área-->\n\n## Relação de área e população em municípios brasileiros (EM13MAT405, EM13MAT407, EM13CHS101, EM13CHS104, EM13CNT301)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nurl <- \"https://raw.githubusercontent.com/turicas/rows/refs/heads/develop/examples/data/brazilian-cities.csv\" # define o link para os dados\ndados <- read.csv(url)  # lê o arquivo dos dados\n\nlibrary(plotly)\nplot_ly(dados, x = ~area, y = ~inhabitants,\n        type = \"scatter\", \n        mode = 'markers',\n        marker = list(line = list(width = 1)),\n        text = ~paste(\"Cidade: \", city, \"<br>Estado: \", state),  # Texto no hover\n        hoverinfo = 'text',           # Mostrar apenas o texto definido\n        frame = ~state)%>%\n  layout(\n    title = \"Distribuição de área e população em cidades brasileiras\",\n    xaxis = list(title = \"Estados\", type = \"log\"),\n    yaxis = list(title = \"População\", type = \"log\"),\n    showlegend = FALSE\n  ) %>%\n  animation_opts(\n    frame = 500,           # Velocidade da animação\n    transition = 0,\n    redraw = FALSE\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nurl <- \"https://raw.githubusercontent.com/turicas/rows/refs/heads/develop/examples/data/brazilian-cities.csv\" # define o link para os dados\ndados <- read.csv(url)  # lê o arquivo dos dados\n\nlibrary(plotly)\nplot_ly(dados, x = ~area, y = ~inhabitants,\n        type = \"scatter\", \n        mode = 'markers',\n        marker = list(line = list(width = 1)),\n        text = ~paste(\"Cidade: \", city, \"<br>Estado: \", state),  # Texto no hover\n        hoverinfo = 'text',           # Mostrar apenas o texto definido\n        frame = ~state)%>%\n  layout(\n    title = \"Distribuição de área e população em cidades brasileiras\",\n    xaxis = list(title = \"Estados\", type = \"log\"),\n    yaxis = list(title = \"População\", type = \"log\"),\n    showlegend = FALSE\n  ) %>%\n  animation_opts(\n    frame = 500,           # Velocidade da animação\n    transition = 0,\n    redraw = FALSE\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nlayout(\n    title = \"Distribuição de Área e População em Cidades Brasileiras\",\n    xaxis = list(title = \"Área (log)\", type = \"log\"),  # Escala logarítmica\n    yaxis = list(title = \"População (log)\", type = \"log\"),\n    showlegend = FALSE\n  ) %>%\n\n```\n\n</div>\n\n\\\n\n<!-- ############# CONSUMO DE ÁLCOOL - MAPA ################ --->\n\n<div class=\"hum-fundo\">  <!--modifica para cada área-->\n\n## Consumo populacional de álcool em 2010 (EM13CHS301, EM13CNT205)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Exemplo de dataframe com valores fictícios\ndf <- read.csv(\"https://raw.githubusercontent.com/plotly/datasets/refs/heads/master/2010_alcohol_consumption_by_country.csv\")\n\n# Criando o mapa choropleth com a escala de cores ajustada\nplot_ly(\n  data = df,\n  locations = ~location,\n  locationmode = \"country names\",\n  z = ~alcohol, # Variável que determina as cores\n  type = \"choropleth\",\n  colorscale = \"Viridis\") # outras escalas: # outras escalas: RdBu, Inferno, Blues, Cividis, Greens, ...\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Exemplo de dataframe com valores fictícios\ndf <- read.csv(\"https://raw.githubusercontent.com/plotly/datasets/refs/heads/master/2010_alcohol_consumption_by_country.csv\")\n\n# Criando o mapa choropleth com a escala de cores ajustada\nplot_ly(\n  data = df,\n  locations = ~location,\n  locationmode = \"country names\",\n  z = ~alcohol, # Variável que determina as cores\n  type = \"choropleth\",\n  colorscale = \"Viridis\") # outras escalas: # outras escalas: RdBu, Inferno, Blues, Cividis, Greens, ...\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Alteração de cor\ncolorscale = \"Blues\"\n\n```\n\n</div>\n\n\\\n\n<!-- ############# EMISSÃO DE CO2 ################ --->\n\n<div class=\"hum-fundo\">  <!--modifica para cada área-->\n\n## Efeito estufa e emissão de CO$_{2}$ no Brasil (EM13CN09, EM13CHS104)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n library(plotly)\n  library(magrittr)  # bibliotecas necessárias\n  \n  # 1) Obtendo os dados da internet\n  \n  url <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define o link para os dados\n  dados <- read.csv(url)  # lê o arquivo dos dados\n  \n  # 2) Construindo o gráfico com animação \n  \n  plot_ly(dados, x = ~Year, y = ~Mean,\n          type = \"bar\", \n          marker = list(line = list(width = 10)),\n          frame = ~Year) %>%\n    animation_opts(\n      frame = 150,           # Velocidade da animação\n      transition = 0,\n      redraw = TRUE\n    ) %>%\n    layout(\n      title = \"Flutuação da temperatura global\",\n      xaxis = list(title = \"Anos\"),\n      yaxis = list(title = \"Diferença de temperatura, C\"))\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n library(plotly)\n  library(magrittr)  # bibliotecas necessárias\n  \n  # 1) Obtendo os dados da internet\n  \n  url <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define o link para os dados\n  dados <- read.csv(url)  # lê o arquivo dos dados\n  \n  # 2) Construindo o gráfico com animação \n  \n  plot_ly(dados, x = ~Year, y = ~Mean,\n          type = \"bar\", \n          marker = list(line = list(width = 10)),\n          frame = ~Year) %>%\n    animation_opts(\n      frame = 150,           # Velocidade da animação\n      transition = 0,\n      redraw = TRUE\n    ) %>%\n    layout(\n      title = \"Flutuação da temperatura global\",\n      xaxis = list(title = \"Anos\"),\n      yaxis = list(title = \"Diferença de temperatura, C\"))\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nframe = 100,  # Velocidade da animação ajustada\n\n```\n\n</div>\n\n\\\n\n\n<!-- ####### PRODUÇÃO DE ÓLEOS - MAPA ########## --->\n\n<div class=\"hum-fundo\">  <!--modifica para cada área-->\n\n## Produção global de óleos em 2014 (em teraWatts) \n\n|       Obs: Petróleo bruto, óleo de xisto, areias betuminosas, condensados, e líquidos de gás natural- etano, GLP e nafta separados da produção de gás natural.\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Exemplo de dataframe com valores fictícios\ndf <- read.csv(\"https://raw.githubusercontent.com/owid/owid-datasets/refs/heads/master/datasets/Oil%20production%20-%20Etemad%20%26%20Luciana/Oil%20production%20-%20Etemad%20%26%20Luciana.csv\")\n\n# Renomeando as colunas para facilitar interpretação e plotagem\n\nnames(df) <- c(\"País\", \"Ano\", \"Produção.TeraWatt\")\n\n# Filtrando os dados para o último ano (2014)\ndf <- subset(df, Ano == \"2014\")\n\n# Criando o mapa choropleth com a escala de cores ajustada\nlibrary(plotly)\nplot_ly(\n  data = df,\n  locations = ~País,\n  locationmode = \"country names\",\n  z = ~Produção.TeraWatt, # Variável que determina as cores\n  type = \"choropleth\",\n  colorscale = \"RdBu\") # outras escalas: # outras escalas: Viridis, Inferno, Blues, Cividis, Greens, ...\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nlibrary(plotly)\n\n# Exemplo de dataframe com valores fictícios\ndf <- read.csv(\"https://raw.githubusercontent.com/owid/owid-datasets/refs/heads/master/datasets/Oil%20production%20-%20Etemad%20%26%20Luciana/Oil%20production%20-%20Etemad%20%26%20Luciana.csv\")\n\n# Renomeando as colunas para facilitar interpretação e plotagem\n\nnames(df) <- c(\"País\", \"Ano\", \"Produção.TeraWatt\")\n\n# Filtrando os dados para o último ano (2014)\ndf <- subset(df, Ano == \"2014\")\n\n# Criando o mapa choropleth com a escala de cores ajustada\nlibrary(plotly)\nplot_ly(\n  data = df,\n  locations = ~País,\n  locationmode = \"country names\",\n  z = ~Produção.TeraWatt, # Variável que determina as cores\n  type = \"choropleth\",\n  colorscale = \"RdBu\") # outras escalas: # outras escalas: Viridis, Inferno, Blues, Cividis, Greens, ...\n```\n\n</div>\n\n\\\n\n<!-- ############# ELEVAÇÃO DA TEMPERATURA DA TERRA ################ --->\n\n<div class=\"hum-fundo\">  <!--modifica para cada área-->\n\n## Aquecimento Global (EM13CN03, EM13CN09, EM13CHS105, EM13CHS205)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\nlibrary(magrittr)  # bibliotecas necessárias\n\n# 1) Obtendo os dados da internet\n\nurl <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define o link para os dados\ndados <- read.csv(url)  # lê o arquivo dos dados\n\n# 2) Construindo o gráfico com animação \n\nplot_ly(dados, x = ~Year, y = ~Mean,\n        type = \"scatter\", \n        marker = list(line = list(width = 10)),\n        frame = ~Year) %>%\n  animation_opts(\n    frame = 150,           # Velocidade da animação\n    transition = 0,\n    redraw = TRUE\n  ) %>%\n  layout(\n    title = \"Flutuação da temperatura global\",\n    xaxis = list(title = \"Anos\"),\n    yaxis = list(title = \"Diferença de temperatura, C\"))\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\nlibrary(magrittr)  # bibliotecas necessárias\n\n# 1) Obtendo os dados da internet\n\nurl <- \"https://raw.githubusercontent.com/datasets/global-temp/refs/heads/main/data/annual.csv\" # define o link para os dados\ndados <- read.csv(url)  # lê o arquivo dos dados\n\n# 2) Construindo o gráfico com animação \n\nplot_ly(dados, x = ~Year, y = ~Mean,\n        type = \"bar\", \n        marker = list(line = list(width = 10)),\n        frame = ~Year) %>%\n  animation_opts(\n    frame = 150,           # Velocidade da animação\n    transition = 0,\n    redraw = TRUE\n  ) %>%\n  layout(\n    title = \"Flutuação da temperatura global\",\n    xaxis = list(title = \"Anos\"),\n    yaxis = list(title = \"Diferença de temperatura, C\"))\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nplot_ly(dados, x = ~Year, y = ~Mean, type = \"bar\", \n        text = ~paste(\"Ano:\", Year, \"<br>Temperatura:\", Mean, \"°C\"),\n        hoverinfo = \"text\")\n\n\n```\n\n</div>\n\n\\\n\n<!-- ###### EXPECTATIVA DE VIDA E PRODUTO INTERNO BRUTO ####### --->\n\n<div class=\"hum-fundo\">  <!--modifica para cada área-->\n\n## Expectativa de vida e Produto Interno Bruto - PIB, 1956 a 2007 (EM13CHS101, EM13CHS104, EM13MAT405, EM13MAT410)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Obtendo os dados na internet\nurl <- read.csv(\"https://raw.githubusercontent.com/kirenz/datasets/refs/heads/master/gapminder.csv\")\n\ndadosExpVida <- url  # atribuindo os dados a um objeto do `R`\n\n# Criando o gráfico interativo com animação\nplot_ly(\n  dadosExpVida, # dados convertidos da internet\n  x = ~gdpPercap, # renda per capita\n  y = ~lifeExp, # expectativa de vida\n  size = ~pop, # tamanho dos pontos em função da população\n  color = ~country, # cor dos pontos em função do país\n  frame = ~year,    # Frame para a animação por ano de coleta dos dados\n  text = ~continent,  # País como informação ao passar o mouse\n  hoverinfo = \"text\",\n  type = 'scatter', # tipo de gráfico\n  mode = 'markers',\n  marker = list(sizemode = 'diameter', opacity = 0.7)\n) %>%\n  layout(  # atribuição de título e etiquetas dos eixos\n    title = \"Produto interno bruto X Expectativa de vida\",\n    xaxis = list(title = \"PIB (log), US$\", type = \"log\"),\n    yaxis = list(title = \"Expectativa de Vida, anos\"),\n    showlegend = TRUE # possibilidade ou não de aparecer a legenda\n  ) %>%\n  animation_opts(\n    frame = 1000,           # Velocidade da animação\n    transition = 0,\n    redraw = TRUE\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Obtendo os dados na internet\nurl <- read.csv(\"https://raw.githubusercontent.com/kirenz/datasets/refs/heads/master/gapminder.csv\")\n\ndadosExpVida <- url  # atribuindo os dados a um objeto do `R`\n\n# Criando o gráfico interativo com animação\nplot_ly(\n  dadosExpVida, # dados convertidos da internet\n  x = ~gdpPercap, # renda per capita\n  y = ~lifeExp, # expectativa de vida\n  size = ~pop, # tamanho dos pontos em função da população\n  color = ~country, # cor dos pontos em função do país\n  frame = ~year,    # Frame para a animação por ano de coleta dos dados\n  text = ~continent,  # País como informação ao passar o mouse\n  hoverinfo = \"text\",\n  type = 'scatter', # tipo de gráfico\n  mode = 'markers',\n  marker = list(sizemode = 'diameter', opacity = 0.7)\n) %>%\n  layout(  # atribuição de título e etiquetas dos eixos\n    title = \"Produto interno bruto X Expectativa de vida\",\n    xaxis = list(title = \"PIB (log), US$\", type = \"log\"),\n    yaxis = list(title = \"Expectativa de Vida, anos\"),\n    showlegend = TRUE # possibilidade ou não de aparecer a legenda\n  ) %>%\n  animation_opts(\n    frame = 1000,           # Velocidade da animação\n    transition = 0,\n    redraw = TRUE\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Dentro de plot_ly()\ncolor = ~continent\n\n```\n\n</div>\n\n\\\n\n<!-- ####### QUEDA DE METEORITOS - MAPA ########## --->\n\n<div class=\"hum-fundo\">  <!--modifica para cada área-->\n\n## Queda de meteoritos na Terra - 1800 a 2013 (EM13CHS101, EM13CNT303, EM13CNT301)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(maps)\n\nmeteoritos <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-11/meteorites.csv\")\n\noptions(scipen = 999) \n\nmeteoritos_Mundo <- meteoritos %>%\n  filter(fall == \"Fell\") %>%\n  filter(year > 1800) %>%\n  # drop_na() %>%\n  arrange(mass)\n\n# Carregar o mapa do mundo\nworld <- map_data(\"world\")\n\nmapa_animado <- world %>%\n  ggplot() +\n  geom_polygon(aes( x= long, y = lat, group = group),\n               fill = \"grey20\",\n               color = \"white\",\n               size = 0.01) +\n  geom_point(data= meteoritos_Mundo, \n             aes(x = long, \n                 y = lat, \n                 frame = year,\n                 size = mass),\n             color = \"orange\",\n             alpha = 0.7) +\n  labs( title = \"Queda de meteoritos -  1800 a 2013}\",\n        caption = \"The Meteoritical Society\") +\n  # theme_map() +\n  scale_size_continuous(guide = F) +\n  scale_color_discrete(name = \"Type\") +\n  theme(plot.title = element_text(size = 10, hjust = 0.5))\n\n\nfig_2 <- ggplotly(mapa_animado) %>% animation_slider(currentvalue = list(prefix = \"Year \", font = list(color=\"orange\"))) \n\nfig_2\n\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(maps)\n\nmeteoritos <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-11/meteorites.csv\")\n\noptions(scipen = 999) \n\nmeteoritos_Mundo <- meteoritos %>%\n  filter(fall == \"Fell\") %>%\n  filter(year > 1800) %>%\n  # drop_na() %>%\n  arrange(mass)\n\n# Carregar o mapa do mundo\nworld <- map_data(\"world\")\n\nmapa_animado <- world %>%\n  ggplot() +\n  geom_polygon(aes( x= long, y = lat, group = group),\n               fill = \"grey20\",\n               color = \"white\",\n               size = 0.01) +\n  geom_point(data= meteoritos_Mundo, \n             aes(x = long, \n                 y = lat, \n                 frame = year,\n                 size = mass),\n             color = \"orange\",\n             alpha = 0.7) +\n  labs( title = \"Queda de meteoritos -  1800 a 2013}\",\n        caption = \"The Meteoritical Society\") +\n  # theme_map() +\n  scale_size_continuous(guide = F) +\n  scale_color_discrete(name = \"Type\") +\n  theme(plot.title = element_text(size = 10, hjust = 0.5))\n\n\nfig_2 <- ggplotly(mapa_animado) %>% animation_slider(currentvalue = list(prefix = \"Year \", font = list(color=\"orange\"))) \n\nfig_2\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"hum-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nfill = \"grey30\",  # Alterado de \"grey20\" para \"grey30\"\n\n```\n\n</div>\n\n\\\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"number-sections":true,"toc":true,"output-file":"humanas.html"},"language":{"toc-title-document":"Índice","toc-title-website":"Nesta página","related-formats-title":"Outros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fonte","other-links-title":"Outros Links","code-links-title":"Ligações de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Caderno do Artigo","notebook-preview-download":"Baixar Caderno","notebook-preview-download-src":"Descarregar código fonte","notebook-preview-back":"Voltar ao Artigo","manuscript-meca-bundle":"Arquivo MECA","section-title-abstract":"Resumo","section-title-appendices":"Apêndices","section-title-footnotes":"Notas de rodapé","section-title-references":"Referências","section-title-reuse":"Reuso","section-title-copyright":"Direito autoral","section-title-citation":"Citação","appendix-attribution-cite-as":"Por favor, cite este trabalho como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licença","title-block-author-single":"Autor","title-block-author-plural":"Autores","title-block-affiliation-single":"Afiliação","title-block-affiliation-plural":"Afiliações","title-block-published":"Data de Publicação","title-block-modified":"Data de Modificação","title-block-keywords":"Palavras-chave","callout-tip-title":"Dica","callout-note-title":"Nota","callout-warning-title":"Aviso","callout-important-title":"Importante","callout-caution-title":"Cuidado","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar o código","code-tools-hide-all-code":"Esconder o código","code-tools-view-source":"Ver o código fonte","code-tools-source-code":"Código fonte","tools-share":"Share","tools-download":"Download","code-line":"Linha","code-lines":"Linhas","copy-button-tooltip":"Copiar para a área de transferência","copy-button-tooltip-success":"Copiada","repo-action-links-edit":"Editar essa página","repo-action-links-source":"Ver o código fonte","repo-action-links-issue":"Criar uma issue","back-to-top":"De volta ao topo","search-no-results-text":"Nenhum resultado","search-matching-documents-text":"documentos correspondentes","search-copy-link-title":"Copiar link para a busca","search-hide-matches-text":"Esconder correspondências adicionais","search-more-match-text":"mais correspondência neste documento","search-more-matches-text":"mais correspondências neste documento","search-clear-button-title":"Limpar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Procurar","toggle-section":"Alternar seção","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo escuro","toggle-reader-mode":"Alternar modo de leitor","toggle-navigation":"Alternar de navegação","crossref-fig-title":"Figura","crossref-tbl-title":"Tabela","crossref-lst-title":"Listagem","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolário","crossref-prp-title":"Proposição","crossref-cnj-title":"Conjetura","crossref-def-title":"Definição","crossref-exm-title":"Exemplo","crossref-exr-title":"Exercício","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apêndice","crossref-sec-prefix":"Seção","crossref-eq-prefix":"Equação","crossref-lof-title":"Lista de Figuras","crossref-lot-title":"Lista de Tabelas","crossref-lol-title":"Lista de Listagens","environment-proof-title":"Comprovação","environment-remark-title":"Comentário","environment-solution-title":"Solução","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Pré-selecionado","listing-page-order-by-date-asc":"Mais velho","listing-page-order-by-date-desc":"O mais novo","listing-page-order-by-number-desc":"Decrescente","listing-page-order-by-number-asc":"Crescente","listing-page-field-date":"Data","listing-page-field-title":"Título","listing-page-field-description":"Descrição","listing-page-field-author":"Autor","listing-page-field-filename":"Nome do arquivo","listing-page-field-filemodified":"Arquivo modificado","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tempo de leitura","listing-page-field-wordcount":"Contagem de Palavras","listing-page-field-categories":"Categorias","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Tudo","listing-page-no-matches":"Nenhum item correspondente","listing-page-words":"{0} palavras","listing-page-filter":"Filtro","draft":"Rascunho"},"metadata":{"lang":"pt","fig-responsive":true,"quarto-version":"1.7.29","theme":{"light":"flatly"},"title":"Ciências Humanas","class":"fundo-basico"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}