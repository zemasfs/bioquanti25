{"title":"Química","markdown":{"yaml":{"title":"Química","number-sections":true,"toc":true,"lang":"pt","class":"fundo-basico","publish":false},"headingText":"Lei dos Gases Ideais (EM13CNT101, EM13CNT204, EM13CNT205, EM13CNT207, EM13CNT303)","containsRefs":false,"markdown":"\n\n<!-- ###########   LEI DOS GASES IDEAIS   ################# -->\n\n\n<div class=\"quim-fundo\">  <!--modifica para cada área-->\n\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Dados:\nR = 8.314 # J/(mol*K), constante geral dos gases ideias\nV = seq(0,22.4, length.out=50)  # vetor de \"Volume\" (em litros), com 50 pontos\nT = 298 # K, temperatura absoluta\n\n\n# Equação\n# pV = RT; p = RT/V\np = R*T/V\n\nlibrary(plotly)\nlibrary(magrittr) # biblioteca para o operador pipe \"%>%\"\nplot_ly(x = V, y = ~R*T/V, type = 'scatter', mode='lines') %>%\n  layout(\n    title = \"Transformação Isotérmica de um Gás\",\n    xaxis = list(title = \"Volume V, L\", range=c(-1,24)),\n    yaxis = list(title = \"Pressão p, Pascal\")\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Dados:\nR = 8.314 # J/(mol*K), constante geral dos gases ideias\nV = seq(0,22.4, length.out=50)  # vetor de \"Volume\" (em litros), com 50 pontos\nT = 298 # K, temperatura absoluta\n\n\n# Equação\n# pV = RT; p = RT/V\np = R*T/V\n\nlibrary(plotly)\nlibrary(magrittr) # biblioteca para o operador pipe \"%>%\"\nplot_ly(x = V, y = ~R*T/V, type = 'scatter', mode='lines') %>%\n  layout(\n    title = \"Transformação Isotérmica de um Gás\",\n    xaxis = list(title = \"Volume V, L\", range=c(-1,24)),\n    yaxis = list(title = \"Pressão p, Pascal\")\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nplot_ly(x = V, y = ~R*T/V, type = 'scatter', mode='lines', line = list(color = \"red\", width = 3)) %>%  # Alteração da cor e largura da linha\n```\n\n</div>\n\n\\\n\n<!-- ###########   CURVA DE REAGENTE E PRODUTO   ################# -->\n\n\n<div class=\"quim-fundo\">  <!--modifica para cada área-->\n\n## Curvas de consumo de reagente e formação de produto (EM13CNT301, EM13MAT304, EM13CNT306)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\nlibrary(gifski)\n\n# Dados simulados de tempo, reagente e produto\ntempo <- seq(0, 10, length.out = 100)           # 0 a 10 segundos\nreagente <- 100 * exp(-0.3 * tempo)             # Decaimento exponencial\nproduto <- 100 * (1 - exp(-0.3 * tempo))        # Formação de produto\n\n# Criando um dataframe para o gráfico\ndados <- data.frame(Tempo = tempo, Reagente = reagente, Produto = produto)\n\n# Gráfico animado de consumo de reagente e formação de produto\np <- ggplot(dados, aes(x = Tempo)) +\n  geom_line(aes(y = Reagente, color = \"Reagente\"), linewidth = 1.2) +\n  geom_line(aes(y = Produto, color = \"Produto\"), linewidth = 1.2) +\n  scale_color_manual(values = c(\"Reagente\" = \"blue\", \"Produto\" = \"red\")) +\n  labs(title = \"Consumo de Reagente e Formação de Produto ao Longo do Tempo\",\n       x = \"Tempo (s)\", y = \"Quantidade (mol)\", color = \"Substância\") +\n  transition_reveal(Tempo) +\n  theme_minimal()\n\n# Exibindo o gráfico animado\nanimate(p, renderer = gifski_renderer())\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\nlibrary(gifski)\n\n# Dados simulados de tempo, reagente e produto\ntempo <- seq(0, 10, length.out = 100)           # 0 a 10 segundos\nreagente <- 100 * exp(-0.3 * tempo)             # Decaimento exponencial\nproduto <- 100 * (1 - exp(-0.3 * tempo))        # Formação de produto\n\n# Criando um dataframe para o gráfico\ndados <- data.frame(Tempo = tempo, Reagente = reagente, Produto = produto)\n\n# Gráfico animado de consumo de reagente e formação de produto\np <- ggplot(dados, aes(x = Tempo)) +\n  geom_line(aes(y = Reagente, color = \"Reagente\"), linewidth = 1.2) +\n  geom_line(aes(y = Produto, color = \"Produto\"), linewidth = 1.2) +\n  scale_color_manual(values = c(\"Reagente\" = \"blue\", \"Produto\" = \"red\")) +\n  labs(title = \"Consumo de Reagente e Formação de Produto ao Longo do Tempo\",\n       x = \"Tempo (s)\", y = \"Quantidade (mol)\", color = \"Substância\") +\n  transition_reveal(Tempo) +\n  theme_minimal()\n\n# Exibindo o gráfico animado\nanimate(p, renderer = gifski_renderer())\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n scale_color_manual(values = c(\"Reagente\" = \"green\", \"Produto\" = \"purple\")) +  # Mudança nas cores\n\n```\n\n</div>\n\n\\\n\n<!-- ###########   EQUILÍBRIO DE DISSOCIAÇÃO   ################# -->\n\n\n<div class=\"quim-fundo\">  <!--modifica para cada área-->\n\n## Equilíbrio de dissociação de ácidos e bases fracas (EM13CNT303, EM13MAT305, EM13CNT304)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Parâmetro inicial de Ka para ácido fraco e dados para pH e concentração\nKa <- 1e-5  # Constante de acidez padrão\n\n# Valores de pH e concentrações\npH_values <- seq(0, 14, 0.1)\nconc_H <- 10^(-pH_values)       # Concentração H+ para cada pH\nconc_OH <- 1e-14 / conc_H       # Concentração OH- com base no produto iônico da água\nconc_HA <- conc_H / (Ka + conc_H)  # Concentração HA para ácido fraco\nconc_A <- Ka * conc_HA             # Concentração A- \n\n# Data frame combinado\ndados_acidez <- data.frame(pH = pH_values, conc_H = conc_H, conc_OH = conc_OH, conc_HA = conc_HA, conc_A = conc_A)\n\n# Gráfico combinado interativo\nplot_ly(dados_acidez) %>%\n  add_lines(x = ~pH, y = ~conc_H, name = \"Concentração H+\", line = list(color = \"blue\")) %>%\n  add_lines(x = ~pH, y = ~conc_OH, name = \"Concentração OH-\", line = list(color = \"red\")) %>%\n  add_lines(x = ~pH, y = ~conc_HA, name = \"Concentração HA (ácido)\", line = list(color = \"purple\")) %>%\n  add_lines(x = ~pH, y = ~conc_A, name = \"Concentração A- (base conjugada)\", line = list(color = \"green\")) %>%\n  layout(\n    title = \"Curvas de Acidez, Basicidade e Dissociação de Ácido\",\n    xaxis = list(title = \"pH\"),\n    yaxis = list(title = \"Concentração (mol/L)\", type = \"log\"),\n    sliders = list(\n      list(\n        active = 5, \n        currentvalue = list(prefix = \"Ka = \"),\n        steps = lapply(seq(1e-7, 1e-3, length.out = 10), function(k) {\n          list(label = format(k, scientific = TRUE), method = \"update\",\n               args = list(list(\n                 y = list(\n                   10^(-pH_values),                    # Atualizar H+\n                   1e-14 / 10^(-pH_values),            # Atualizar OH-\n                   10^(-pH_values) / (k + 10^(-pH_values)), # Atualizar HA\n                   k * (10^(-pH_values) / (k + 10^(-pH_values))) # Atualizar A-\n                 )\n               )))\n        })\n      )\n    )\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Parâmetro inicial de Ka para ácido fraco e dados para pH e concentração\nKa <- 1e-5  # Constante de acidez padrão\n\n# Valores de pH e concentrações\npH_values <- seq(0, 14, 0.1)\nconc_H <- 10^(-pH_values)       # Concentração H+ para cada pH\nconc_OH <- 1e-14 / conc_H       # Concentração OH- com base no produto iônico da água\nconc_HA <- conc_H / (Ka + conc_H)  # Concentração HA para ácido fraco\nconc_A <- Ka * conc_HA             # Concentração A- \n\n# Data frame combinado\ndados_acidez <- data.frame(pH = pH_values, conc_H = conc_H, conc_OH = conc_OH, conc_HA = conc_HA, conc_A = conc_A)\n\n# Gráfico combinado interativo\nplot_ly(dados_acidez) %>%\n  add_lines(x = ~pH, y = ~conc_H, name = \"Concentração H+\", line = list(color = \"blue\")) %>%\n  add_lines(x = ~pH, y = ~conc_OH, name = \"Concentração OH-\", line = list(color = \"red\")) %>%\n  add_lines(x = ~pH, y = ~conc_HA, name = \"Concentração HA (ácido)\", line = list(color = \"purple\")) %>%\n  add_lines(x = ~pH, y = ~conc_A, name = \"Concentração A- (base conjugada)\", line = list(color = \"green\")) %>%\n  layout(\n    title = \"Curvas de Acidez, Basicidade e Dissociação de Ácido\",\n    xaxis = list(title = \"pH\"),\n    yaxis = list(title = \"Concentração (mol/L)\", type = \"log\"),\n    sliders = list(\n      list(\n        active = 5, \n        currentvalue = list(prefix = \"Ka = \"),\n        steps = lapply(seq(1e-7, 1e-3, length.out = 10), function(k) {\n          list(label = format(k, scientific = TRUE), method = \"update\",\n               args = list(list(\n                 y = list(\n                   10^(-pH_values),                    # Atualizar H+\n                   1e-14 / 10^(-pH_values),            # Atualizar OH-\n                   10^(-pH_values) / (k + 10^(-pH_values)), # Atualizar HA\n                   k * (10^(-pH_values) / (k + 10^(-pH_values))) # Atualizar A-\n                 )\n               )))\n        })\n      )\n    )\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nadd_lines(x = ~pH, y = ~conc_H, name = \"Concentração H+\", line = list(color = \"blue\", width = 2)) %>%  # Aumento da espessura da linha\n  add_lines(x = ~pH, y = ~conc_OH, name = \"Concentração OH-\", line = list(color = \"red\", width = 2)) %>%   # Aumento da espessura da linha\n  add_lines(x = ~pH, y = ~conc_HA, name = \"Concentração HA (ácido)\", line = list(color = \"purple\", width = 2)) %>%   # Aumento da espessura da linha\n  add_lines(x = ~pH, y = ~conc_A, name = \"Concentração A- (base conjugada)\", line = list(color = \"green\", width = 2)) %>%   # Aumento da espessura da linha\n\n```\n\n</div>\n\n\\\n\n<!-- ###########   DECAIMENTO RADIOATIVO   ################# -->\n\n\n<div class=\"quim-fundo\">  <!--modifica para cada área-->\n\n## Decaimento radioativo e meia-vida (EM13CNT306, EM13MAT305, EM13CNT301)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Parâmetros iniciais\nN0 <- 100  # Quantidade inicial\ntempo <- seq(0, 50, by = 0.5)  # Intervalo de tempo\n\n# Função de decaimento\ndecaimento_radioativo <- function(t, meia_vida) {\n  N0 * 0.5^(t / meia_vida)\n}\n\n# Gráfico com plotly\nfig <- plot_ly(x = ~tempo, y = ~decaimento_radioativo(tempo, 10), type = 'scatter', mode = 'lines', name = \"Decaimento\")\n\n# Adicionando o slider\nfig <- fig %>% layout(\n  title = \"Decaimento Radioativo\",\n  xaxis = list(title = \"Tempo\"),\n  yaxis = list(title = \"Quantidade Restante\"),\n  sliders = list(list(\n    currentvalue = list(prefix = \"Meia-vida = \"),\n    steps = lapply(seq(5, 30, by = 5), function(meia_vida) {\n      list(label = as.character(meia_vida), method = \"update\",\n           args = list(list(y = list(decaimento_radioativo(tempo, meia_vida)))))\n    })\n  ))\n)\n\nfig\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Parâmetros iniciais\nN0 <- 100  # Quantidade inicial\ntempo <- seq(0, 50, by = 0.5)  # Intervalo de tempo\n\n# Função de decaimento\ndecaimento_radioativo <- function(t, meia_vida) {\n  N0 * 0.5^(t / meia_vida)\n}\n\n# Gráfico com plotly\nfig <- plot_ly(x = ~tempo, y = ~decaimento_radioativo(tempo, 10), type = 'scatter', mode = 'lines', name = \"Decaimento\")\n\n# Adicionando o slider\nfig <- fig %>% layout(\n  title = \"Decaimento Radioativo\",\n  xaxis = list(title = \"Tempo\"),\n  yaxis = list(title = \"Quantidade Restante\"),\n  sliders = list(list(\n    currentvalue = list(prefix = \"Meia-vida = \"),\n    steps = lapply(seq(5, 30, by = 5), function(meia_vida) {\n      list(label = as.character(meia_vida), method = \"update\",\n           args = list(list(y = list(decaimento_radioativo(tempo, meia_vida)))))\n    })\n  ))\n)\n\nfig\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nargs = list(list(y = list(decaimento_radioativo(tempo, meia_vida))), list(line = list(color = 'green'))))\n\n```\n\n</div>\n\n\\\n\n<!-- ###########   DECOMPOSIÇÃO DE H2O2   ################# -->\n\n\n<div class=\"quim-fundo\">  <!--modifica para cada área-->\n\n## Decomposição de peróxido de hidrogênio (EM13CNT301, EM13MAT305, EM13CNT303)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Parâmetros iniciais\nH2O2_0 <- 1   # Concentração inicial de H2O2\ntempo <- seq(0, 10, 0.1)  # Intervalo de tempo\n\n# Função de decomposição\ndecomposicao <- function(t, k) H2O2_0 * exp(-k * t)\n\n# Gráfico com slider\nfig <- plot_ly(x = ~tempo, y = ~decomposicao(tempo, 0.3), type = 'scatter', mode = 'lines') %>%\n  layout(\n    title = \"Decomposição de H2O2\",\n    xaxis = list(title = \"Tempo (horas)\"),\n    yaxis = list(title = \"Concentração de H2O2 (mol/L)\"),\n    sliders = list(list(\n      currentvalue = list(prefix = \"k = \"),\n      steps = lapply(seq(0.1, 1, 0.1), function(k) {\n        list(label = k, method = \"update\", args = list(list(y = list(decomposicao(tempo, k)))))\n      })\n    ))\n  )\n\nfig\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Parâmetros iniciais\nH2O2_0 <- 1   # Concentração inicial de H2O2\ntempo <- seq(0, 10, 0.1)  # Intervalo de tempo\n\n# Função de decomposição\ndecomposicao <- function(t, k) H2O2_0 * exp(-k * t)\n\n# Gráfico com slider\nfig <- plot_ly(x = ~tempo, y = ~decomposicao(tempo, 0.3), type = 'scatter', mode = 'lines') %>%\n  layout(\n    title = \"Decomposição de H2O2\",\n    xaxis = list(title = \"Tempo (horas)\"),\n    yaxis = list(title = \"Concentração de H2O2 (mol/L)\"),\n    sliders = list(list(\n      currentvalue = list(prefix = \"k = \"),\n      steps = lapply(seq(0.1, 1, 0.1), function(k) {\n        list(label = k, method = \"update\", args = list(list(y = list(decomposicao(tempo, k)))))\n      })\n    ))\n  )\n\nfig\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nlist(label = k, method = \"update\", args = list(list(y = list(decomposicao(tempo, k))), list(line = list(color = 'red'))))\n```\n\n</div>\n\n\\\n\n<!-- ###########   LEI DE PROUST E ESTEQUIOMETRIA   ################# -->\n\n\n<div class=\"quim-fundo\">  <!--modifica para cada área-->\n\n## Lei de Proust e estequiometria de reação em representação 3D (EM13CNT101, EM13CNT202, EM13CNT201)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Quantidades iniciais de reagentes\nH2_mol <- 0:5  # Quantidade de H2 em mol\nO2_mol <- 0:5  # Quantidade de O2 em mol\n\n# Função para calcular H2O formado com base na estequiometria 2:1:2\nformar_H2O <- function(H2, O2) {\n  min(2 * H2, O2) / 2\n}\n\n# Dados para o gráfico\ndados <- expand.grid(H2 = H2_mol, O2 = O2_mol)\ndados$H2O <- mapply(formar_H2O, dados$H2, dados$O2)\n\n# Gráfico interativo com sliders para H2 e O2\nfig <- plot_ly(dados, x = ~H2, y = ~O2, z = ~H2O, type = 'mesh3d', mode = 'markers') %>%\n  layout(\n    title = \"Estequiometria de Reação (Lei de Proust)\",\n    scene = list(\n      xaxis = list(title = \"Quantidade de H2 (mol)\"),\n      yaxis = list(title = \"Quantidade de O2 (mol)\"),\n      zaxis = list(title = \"Quantidade de H2O formado (mol)\")\n    )\n  )\n\nfig\n```\n\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Quantidades iniciais de reagentes\nH2_mol <- 0:5  # Quantidade de H2 em mol\nO2_mol <- 0:5  # Quantidade de O2 em mol\n\n# Função para calcular H2O formado com base na estequiometria 2:1:2\nformar_H2O <- function(H2, O2) {\n  min(2 * H2, O2) / 2\n}\n\n# Dados para o gráfico\ndados <- expand.grid(H2 = H2_mol, O2 = O2_mol)\ndados$H2O <- mapply(formar_H2O, dados$H2, dados$O2)\n\n# Gráfico interativo com sliders para H2 e O2\nfig <- plot_ly(dados, x = ~H2, y = ~O2, z = ~H2O, type = 'mesh3d', mode = 'markers') %>%\n  layout(\n    title = \"Estequiometria de Reação (Lei de Proust)\",\n    scene = list(\n      xaxis = list(title = \"Quantidade de H2 (mol)\"),\n      yaxis = list(title = \"Quantidade de O2 (mol)\"),\n      zaxis = list(title = \"Quantidade de H2O formado (mol)\")\n    )\n  )\n\nfig\n```\n\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nfig <- plot_ly(dados, x = ~H2, y = ~O2, z = ~H2O, type = 'mesh3d', mode = 'markers',\n               marker = list(color = ~H2O, colorscale = 'Viridis', size = 10)) %>%\n\n```\n\n</div>\n\n\\\n\n<!-- ###########   CONSTANTE DE EQUILÍBRIO   ################# -->\n\n\n<div class=\"quim-fundo\">  <!--modifica para cada área-->\n\n## Concentração de reagentes e constante de equilíbrio de dissociação (EM13CNT201, EM13CNT202, EM13CNT204)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Carregar pacotes necessários\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Definir os parâmetros iniciais\nA <- 1  # Concentração de A\nB <- 1  # Concentração de B\n\n# Função para calcular as concentrações de produtos com base na constante K\ncalc_produtos <- function(K) sqrt(K * A * B)\n\n# Criar o conjunto de dados para diferentes valores de K\ndados <- data.frame(\n  K = seq(0.5, 3, by = 0.1)\n)\ndados$C <- calc_produtos(dados$K)\ndados$D <- dados$C\n\n# Transformar dados para visualização de barras\ndados_long <- data.frame(\n  K = rep(dados$K, each = 4),\n  Substancia = rep(c(\"A\", \"B\", \"C\", \"D\"), times = length(dados$K)),\n  Concentracao = c(rep(A, length(dados$K)), rep(B, length(dados$K)), dados$C, dados$D)\n)\n\n# Criar gráfico animado\np <- ggplot(dados_long, aes(x = Substancia, y = Concentracao, fill = Substancia)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = 'Equilíbrio Químico - Constante de Equilíbrio (K): {closest_state}',\n       x = 'Substâncias', y = 'Concentração (mol/L)') +\n  transition_states(K, transition_length = 2, state_length = 1) +\n  ease_aes('linear')\n\n# Mostrar o gráfico\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Carregar pacotes necessários\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Definir os parâmetros iniciais\nA <- 1  # Concentração de A\nB <- 1  # Concentração de B\n\n# Função para calcular as concentrações de produtos com base na constante K\ncalc_produtos <- function(K) sqrt(K * A * B)\n\n# Criar o conjunto de dados para diferentes valores de K\ndados <- data.frame(\n  K = seq(0.5, 3, by = 0.1)\n)\ndados$C <- calc_produtos(dados$K)\ndados$D <- dados$C\n\n# Transformar dados para visualização de barras\ndados_long <- data.frame(\n  K = rep(dados$K, each = 4),\n  Substancia = rep(c(\"A\", \"B\", \"C\", \"D\"), times = length(dados$K)),\n  Concentracao = c(rep(A, length(dados$K)), rep(B, length(dados$K)), dados$C, dados$D)\n)\n\n# Criar gráfico animado\np <- ggplot(dados_long, aes(x = Substancia, y = Concentracao, fill = Substancia)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = 'Equilíbrio Químico - Constante de Equilíbrio (K): {closest_state}',\n       x = 'Substâncias', y = 'Concentração (mol/L)') +\n  transition_states(K, transition_length = 2, state_length = 1) +\n  ease_aes('linear')\n\n# Mostrar o gráfico\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nscale_fill_manual(values = c(\"A\" = \"blue\", \"B\" = \"green\", \"C\" = \"red\", \"D\" = \"purple\"))  # Definida uma paleta de cores personalizada\n\n```\n\n</div>\n\n\\\n\n","srcMarkdownNoYaml":"\n\n<!-- ###########   LEI DOS GASES IDEAIS   ################# -->\n\n\n<div class=\"quim-fundo\">  <!--modifica para cada área-->\n\n## Lei dos Gases Ideais (EM13CNT101, EM13CNT204, EM13CNT205, EM13CNT207, EM13CNT303)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Dados:\nR = 8.314 # J/(mol*K), constante geral dos gases ideias\nV = seq(0,22.4, length.out=50)  # vetor de \"Volume\" (em litros), com 50 pontos\nT = 298 # K, temperatura absoluta\n\n\n# Equação\n# pV = RT; p = RT/V\np = R*T/V\n\nlibrary(plotly)\nlibrary(magrittr) # biblioteca para o operador pipe \"%>%\"\nplot_ly(x = V, y = ~R*T/V, type = 'scatter', mode='lines') %>%\n  layout(\n    title = \"Transformação Isotérmica de um Gás\",\n    xaxis = list(title = \"Volume V, L\", range=c(-1,24)),\n    yaxis = list(title = \"Pressão p, Pascal\")\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Dados:\nR = 8.314 # J/(mol*K), constante geral dos gases ideias\nV = seq(0,22.4, length.out=50)  # vetor de \"Volume\" (em litros), com 50 pontos\nT = 298 # K, temperatura absoluta\n\n\n# Equação\n# pV = RT; p = RT/V\np = R*T/V\n\nlibrary(plotly)\nlibrary(magrittr) # biblioteca para o operador pipe \"%>%\"\nplot_ly(x = V, y = ~R*T/V, type = 'scatter', mode='lines') %>%\n  layout(\n    title = \"Transformação Isotérmica de um Gás\",\n    xaxis = list(title = \"Volume V, L\", range=c(-1,24)),\n    yaxis = list(title = \"Pressão p, Pascal\")\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nplot_ly(x = V, y = ~R*T/V, type = 'scatter', mode='lines', line = list(color = \"red\", width = 3)) %>%  # Alteração da cor e largura da linha\n```\n\n</div>\n\n\\\n\n<!-- ###########   CURVA DE REAGENTE E PRODUTO   ################# -->\n\n\n<div class=\"quim-fundo\">  <!--modifica para cada área-->\n\n## Curvas de consumo de reagente e formação de produto (EM13CNT301, EM13MAT304, EM13CNT306)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\nlibrary(gifski)\n\n# Dados simulados de tempo, reagente e produto\ntempo <- seq(0, 10, length.out = 100)           # 0 a 10 segundos\nreagente <- 100 * exp(-0.3 * tempo)             # Decaimento exponencial\nproduto <- 100 * (1 - exp(-0.3 * tempo))        # Formação de produto\n\n# Criando um dataframe para o gráfico\ndados <- data.frame(Tempo = tempo, Reagente = reagente, Produto = produto)\n\n# Gráfico animado de consumo de reagente e formação de produto\np <- ggplot(dados, aes(x = Tempo)) +\n  geom_line(aes(y = Reagente, color = \"Reagente\"), linewidth = 1.2) +\n  geom_line(aes(y = Produto, color = \"Produto\"), linewidth = 1.2) +\n  scale_color_manual(values = c(\"Reagente\" = \"blue\", \"Produto\" = \"red\")) +\n  labs(title = \"Consumo de Reagente e Formação de Produto ao Longo do Tempo\",\n       x = \"Tempo (s)\", y = \"Quantidade (mol)\", color = \"Substância\") +\n  transition_reveal(Tempo) +\n  theme_minimal()\n\n# Exibindo o gráfico animado\nanimate(p, renderer = gifski_renderer())\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\nlibrary(gifski)\n\n# Dados simulados de tempo, reagente e produto\ntempo <- seq(0, 10, length.out = 100)           # 0 a 10 segundos\nreagente <- 100 * exp(-0.3 * tempo)             # Decaimento exponencial\nproduto <- 100 * (1 - exp(-0.3 * tempo))        # Formação de produto\n\n# Criando um dataframe para o gráfico\ndados <- data.frame(Tempo = tempo, Reagente = reagente, Produto = produto)\n\n# Gráfico animado de consumo de reagente e formação de produto\np <- ggplot(dados, aes(x = Tempo)) +\n  geom_line(aes(y = Reagente, color = \"Reagente\"), linewidth = 1.2) +\n  geom_line(aes(y = Produto, color = \"Produto\"), linewidth = 1.2) +\n  scale_color_manual(values = c(\"Reagente\" = \"blue\", \"Produto\" = \"red\")) +\n  labs(title = \"Consumo de Reagente e Formação de Produto ao Longo do Tempo\",\n       x = \"Tempo (s)\", y = \"Quantidade (mol)\", color = \"Substância\") +\n  transition_reveal(Tempo) +\n  theme_minimal()\n\n# Exibindo o gráfico animado\nanimate(p, renderer = gifski_renderer())\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n scale_color_manual(values = c(\"Reagente\" = \"green\", \"Produto\" = \"purple\")) +  # Mudança nas cores\n\n```\n\n</div>\n\n\\\n\n<!-- ###########   EQUILÍBRIO DE DISSOCIAÇÃO   ################# -->\n\n\n<div class=\"quim-fundo\">  <!--modifica para cada área-->\n\n## Equilíbrio de dissociação de ácidos e bases fracas (EM13CNT303, EM13MAT305, EM13CNT304)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Parâmetro inicial de Ka para ácido fraco e dados para pH e concentração\nKa <- 1e-5  # Constante de acidez padrão\n\n# Valores de pH e concentrações\npH_values <- seq(0, 14, 0.1)\nconc_H <- 10^(-pH_values)       # Concentração H+ para cada pH\nconc_OH <- 1e-14 / conc_H       # Concentração OH- com base no produto iônico da água\nconc_HA <- conc_H / (Ka + conc_H)  # Concentração HA para ácido fraco\nconc_A <- Ka * conc_HA             # Concentração A- \n\n# Data frame combinado\ndados_acidez <- data.frame(pH = pH_values, conc_H = conc_H, conc_OH = conc_OH, conc_HA = conc_HA, conc_A = conc_A)\n\n# Gráfico combinado interativo\nplot_ly(dados_acidez) %>%\n  add_lines(x = ~pH, y = ~conc_H, name = \"Concentração H+\", line = list(color = \"blue\")) %>%\n  add_lines(x = ~pH, y = ~conc_OH, name = \"Concentração OH-\", line = list(color = \"red\")) %>%\n  add_lines(x = ~pH, y = ~conc_HA, name = \"Concentração HA (ácido)\", line = list(color = \"purple\")) %>%\n  add_lines(x = ~pH, y = ~conc_A, name = \"Concentração A- (base conjugada)\", line = list(color = \"green\")) %>%\n  layout(\n    title = \"Curvas de Acidez, Basicidade e Dissociação de Ácido\",\n    xaxis = list(title = \"pH\"),\n    yaxis = list(title = \"Concentração (mol/L)\", type = \"log\"),\n    sliders = list(\n      list(\n        active = 5, \n        currentvalue = list(prefix = \"Ka = \"),\n        steps = lapply(seq(1e-7, 1e-3, length.out = 10), function(k) {\n          list(label = format(k, scientific = TRUE), method = \"update\",\n               args = list(list(\n                 y = list(\n                   10^(-pH_values),                    # Atualizar H+\n                   1e-14 / 10^(-pH_values),            # Atualizar OH-\n                   10^(-pH_values) / (k + 10^(-pH_values)), # Atualizar HA\n                   k * (10^(-pH_values) / (k + 10^(-pH_values))) # Atualizar A-\n                 )\n               )))\n        })\n      )\n    )\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Parâmetro inicial de Ka para ácido fraco e dados para pH e concentração\nKa <- 1e-5  # Constante de acidez padrão\n\n# Valores de pH e concentrações\npH_values <- seq(0, 14, 0.1)\nconc_H <- 10^(-pH_values)       # Concentração H+ para cada pH\nconc_OH <- 1e-14 / conc_H       # Concentração OH- com base no produto iônico da água\nconc_HA <- conc_H / (Ka + conc_H)  # Concentração HA para ácido fraco\nconc_A <- Ka * conc_HA             # Concentração A- \n\n# Data frame combinado\ndados_acidez <- data.frame(pH = pH_values, conc_H = conc_H, conc_OH = conc_OH, conc_HA = conc_HA, conc_A = conc_A)\n\n# Gráfico combinado interativo\nplot_ly(dados_acidez) %>%\n  add_lines(x = ~pH, y = ~conc_H, name = \"Concentração H+\", line = list(color = \"blue\")) %>%\n  add_lines(x = ~pH, y = ~conc_OH, name = \"Concentração OH-\", line = list(color = \"red\")) %>%\n  add_lines(x = ~pH, y = ~conc_HA, name = \"Concentração HA (ácido)\", line = list(color = \"purple\")) %>%\n  add_lines(x = ~pH, y = ~conc_A, name = \"Concentração A- (base conjugada)\", line = list(color = \"green\")) %>%\n  layout(\n    title = \"Curvas de Acidez, Basicidade e Dissociação de Ácido\",\n    xaxis = list(title = \"pH\"),\n    yaxis = list(title = \"Concentração (mol/L)\", type = \"log\"),\n    sliders = list(\n      list(\n        active = 5, \n        currentvalue = list(prefix = \"Ka = \"),\n        steps = lapply(seq(1e-7, 1e-3, length.out = 10), function(k) {\n          list(label = format(k, scientific = TRUE), method = \"update\",\n               args = list(list(\n                 y = list(\n                   10^(-pH_values),                    # Atualizar H+\n                   1e-14 / 10^(-pH_values),            # Atualizar OH-\n                   10^(-pH_values) / (k + 10^(-pH_values)), # Atualizar HA\n                   k * (10^(-pH_values) / (k + 10^(-pH_values))) # Atualizar A-\n                 )\n               )))\n        })\n      )\n    )\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nadd_lines(x = ~pH, y = ~conc_H, name = \"Concentração H+\", line = list(color = \"blue\", width = 2)) %>%  # Aumento da espessura da linha\n  add_lines(x = ~pH, y = ~conc_OH, name = \"Concentração OH-\", line = list(color = \"red\", width = 2)) %>%   # Aumento da espessura da linha\n  add_lines(x = ~pH, y = ~conc_HA, name = \"Concentração HA (ácido)\", line = list(color = \"purple\", width = 2)) %>%   # Aumento da espessura da linha\n  add_lines(x = ~pH, y = ~conc_A, name = \"Concentração A- (base conjugada)\", line = list(color = \"green\", width = 2)) %>%   # Aumento da espessura da linha\n\n```\n\n</div>\n\n\\\n\n<!-- ###########   DECAIMENTO RADIOATIVO   ################# -->\n\n\n<div class=\"quim-fundo\">  <!--modifica para cada área-->\n\n## Decaimento radioativo e meia-vida (EM13CNT306, EM13MAT305, EM13CNT301)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Parâmetros iniciais\nN0 <- 100  # Quantidade inicial\ntempo <- seq(0, 50, by = 0.5)  # Intervalo de tempo\n\n# Função de decaimento\ndecaimento_radioativo <- function(t, meia_vida) {\n  N0 * 0.5^(t / meia_vida)\n}\n\n# Gráfico com plotly\nfig <- plot_ly(x = ~tempo, y = ~decaimento_radioativo(tempo, 10), type = 'scatter', mode = 'lines', name = \"Decaimento\")\n\n# Adicionando o slider\nfig <- fig %>% layout(\n  title = \"Decaimento Radioativo\",\n  xaxis = list(title = \"Tempo\"),\n  yaxis = list(title = \"Quantidade Restante\"),\n  sliders = list(list(\n    currentvalue = list(prefix = \"Meia-vida = \"),\n    steps = lapply(seq(5, 30, by = 5), function(meia_vida) {\n      list(label = as.character(meia_vida), method = \"update\",\n           args = list(list(y = list(decaimento_radioativo(tempo, meia_vida)))))\n    })\n  ))\n)\n\nfig\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Parâmetros iniciais\nN0 <- 100  # Quantidade inicial\ntempo <- seq(0, 50, by = 0.5)  # Intervalo de tempo\n\n# Função de decaimento\ndecaimento_radioativo <- function(t, meia_vida) {\n  N0 * 0.5^(t / meia_vida)\n}\n\n# Gráfico com plotly\nfig <- plot_ly(x = ~tempo, y = ~decaimento_radioativo(tempo, 10), type = 'scatter', mode = 'lines', name = \"Decaimento\")\n\n# Adicionando o slider\nfig <- fig %>% layout(\n  title = \"Decaimento Radioativo\",\n  xaxis = list(title = \"Tempo\"),\n  yaxis = list(title = \"Quantidade Restante\"),\n  sliders = list(list(\n    currentvalue = list(prefix = \"Meia-vida = \"),\n    steps = lapply(seq(5, 30, by = 5), function(meia_vida) {\n      list(label = as.character(meia_vida), method = \"update\",\n           args = list(list(y = list(decaimento_radioativo(tempo, meia_vida)))))\n    })\n  ))\n)\n\nfig\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nargs = list(list(y = list(decaimento_radioativo(tempo, meia_vida))), list(line = list(color = 'green'))))\n\n```\n\n</div>\n\n\\\n\n<!-- ###########   DECOMPOSIÇÃO DE H2O2   ################# -->\n\n\n<div class=\"quim-fundo\">  <!--modifica para cada área-->\n\n## Decomposição de peróxido de hidrogênio (EM13CNT301, EM13MAT305, EM13CNT303)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Parâmetros iniciais\nH2O2_0 <- 1   # Concentração inicial de H2O2\ntempo <- seq(0, 10, 0.1)  # Intervalo de tempo\n\n# Função de decomposição\ndecomposicao <- function(t, k) H2O2_0 * exp(-k * t)\n\n# Gráfico com slider\nfig <- plot_ly(x = ~tempo, y = ~decomposicao(tempo, 0.3), type = 'scatter', mode = 'lines') %>%\n  layout(\n    title = \"Decomposição de H2O2\",\n    xaxis = list(title = \"Tempo (horas)\"),\n    yaxis = list(title = \"Concentração de H2O2 (mol/L)\"),\n    sliders = list(list(\n      currentvalue = list(prefix = \"k = \"),\n      steps = lapply(seq(0.1, 1, 0.1), function(k) {\n        list(label = k, method = \"update\", args = list(list(y = list(decomposicao(tempo, k)))))\n      })\n    ))\n  )\n\nfig\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Parâmetros iniciais\nH2O2_0 <- 1   # Concentração inicial de H2O2\ntempo <- seq(0, 10, 0.1)  # Intervalo de tempo\n\n# Função de decomposição\ndecomposicao <- function(t, k) H2O2_0 * exp(-k * t)\n\n# Gráfico com slider\nfig <- plot_ly(x = ~tempo, y = ~decomposicao(tempo, 0.3), type = 'scatter', mode = 'lines') %>%\n  layout(\n    title = \"Decomposição de H2O2\",\n    xaxis = list(title = \"Tempo (horas)\"),\n    yaxis = list(title = \"Concentração de H2O2 (mol/L)\"),\n    sliders = list(list(\n      currentvalue = list(prefix = \"k = \"),\n      steps = lapply(seq(0.1, 1, 0.1), function(k) {\n        list(label = k, method = \"update\", args = list(list(y = list(decomposicao(tempo, k)))))\n      })\n    ))\n  )\n\nfig\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nlist(label = k, method = \"update\", args = list(list(y = list(decomposicao(tempo, k))), list(line = list(color = 'red'))))\n```\n\n</div>\n\n\\\n\n<!-- ###########   LEI DE PROUST E ESTEQUIOMETRIA   ################# -->\n\n\n<div class=\"quim-fundo\">  <!--modifica para cada área-->\n\n## Lei de Proust e estequiometria de reação em representação 3D (EM13CNT101, EM13CNT202, EM13CNT201)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Quantidades iniciais de reagentes\nH2_mol <- 0:5  # Quantidade de H2 em mol\nO2_mol <- 0:5  # Quantidade de O2 em mol\n\n# Função para calcular H2O formado com base na estequiometria 2:1:2\nformar_H2O <- function(H2, O2) {\n  min(2 * H2, O2) / 2\n}\n\n# Dados para o gráfico\ndados <- expand.grid(H2 = H2_mol, O2 = O2_mol)\ndados$H2O <- mapply(formar_H2O, dados$H2, dados$O2)\n\n# Gráfico interativo com sliders para H2 e O2\nfig <- plot_ly(dados, x = ~H2, y = ~O2, z = ~H2O, type = 'mesh3d', mode = 'markers') %>%\n  layout(\n    title = \"Estequiometria de Reação (Lei de Proust)\",\n    scene = list(\n      xaxis = list(title = \"Quantidade de H2 (mol)\"),\n      yaxis = list(title = \"Quantidade de O2 (mol)\"),\n      zaxis = list(title = \"Quantidade de H2O formado (mol)\")\n    )\n  )\n\nfig\n```\n\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Quantidades iniciais de reagentes\nH2_mol <- 0:5  # Quantidade de H2 em mol\nO2_mol <- 0:5  # Quantidade de O2 em mol\n\n# Função para calcular H2O formado com base na estequiometria 2:1:2\nformar_H2O <- function(H2, O2) {\n  min(2 * H2, O2) / 2\n}\n\n# Dados para o gráfico\ndados <- expand.grid(H2 = H2_mol, O2 = O2_mol)\ndados$H2O <- mapply(formar_H2O, dados$H2, dados$O2)\n\n# Gráfico interativo com sliders para H2 e O2\nfig <- plot_ly(dados, x = ~H2, y = ~O2, z = ~H2O, type = 'mesh3d', mode = 'markers') %>%\n  layout(\n    title = \"Estequiometria de Reação (Lei de Proust)\",\n    scene = list(\n      xaxis = list(title = \"Quantidade de H2 (mol)\"),\n      yaxis = list(title = \"Quantidade de O2 (mol)\"),\n      zaxis = list(title = \"Quantidade de H2O formado (mol)\")\n    )\n  )\n\nfig\n```\n\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nfig <- plot_ly(dados, x = ~H2, y = ~O2, z = ~H2O, type = 'mesh3d', mode = 'markers',\n               marker = list(color = ~H2O, colorscale = 'Viridis', size = 10)) %>%\n\n```\n\n</div>\n\n\\\n\n<!-- ###########   CONSTANTE DE EQUILÍBRIO   ################# -->\n\n\n<div class=\"quim-fundo\">  <!--modifica para cada área-->\n\n## Concentração de reagentes e constante de equilíbrio de dissociação (EM13CNT201, EM13CNT202, EM13CNT204)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Carregar pacotes necessários\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Definir os parâmetros iniciais\nA <- 1  # Concentração de A\nB <- 1  # Concentração de B\n\n# Função para calcular as concentrações de produtos com base na constante K\ncalc_produtos <- function(K) sqrt(K * A * B)\n\n# Criar o conjunto de dados para diferentes valores de K\ndados <- data.frame(\n  K = seq(0.5, 3, by = 0.1)\n)\ndados$C <- calc_produtos(dados$K)\ndados$D <- dados$C\n\n# Transformar dados para visualização de barras\ndados_long <- data.frame(\n  K = rep(dados$K, each = 4),\n  Substancia = rep(c(\"A\", \"B\", \"C\", \"D\"), times = length(dados$K)),\n  Concentracao = c(rep(A, length(dados$K)), rep(B, length(dados$K)), dados$C, dados$D)\n)\n\n# Criar gráfico animado\np <- ggplot(dados_long, aes(x = Substancia, y = Concentracao, fill = Substancia)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = 'Equilíbrio Químico - Constante de Equilíbrio (K): {closest_state}',\n       x = 'Substâncias', y = 'Concentração (mol/L)') +\n  transition_states(K, transition_length = 2, state_length = 1) +\n  ease_aes('linear')\n\n# Mostrar o gráfico\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Carregar pacotes necessários\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Definir os parâmetros iniciais\nA <- 1  # Concentração de A\nB <- 1  # Concentração de B\n\n# Função para calcular as concentrações de produtos com base na constante K\ncalc_produtos <- function(K) sqrt(K * A * B)\n\n# Criar o conjunto de dados para diferentes valores de K\ndados <- data.frame(\n  K = seq(0.5, 3, by = 0.1)\n)\ndados$C <- calc_produtos(dados$K)\ndados$D <- dados$C\n\n# Transformar dados para visualização de barras\ndados_long <- data.frame(\n  K = rep(dados$K, each = 4),\n  Substancia = rep(c(\"A\", \"B\", \"C\", \"D\"), times = length(dados$K)),\n  Concentracao = c(rep(A, length(dados$K)), rep(B, length(dados$K)), dados$C, dados$D)\n)\n\n# Criar gráfico animado\np <- ggplot(dados_long, aes(x = Substancia, y = Concentracao, fill = Substancia)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = 'Equilíbrio Químico - Constante de Equilíbrio (K): {closest_state}',\n       x = 'Substâncias', y = 'Concentração (mol/L)') +\n  transition_states(K, transition_length = 2, state_length = 1) +\n  ease_aes('linear')\n\n# Mostrar o gráfico\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"quim-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nscale_fill_manual(values = c(\"A\" = \"blue\", \"B\" = \"green\", \"C\" = \"red\", \"D\" = \"purple\"))  # Definida uma paleta de cores personalizada\n\n```\n\n</div>\n\n\\\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"number-sections":true,"toc":true,"output-file":"quimica.html"},"language":{"toc-title-document":"Índice","toc-title-website":"Nesta página","related-formats-title":"Outros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fonte","other-links-title":"Outros Links","code-links-title":"Ligações de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Caderno do Artigo","notebook-preview-download":"Baixar Caderno","notebook-preview-download-src":"Descarregar código fonte","notebook-preview-back":"Voltar ao Artigo","manuscript-meca-bundle":"Arquivo MECA","section-title-abstract":"Resumo","section-title-appendices":"Apêndices","section-title-footnotes":"Notas de rodapé","section-title-references":"Referências","section-title-reuse":"Reuso","section-title-copyright":"Direito autoral","section-title-citation":"Citação","appendix-attribution-cite-as":"Por favor, cite este trabalho como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licença","title-block-author-single":"Autor","title-block-author-plural":"Autores","title-block-affiliation-single":"Afiliação","title-block-affiliation-plural":"Afiliações","title-block-published":"Data de Publicação","title-block-modified":"Data de Modificação","title-block-keywords":"Palavras-chave","callout-tip-title":"Dica","callout-note-title":"Nota","callout-warning-title":"Aviso","callout-important-title":"Importante","callout-caution-title":"Cuidado","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar o código","code-tools-hide-all-code":"Esconder o código","code-tools-view-source":"Ver o código fonte","code-tools-source-code":"Código fonte","tools-share":"Share","tools-download":"Download","code-line":"Linha","code-lines":"Linhas","copy-button-tooltip":"Copiar para a área de transferência","copy-button-tooltip-success":"Copiada","repo-action-links-edit":"Editar essa página","repo-action-links-source":"Ver o código fonte","repo-action-links-issue":"Criar uma issue","back-to-top":"De volta ao topo","search-no-results-text":"Nenhum resultado","search-matching-documents-text":"documentos correspondentes","search-copy-link-title":"Copiar link para a busca","search-hide-matches-text":"Esconder correspondências adicionais","search-more-match-text":"mais correspondência neste documento","search-more-matches-text":"mais correspondências neste documento","search-clear-button-title":"Limpar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Procurar","toggle-section":"Alternar seção","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo escuro","toggle-reader-mode":"Alternar modo de leitor","toggle-navigation":"Alternar de navegação","crossref-fig-title":"Figura","crossref-tbl-title":"Tabela","crossref-lst-title":"Listagem","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolário","crossref-prp-title":"Proposição","crossref-cnj-title":"Conjetura","crossref-def-title":"Definição","crossref-exm-title":"Exemplo","crossref-exr-title":"Exercício","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apêndice","crossref-sec-prefix":"Seção","crossref-eq-prefix":"Equação","crossref-lof-title":"Lista de Figuras","crossref-lot-title":"Lista de Tabelas","crossref-lol-title":"Lista de Listagens","environment-proof-title":"Comprovação","environment-remark-title":"Comentário","environment-solution-title":"Solução","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Pré-selecionado","listing-page-order-by-date-asc":"Mais velho","listing-page-order-by-date-desc":"O mais novo","listing-page-order-by-number-desc":"Decrescente","listing-page-order-by-number-asc":"Crescente","listing-page-field-date":"Data","listing-page-field-title":"Título","listing-page-field-description":"Descrição","listing-page-field-author":"Autor","listing-page-field-filename":"Nome do arquivo","listing-page-field-filemodified":"Arquivo modificado","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tempo de leitura","listing-page-field-wordcount":"Contagem de Palavras","listing-page-field-categories":"Categorias","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Tudo","listing-page-no-matches":"Nenhum item correspondente","listing-page-words":"{0} palavras","listing-page-filter":"Filtro","draft":"Rascunho"},"metadata":{"lang":"pt","fig-responsive":true,"quarto-version":"1.7.22","theme":{"light":"flatly"},"title":"Química","class":"fundo-basico","publish":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}