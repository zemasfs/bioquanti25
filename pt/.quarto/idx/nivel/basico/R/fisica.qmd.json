{"title":"Física","markdown":{"yaml":{"title":"Física","number-sections":true,"toc":true,"lang":"pt","class":"fundo-basico"},"headingText":"Campo elétrico e distância (EM13MAT305, EM13CNT302)","containsRefs":false,"markdown":"\n\n\n<!-- ############## CAMPO ELÉTRICO E DISTÂNCIA ############### -->\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Constante k0 (aproximadamente 8.99 × 10^9 N·m²/C²)\nk0 <- 8.99e9\n\n# Valores de distância (evitando d = 0 para não dividir por zero)\nd <- seq(0.1, 10, length.out = 100)\n\n# Função para calcular o campo elétrico\ncalcular_campo <- function(Q, d) {\n  k0 * Q / d^2\n}\n\n# Valores iniciais de Q\nQ_inicial <- 1e-6  # Carga inicial em Coulombs\n\n# Gráfico interativo com slider para alterar Q\nplot_ly(x = ~d, y = ~calcular_campo(Q_inicial, d), type = 'scatter', mode = 'lines') %>%\n  layout(\n    title = 'Campo Elétrico (E) em Função da Distância (d)',\n    xaxis = list(title = 'Distância (m)'),\n    yaxis = list(title = 'Campo Elétrico (N/C)', type = 'log'),\n    sliders = list(\n      list(\n        active = 0,\n        currentvalue = list(prefix = \"Carga (Q): \"),\n        steps = lapply(seq(1e-7, 1e-5, length.out = 10), function(Q_value) {\n          list(\n            label = sprintf(\"%.1e\", Q_value),\n            method = \"restyle\",\n            args = list('y', list(calcular_campo(Q_value, d)))\n          )\n        })\n      )\n    )\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Constante k0 (aproximadamente 8.99 × 10^9 N·m²/C²)\nk0 <- 8.99e9\n\n# Valores de distância (evitando d = 0 para não dividir por zero)\nd <- seq(0.1, 10, length.out = 100)\n\n# Função para calcular o campo elétrico\ncalcular_campo <- function(Q, d) {\n  k0 * Q / d^2\n}\n\n# Valores iniciais de Q\nQ_inicial <- 1e-6  # Carga inicial em Coulombs\n\n# Gráfico interativo com slider para alterar Q\nplot_ly(x = ~d, y = ~calcular_campo(Q_inicial, d), type = 'scatter', mode = 'lines') %>%\n  layout(\n    title = 'Campo Elétrico (E) em Função da Distância (d)',\n    xaxis = list(title = 'Distância (m)'),\n    yaxis = list(title = 'Campo Elétrico (N/C)', type = 'log'),\n    sliders = list(\n      list(\n        active = 0,\n        currentvalue = list(prefix = \"Carga (Q): \"),\n        steps = lapply(seq(1e-7, 1e-5, length.out = 10), function(Q_value) {\n          list(\n            label = sprintf(\"%.1e\", Q_value),\n            method = \"restyle\",\n            args = list('y', list(calcular_campo(Q_value, d)))\n          )\n        })\n      )\n    )\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nxaxis = list(title = 'Distância (m)', range = c(0, 10)),  # Definido o intervalo para o eixo X\n    yaxis = list(title = 'Campo Elétrico (N/C)', type = 'log', range = c(1e3, 1e12)),  # Ajuste na escala do eixo Y\n\n```\n\n</div>\n\n\\\n\n<!-- ############## MRUV ############### -->\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Movimento retilíneo uniformemente variado - MRUV (EM13CNT203, EM13CNT204)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Função para calcular a posição em MRUV\ncalcular_mruv <- function(s0, v0, a, t) {\n  s0 + v0 * t + 0.5 * a * t^2\n}\n\n# Dados\ns0 <- 0\nv0 <- 5\nt <- seq(0, 10, length.out = 100)\na_values <- seq(0, 5, by = 1)\n\n# Criando um dataframe com os dados\ndados_mruv <- data.frame()\nfor (a in a_values) {\n  for (time in t) {\n    pos <- calcular_mruv(s0, v0, a, time)\n    dados_mruv <- rbind(dados_mruv, data.frame(Tempo = time, Posição = pos, Aceleração = a))\n  }\n}\n\n# Gráfico animado para MRUV\nggplot(dados_mruv, aes(x = Tempo, y = Posição, group = Aceleração)) +\n  geom_line(aes(color = as.factor(Aceleração))) +\n  labs(title = 'MRUV: Posição em Função do Tempo',\n       subtitle = 'Aceleração = {frame_time} m/s²',\n       x = 'Tempo (s)', y = 'Posição (m)', color = 'Aceleração') +\n  transition_time(Aceleração) +\n  ease_aes('linear')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Função para calcular a posição em MRUV\ncalcular_mruv <- function(s0, v0, a, t) {\n  s0 + v0 * t + 0.5 * a * t^2\n}\n\n# Dados\ns0 <- 0\nv0 <- 5\nt <- seq(0, 10, length.out = 100)\na_values <- seq(0, 5, by = 1)\n\n# Criando um dataframe com os dados\ndados_mruv <- data.frame()\nfor (a in a_values) {\n  for (time in t) {\n    pos <- calcular_mruv(s0, v0, a, time)\n    dados_mruv <- rbind(dados_mruv, data.frame(Tempo = time, Posição = pos, Aceleração = a))\n  }\n}\n\n# Gráfico animado para MRUV\nggplot(dados_mruv, aes(x = Tempo, y = Posição, group = Aceleração)) +\n  geom_line(aes(color = as.factor(Aceleração))) +\n  labs(title = 'MRUV: Posição em Função do Tempo',\n       subtitle = 'Aceleração = {frame_time} m/s²',\n       x = 'Tempo (s)', y = 'Posição (m)', color = 'Aceleração') +\n  transition_time(Aceleração) +\n  ease_aes('linear')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Dentro da função de ggplot()\nscale_color_manual(values = c(\"0\" = \"blue\", \"1\" = \"red\", \"2\" = \"green\", \"3\" = \"purple\", \"4\" = \"orange\", \"5\" = \"brown\")) +  # Definidas cores específicas para cada aceleração\n\n```\n\n</div>\n\n\\\n\n\n<!-- ############## FORÇA GRAVITACIONAL E DISTÂNCIA ############### -->\n\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Força gravitacional e distância (EM13CNT401, EM13CNT402)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Função para calcular a força gravitacional\ncalcular_gravitacional <- function(m1, m2, d) {\n  G <- 6.67e-11\n  G * m1 * m2 / d^2\n}\n\n# Dados\nm1 <- 5.97e24  # Massa da Terra em kg\nm2_values <- seq(1e22, 1e24, length.out = 5)\nd <- seq(1e6, 4e8, length.out = 100)\n\n# Criando um dataframe com os dados\ndados_gravitacional <- data.frame()\nfor (m2 in m2_values) {\n  for (distancia in d) {\n    forca <- calcular_gravitacional(m1, m2, distancia)\n    dados_gravitacional <- rbind(dados_gravitacional, data.frame(Distância = distancia, Força = forca, Massa = m2))\n  }\n}\n\n# Gráfico animado para força gravitacional\nggplot(dados_gravitacional, aes(x = Distância, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força Gravitacional em Função da Distância',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Distância (m)', y = 'Força Gravitacional (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Função para calcular a força gravitacional\ncalcular_gravitacional <- function(m1, m2, d) {\n  G <- 6.67e-11\n  G * m1 * m2 / d^2\n}\n\n# Dados\nm1 <- 5.97e24  # Massa da Terra em kg\nm2_values <- seq(1e22, 1e24, length.out = 5)\nd <- seq(1e6, 4e8, length.out = 100)\n\n# Criando um dataframe com os dados\ndados_gravitacional <- data.frame()\nfor (m2 in m2_values) {\n  for (distancia in d) {\n    forca <- calcular_gravitacional(m1, m2, distancia)\n    dados_gravitacional <- rbind(dados_gravitacional, data.frame(Distância = distancia, Força = forca, Massa = m2))\n  }\n}\n\n# Gráfico animado para força gravitacional\nggplot(dados_gravitacional, aes(x = Distância, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força Gravitacional em Função da Distância',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Distância (m)', y = 'Força Gravitacional (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Dentro da função de ggplot()\ntheme_minimal() +  # Tema simples\n\n```\n\n</div>\n\n\\\n\n<!-- ############## 2a. LEI DE NEWTON ############### -->\n\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## 2a. Lei de Newton - massa e aceleração (EM13CNT202, EM13CNT203)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Função para calcular a força\ncalcular_forca <- function(m, a) {\n  m * a\n}\n\n# Dados\na <- seq(0, 10, length.out = 100)\nm_values <- seq(1, 20, by = 5)\n\n# Criando um dataframe com os dados\ndados_newton <- data.frame()\nfor (m in m_values) {\n  for (aceleracao in a) {\n    forca <- calcular_forca(m, aceleracao)\n    dados_newton <- rbind(dados_newton, data.frame(Aceleração = aceleracao, Força = forca, Massa = m))\n  }\n}\n\n# Gráfico animado para Segunda Lei de Newton\nggplot(dados_newton, aes(x = Aceleração, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força (F) em Função da Aceleração (a)',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Aceleração (m/s²)', y = 'Força (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Função para calcular a força\ncalcular_forca <- function(m, a) {\n  m * a\n}\n\n# Dados\na <- seq(0, 10, length.out = 100)\nm_values <- seq(1, 20, by = 5)\n\n# Criando um dataframe com os dados\ndados_newton <- data.frame()\nfor (m in m_values) {\n  for (aceleracao in a) {\n    forca <- calcular_forca(m, aceleracao)\n    dados_newton <- rbind(dados_newton, data.frame(Aceleração = aceleracao, Força = forca, Massa = m))\n  }\n}\n\n# Gráfico animado para Segunda Lei de Newton\nggplot(dados_newton, aes(x = Aceleração, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força (F) em Função da Aceleração (a)',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Aceleração (m/s²)', y = 'Força (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\ngeom_line(aes(color = as.factor(Massa)), size = 1) +  # Linhas com espessura padrão\n```\n\n</div>\n\n\\\n\n<!-- ############## LEI DE OHM ############### -->\n\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Lei de Ohm - resistância, potencial, e corrente (EM13CNT303, EM13CNT304)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados\nresistencias <- seq(1, 10, by = 1)  # Resistência de 1 a 10 Ohms\ncorrente <- seq(0, 5, length.out = 100)  # Corrente de 0 a 5 Amperes\ndados <- data.frame()\n\n# Criando um dataframe com os dados\nfor (R in resistencias) {\n  for (I in corrente) {\n    V <- I * R  # Calculando a Tensão\n    P <- V * I  # Calculando a Potência\n    dados <- rbind(dados, data.frame(Corrente = I, Resistência = R, Tensão = V, Potência = P))\n  }\n}\n\n# Gráfico animado para Lei de Ohm e Potência\np <- ggplot(dados, aes(x = Corrente, y = Tensão)) +\n  geom_line(aes(color = as.factor(Resistência), group = Resistência)) +\n  geom_point(aes(size = Potência), alpha = 0.5) +\n  labs(title = 'Lei de Ohm: Tensão vs Corrente',\n       subtitle = 'Resistência = {frame_time} Ohms',\n       x = 'Corrente (A)', y = 'Tensão (V)', color = 'Resistência', size = 'Potência (W)') +\n  transition_time(Resistência) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados\nresistencias <- seq(1, 10, by = 1)  # Resistência de 1 a 10 Ohms\ncorrente <- seq(0, 5, length.out = 100)  # Corrente de 0 a 5 Amperes\ndados <- data.frame()\n\n# Criando um dataframe com os dados\nfor (R in resistencias) {\n  for (I in corrente) {\n    V <- I * R  # Calculando a Tensão\n    P <- V * I  # Calculando a Potência\n    dados <- rbind(dados, data.frame(Corrente = I, Resistência = R, Tensão = V, Potência = P))\n  }\n}\n\n# Gráfico animado para Lei de Ohm e Potência\np <- ggplot(dados, aes(x = Corrente, y = Tensão)) +\n  geom_line(aes(color = as.factor(Resistência), group = Resistência)) +\n  geom_point(aes(size = Potência), alpha = 0.5) +\n  labs(title = 'Lei de Ohm: Tensão vs Corrente',\n       subtitle = 'Resistência = {frame_time} Ohms',\n       x = 'Corrente (A)', y = 'Tensão (V)', color = 'Resistência', size = 'Potência (W)') +\n  transition_time(Resistência) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\ngeom_point(aes(size = Potência), alpha = 0.6) +  # Pontos com tamanho de acordo com a potência\n\n```\n\n</div>\n\n\\\n\n<!-- ############## POTÊNCIA E CONSUMO ENERGÉTICO ############### -->\n\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Energia elétrica e consumo residencial (EM13CNT405, EM13CNT306)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados dos eletrodomésticos (potência em kW)\neletrodomesticos <- data.frame(\n  Nome = c(\"Lâmpada\", \"Ventilador\", \"Geladeira\", \"Computador\"),\n  Potencia = c(0.1, 0.15, 0.2, 0.5)  # Potências em kW\n)\n\n# Tempo (em horas) para o qual calculamos o consumo\ntempo <- seq(0, 24, length.out = 100)  # 0 a 24 horas\n\n# Criando um dataframe com o consumo de energia\ndados_consumo <- data.frame()\n\nfor (i in 1:nrow(eletrodomesticos)) {\n  consumo <- eletrodomesticos$Potencia[i] * tempo  # Consumo em kWh\n  dados_consumo <- rbind(dados_consumo, \n                          data.frame(Tempo = tempo, \n                                     Consumo = consumo, \n                                     Eletrodomestico = eletrodomesticos$Nome[i]))\n}\n\n# Gráfico animado para o consumo de energia\np <- ggplot(dados_consumo, aes(x = Tempo, y = Consumo, color = Eletrodomestico, group = Eletrodomestico)) +\n  geom_line(size = 1.2) +\n  labs(title = 'Consumo de Energia Residencial (kWh)',\n       x = 'Tempo (horas)', y = 'Consumo (kWh)', color = 'Eletrodoméstico') +\n  transition_states(Eletrodomestico, transition_length = 2, state_length = 1) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados dos eletrodomésticos (potência em kW)\neletrodomesticos <- data.frame(\n  Nome = c(\"Lâmpada\", \"Ventilador\", \"Geladeira\", \"Computador\"),\n  Potencia = c(0.1, 0.15, 0.2, 0.5)  # Potências em kW\n)\n\n# Tempo (em horas) para o qual calculamos o consumo\ntempo <- seq(0, 24, length.out = 100)  # 0 a 24 horas\n\n# Criando um dataframe com o consumo de energia\ndados_consumo <- data.frame()\n\nfor (i in 1:nrow(eletrodomesticos)) {\n  consumo <- eletrodomesticos$Potencia[i] * tempo  # Consumo em kWh\n  dados_consumo <- rbind(dados_consumo, \n                          data.frame(Tempo = tempo, \n                                     Consumo = consumo, \n                                     Eletrodomestico = eletrodomesticos$Nome[i]))\n}\n\n# Gráfico animado para o consumo de energia\np <- ggplot(dados_consumo, aes(x = Tempo, y = Consumo, color = Eletrodomestico, group = Eletrodomestico)) +\n  geom_line(size = 1.2) +\n  labs(title = 'Consumo de Energia Residencial (kWh)',\n       x = 'Tempo (horas)', y = 'Consumo (kWh)', color = 'Eletrodoméstico') +\n  transition_states(Eletrodomestico, transition_length = 2, state_length = 1) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\ngeom_line(size = 1.4) +  # Linhas com espessura um pouco maior para melhor visibilidade\n\n```\n\n</div>\n\n\\\n\n\n<!-- ############## CONVERSÃO DE TEMPERATURA ############### -->\n\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Conversão de temperatura - Celsius, Kelvin, e Fahrenheit (EM13MAT403, EM13CNT205)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Intervalo de temperatura em Celsius\ncelsius <- seq(-100, 100, by = 1)\n\n# Cálculo das conversões\ntemp_data <- data.frame(\n  Celsius = celsius,\n  Fahrenheit = celsius * 9/5 + 32,\n  Kelvin = celsius + 273.15\n)\n\n# Reorganizando os dados para melhor visualização\ntemp_data_long <- reshape2::melt(temp_data, id.vars = \"Celsius\")\n\n# Gráfico animado\np <- ggplot(temp_data_long, aes(x = Celsius, y = value, color = variable)) +\n  geom_line(size = 1.2) +\n  labs(title = 'Conversão de Temperatura',\n       x = 'Temperatura em Celsius', y = 'Temperatura Convertida',\n       color = 'Escala') +\n  transition_reveal(Celsius) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Intervalo de temperatura em Celsius\ncelsius <- seq(-100, 100, by = 1)\n\n# Cálculo das conversões\ntemp_data <- data.frame(\n  Celsius = celsius,\n  Fahrenheit = celsius * 9/5 + 32,\n  Kelvin = celsius + 273.15\n)\n\n# Reorganizando os dados para melhor visualização\ntemp_data_long <- reshape2::melt(temp_data, id.vars = \"Celsius\")\n\n# Gráfico animado\np <- ggplot(temp_data_long, aes(x = Celsius, y = value, color = variable)) +\n  geom_line(size = 1.2) +\n  labs(title = 'Conversão de Temperatura',\n       x = 'Temperatura em Celsius', y = 'Temperatura Convertida',\n       color = 'Escala') +\n  transition_reveal(Celsius) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nease_aes('cubic-in-out') +  # Mudança na animação para transição mais suave\n\n```\n\n</div>\n\n\\\n\n<!-- ############## DILATAÇÃO TÉRMICA ############### -->\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Dilatação térmica - superficial, volumétrica, e de líquidos (EM13CNT304, EM13CNT305)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(plotly)\n\n# Valores iniciais\narea_inicial <- 100  # Área inicial (cm^2)\nvolume_inicial <- 100  # Volume inicial (cm^3)\nbeta <- 1.2e-5  # Coeficiente de dilatação superficial\ngama_solido <- 3.6e-5  # Coeficiente de dilatação volumétrica\ngama_liquido <- 4.0e-5  # Coeficiente de dilatação volumétrica de líquidos\n\n# Variação de temperatura (0 a 100 °C)\ndelta_T <- seq(0, 100, by = 1)\n\n# Cálculo das dilatações\ndilatacao_superficial <- area_inicial * beta * delta_T\ndilatacao_volumetrica <- volume_inicial * gama_solido * delta_T\ndilatacao_liquido <- volume_inicial * gama_liquido * delta_T\n\n# Dataframes para gráficos\ndados_superficie <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_superficial)\ndados_volumetrica <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_volumetrica)\ndados_liquido <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_liquido)\n\n# Criando os gráficos\ngrafico_superficie <- ggplot(dados_superficie, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Dilatação Superficial\", x = \"Temperatura (°C)\", y = \"ΔA (cm^2)\")\n\ngrafico_volumetrica <- ggplot(dados_volumetrica, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"red\") +\n  labs(title = \"Dilatação Volumétrica\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\ngrafico_liquido <- ggplot(dados_liquido, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"green\") +\n  labs(title = \"Dilatação de Líquidos\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\n# Exibindo os gráficos lado a lado\nggplotly(grafico_superficie + grafico_volumetrica + grafico_liquido)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(patchwork)\n\n# Valores iniciais\narea_inicial <- 100  # Área inicial (cm^2)\nvolume_inicial <- 100  # Volume inicial (cm^3)\nbeta <- 1.2e-5  # Coeficiente de dilatação superficial\ngama_solido <- 3.6e-5  # Coeficiente de dilatação volumétrica\ngama_liquido <- 4.0e-5  # Coeficiente de dilatação volumétrica de líquidos\n\n# Variação de temperatura (0 a 100 °C)\ndelta_T <- seq(0, 100, by = 1)\n\n# Cálculo das dilatações\ndilatacao_superficial <- area_inicial * beta * delta_T\ndilatacao_volumetrica <- volume_inicial * gama_solido * delta_T\ndilatacao_liquido <- volume_inicial * gama_liquido * delta_T\n\n# Dataframes para gráficos\ndados_superficie <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_superficial)\ndados_volumetrica <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_volumetrica)\ndados_liquido <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_liquido)\n\n# Criando os gráficos\ngrafico_superficie <- ggplot(dados_superficie, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Dilatação Superficial\", x = \"Temperatura (°C)\", y = \"ΔA (cm^2)\")\n\ngrafico_volumetrica <- ggplot(dados_volumetrica, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"red\") +\n  labs(title = \"Dilatação Volumétrica\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\ngrafico_liquido <- ggplot(dados_liquido, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"green\") +\n  labs(title = \"Dilatação de Líquidos\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\n# Exibindo os gráficos lado a lado\ngrafico_superficie + grafico_volumetrica + grafico_liquido\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Abaixo de geom_line()\ngeom_point(color = \"blue\", size = 2) +  # Adicionando pontos\n\n```\n\n</div>\n\n\\\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Corrente Alternada - Capacitor (EM13CNT202)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Valores de x\nx <- seq(0, 5 * pi, length.out = 100)\n\nplot_ly() %>%\n  add_trace(x = x, y = sin(x), mode = 'lines', name = 'Potencial') %>%\n  add_trace(x = 1.4*x, y = 0.9*cos(x)-0.4, mode = 'lines', name = 'Corrente') %>%\n  layout(\n    title = 'Tensão e Corrente num Capacitor',\n    xaxis = list(title = 'Ângulo (radianos)', range=c(0,15)), \n    yaxis = list(title = 'Valor'),\n    showlegend = TRUE\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Valores de x\nx <- seq(0, 5 * pi, length.out = 100)\n\nplot_ly() %>%\n  add_trace(x = x, y = sin(x), mode = 'lines', name = 'Potencial') %>%\n  add_trace(x = 1.4*x, y = 0.9*cos(x)-0.4, mode = 'lines', name = 'Corrente') %>%\n  layout(\n    title = 'Tensão e Corrente num Capacitor',\n    xaxis = list(title = 'Ângulo (radianos)', range=c(0,15)), \n    yaxis = list(title = 'Valor'),\n    showlegend = TRUE\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nadd_trace(x = x, y = sin(x), mode = 'lines', name = 'Potencial', \n            line = list(color = 'blue', width = 2, dash = 'dot')) %>%  # Linha pontilhada azul\n\n```\n\n</div>\n\n\\\n\n<!-- ### EFICIÊNCIA DE MÁQUINA TÉRMICA E TEMPERATURA -->\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Rendimento de máquina térmica em função da temperatura (EM13CNT102, EM13CNT103)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Função para gerar os dados e o gráfico com base na temperatura de meia-eficiência (ou temperatura de saturação)\ngenerate_plot_data <- function(b) {\n  a <- 1 # rendimento máximo da máquina térmica\n  x <- seq(0, 300, length.out = 100) # faixa de temperatura\n  y <- a * x / (b + x) # equação que relaciona a temperatura ao rendimento (máximo = 1)\n  data.frame(x, y)\n}\n\n# Inicialize o gráfico com b = 1\ninitial_b <- 1 # valor inicial de b (temperatura de meia-saturação)\nplot_data <- generate_plot_data(initial_b)\n\n# Criando o gráfico inicial usando o pacote ggplot2\np <- ggplot(plot_data, aes(x = x, y = y)) +\n  geom_line() +\n  labs(title = paste(\"Rendimento de uma máquina térmica em função da temperatura\"),\n       x = \"Temperatura (C)\",\n       y = \"Fração de Rendimento\") +\n  theme_minimal() +\n  ylim(0, 1)\n\n# Convertendo para um objeto plotly\nfig <- ggplotly(p)\n\n# Definindo os passos para o slider\nsteps <- lapply(seq(0, 100, by = 10), function(b) {\n  list(\n    label = as.character(b),\n    method = \"restyle\",\n    args = list(\n      list(\n        x = list(generate_plot_data(b)$x),\n        y = list(generate_plot_data(b)$y)\n      ),\n      list(title = paste(\"Rendimento em função do valor de meia-saturação:\", b))\n    )\n  )\n})\n\n# Adicionando o slider para o parâmetro 'b' (temperatura de meia-saturação)\nfig <- fig %>%\n  layout(\n    sliders = list(\n      list(\n        active = 0,\n        currentvalue = list(prefix = \"Meia-Saturação: \"),\n        steps = steps\n      )\n    )\n  )\n\n# Visualize o gráfico\nfig\n\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Função para gerar os dados e o gráfico com base na temperatura de meia-eficiência (ou temperatura de saturação)\ngenerate_plot_data <- function(b) {\n  a <- 1 # rendimento máximo da máquina térmica\n  x <- seq(0, 300, length.out = 100) # faixa de temperatura\n  y <- a * x / (b + x) # equação que relaciona a temperatura ao rendimento (máximo = 1)\n  data.frame(x, y)\n}\n\n# Inicialize o gráfico com b = 1\ninitial_b <- 1 # valor inicial de b (temperatura de meia-saturação)\nplot_data <- generate_plot_data(initial_b)\n\n# Criando o gráfico inicial usando o pacote ggplot2\np <- ggplot(plot_data, aes(x = x, y = y)) +\n  geom_line() +\n  labs(title = paste(\"Rendimento de uma máquina térmica em função da temperatura\"),\n       x = \"Temperatura (C)\",\n       y = \"Fração de Rendimento\") +\n  theme_minimal() +\n  ylim(0, 1)\n\n# Convertendo para um objeto plotly\nfig <- ggplotly(p)\n\n# Definindo os passos para o slider\nsteps <- lapply(seq(0, 100, by = 10), function(b) {\n  list(\n    label = as.character(b),\n    method = \"restyle\",\n    args = list(\n      list(\n        x = list(generate_plot_data(b)$x),\n        y = list(generate_plot_data(b)$y)\n      ),\n      list(title = paste(\"Rendimento em função do valor de meia-saturação:\", b))\n    )\n  )\n})\n\n# Adicionando o slider para o parâmetro 'b' (temperatura de meia-saturação)\nfig <- fig %>%\n  layout(\n    sliders = list(\n      list(\n        active = 0,\n        currentvalue = list(prefix = \"Meia-Saturação: \"),\n        steps = steps\n      )\n    )\n  )\n\n# Visualize o gráfico\nfig\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Dentro de steps\n list(\n        x = list(generate_plot_data(b)$x),\n        y = list(generate_plot_data(b)$y),\n        line = list(color = colorRampPalette(c(\"blue\", \"green\"))(11)[b/10 + 1])  # Faixa de cores variando de azul a verde\n),\n\n```\n\n</div>\n\n\\\n","srcMarkdownNoYaml":"\n\n\n<!-- ############## CAMPO ELÉTRICO E DISTÂNCIA ############### -->\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Campo elétrico e distância (EM13MAT305, EM13CNT302)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Constante k0 (aproximadamente 8.99 × 10^9 N·m²/C²)\nk0 <- 8.99e9\n\n# Valores de distância (evitando d = 0 para não dividir por zero)\nd <- seq(0.1, 10, length.out = 100)\n\n# Função para calcular o campo elétrico\ncalcular_campo <- function(Q, d) {\n  k0 * Q / d^2\n}\n\n# Valores iniciais de Q\nQ_inicial <- 1e-6  # Carga inicial em Coulombs\n\n# Gráfico interativo com slider para alterar Q\nplot_ly(x = ~d, y = ~calcular_campo(Q_inicial, d), type = 'scatter', mode = 'lines') %>%\n  layout(\n    title = 'Campo Elétrico (E) em Função da Distância (d)',\n    xaxis = list(title = 'Distância (m)'),\n    yaxis = list(title = 'Campo Elétrico (N/C)', type = 'log'),\n    sliders = list(\n      list(\n        active = 0,\n        currentvalue = list(prefix = \"Carga (Q): \"),\n        steps = lapply(seq(1e-7, 1e-5, length.out = 10), function(Q_value) {\n          list(\n            label = sprintf(\"%.1e\", Q_value),\n            method = \"restyle\",\n            args = list('y', list(calcular_campo(Q_value, d)))\n          )\n        })\n      )\n    )\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Constante k0 (aproximadamente 8.99 × 10^9 N·m²/C²)\nk0 <- 8.99e9\n\n# Valores de distância (evitando d = 0 para não dividir por zero)\nd <- seq(0.1, 10, length.out = 100)\n\n# Função para calcular o campo elétrico\ncalcular_campo <- function(Q, d) {\n  k0 * Q / d^2\n}\n\n# Valores iniciais de Q\nQ_inicial <- 1e-6  # Carga inicial em Coulombs\n\n# Gráfico interativo com slider para alterar Q\nplot_ly(x = ~d, y = ~calcular_campo(Q_inicial, d), type = 'scatter', mode = 'lines') %>%\n  layout(\n    title = 'Campo Elétrico (E) em Função da Distância (d)',\n    xaxis = list(title = 'Distância (m)'),\n    yaxis = list(title = 'Campo Elétrico (N/C)', type = 'log'),\n    sliders = list(\n      list(\n        active = 0,\n        currentvalue = list(prefix = \"Carga (Q): \"),\n        steps = lapply(seq(1e-7, 1e-5, length.out = 10), function(Q_value) {\n          list(\n            label = sprintf(\"%.1e\", Q_value),\n            method = \"restyle\",\n            args = list('y', list(calcular_campo(Q_value, d)))\n          )\n        })\n      )\n    )\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nxaxis = list(title = 'Distância (m)', range = c(0, 10)),  # Definido o intervalo para o eixo X\n    yaxis = list(title = 'Campo Elétrico (N/C)', type = 'log', range = c(1e3, 1e12)),  # Ajuste na escala do eixo Y\n\n```\n\n</div>\n\n\\\n\n<!-- ############## MRUV ############### -->\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Movimento retilíneo uniformemente variado - MRUV (EM13CNT203, EM13CNT204)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Função para calcular a posição em MRUV\ncalcular_mruv <- function(s0, v0, a, t) {\n  s0 + v0 * t + 0.5 * a * t^2\n}\n\n# Dados\ns0 <- 0\nv0 <- 5\nt <- seq(0, 10, length.out = 100)\na_values <- seq(0, 5, by = 1)\n\n# Criando um dataframe com os dados\ndados_mruv <- data.frame()\nfor (a in a_values) {\n  for (time in t) {\n    pos <- calcular_mruv(s0, v0, a, time)\n    dados_mruv <- rbind(dados_mruv, data.frame(Tempo = time, Posição = pos, Aceleração = a))\n  }\n}\n\n# Gráfico animado para MRUV\nggplot(dados_mruv, aes(x = Tempo, y = Posição, group = Aceleração)) +\n  geom_line(aes(color = as.factor(Aceleração))) +\n  labs(title = 'MRUV: Posição em Função do Tempo',\n       subtitle = 'Aceleração = {frame_time} m/s²',\n       x = 'Tempo (s)', y = 'Posição (m)', color = 'Aceleração') +\n  transition_time(Aceleração) +\n  ease_aes('linear')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Função para calcular a posição em MRUV\ncalcular_mruv <- function(s0, v0, a, t) {\n  s0 + v0 * t + 0.5 * a * t^2\n}\n\n# Dados\ns0 <- 0\nv0 <- 5\nt <- seq(0, 10, length.out = 100)\na_values <- seq(0, 5, by = 1)\n\n# Criando um dataframe com os dados\ndados_mruv <- data.frame()\nfor (a in a_values) {\n  for (time in t) {\n    pos <- calcular_mruv(s0, v0, a, time)\n    dados_mruv <- rbind(dados_mruv, data.frame(Tempo = time, Posição = pos, Aceleração = a))\n  }\n}\n\n# Gráfico animado para MRUV\nggplot(dados_mruv, aes(x = Tempo, y = Posição, group = Aceleração)) +\n  geom_line(aes(color = as.factor(Aceleração))) +\n  labs(title = 'MRUV: Posição em Função do Tempo',\n       subtitle = 'Aceleração = {frame_time} m/s²',\n       x = 'Tempo (s)', y = 'Posição (m)', color = 'Aceleração') +\n  transition_time(Aceleração) +\n  ease_aes('linear')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Dentro da função de ggplot()\nscale_color_manual(values = c(\"0\" = \"blue\", \"1\" = \"red\", \"2\" = \"green\", \"3\" = \"purple\", \"4\" = \"orange\", \"5\" = \"brown\")) +  # Definidas cores específicas para cada aceleração\n\n```\n\n</div>\n\n\\\n\n\n<!-- ############## FORÇA GRAVITACIONAL E DISTÂNCIA ############### -->\n\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Força gravitacional e distância (EM13CNT401, EM13CNT402)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Função para calcular a força gravitacional\ncalcular_gravitacional <- function(m1, m2, d) {\n  G <- 6.67e-11\n  G * m1 * m2 / d^2\n}\n\n# Dados\nm1 <- 5.97e24  # Massa da Terra em kg\nm2_values <- seq(1e22, 1e24, length.out = 5)\nd <- seq(1e6, 4e8, length.out = 100)\n\n# Criando um dataframe com os dados\ndados_gravitacional <- data.frame()\nfor (m2 in m2_values) {\n  for (distancia in d) {\n    forca <- calcular_gravitacional(m1, m2, distancia)\n    dados_gravitacional <- rbind(dados_gravitacional, data.frame(Distância = distancia, Força = forca, Massa = m2))\n  }\n}\n\n# Gráfico animado para força gravitacional\nggplot(dados_gravitacional, aes(x = Distância, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força Gravitacional em Função da Distância',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Distância (m)', y = 'Força Gravitacional (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Função para calcular a força gravitacional\ncalcular_gravitacional <- function(m1, m2, d) {\n  G <- 6.67e-11\n  G * m1 * m2 / d^2\n}\n\n# Dados\nm1 <- 5.97e24  # Massa da Terra em kg\nm2_values <- seq(1e22, 1e24, length.out = 5)\nd <- seq(1e6, 4e8, length.out = 100)\n\n# Criando um dataframe com os dados\ndados_gravitacional <- data.frame()\nfor (m2 in m2_values) {\n  for (distancia in d) {\n    forca <- calcular_gravitacional(m1, m2, distancia)\n    dados_gravitacional <- rbind(dados_gravitacional, data.frame(Distância = distancia, Força = forca, Massa = m2))\n  }\n}\n\n# Gráfico animado para força gravitacional\nggplot(dados_gravitacional, aes(x = Distância, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força Gravitacional em Função da Distância',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Distância (m)', y = 'Força Gravitacional (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Dentro da função de ggplot()\ntheme_minimal() +  # Tema simples\n\n```\n\n</div>\n\n\\\n\n<!-- ############## 2a. LEI DE NEWTON ############### -->\n\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## 2a. Lei de Newton - massa e aceleração (EM13CNT202, EM13CNT203)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\n# Função para calcular a força\ncalcular_forca <- function(m, a) {\n  m * a\n}\n\n# Dados\na <- seq(0, 10, length.out = 100)\nm_values <- seq(1, 20, by = 5)\n\n# Criando um dataframe com os dados\ndados_newton <- data.frame()\nfor (m in m_values) {\n  for (aceleracao in a) {\n    forca <- calcular_forca(m, aceleracao)\n    dados_newton <- rbind(dados_newton, data.frame(Aceleração = aceleracao, Força = forca, Massa = m))\n  }\n}\n\n# Gráfico animado para Segunda Lei de Newton\nggplot(dados_newton, aes(x = Aceleração, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força (F) em Função da Aceleração (a)',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Aceleração (m/s²)', y = 'Força (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n# Função para calcular a força\ncalcular_forca <- function(m, a) {\n  m * a\n}\n\n# Dados\na <- seq(0, 10, length.out = 100)\nm_values <- seq(1, 20, by = 5)\n\n# Criando um dataframe com os dados\ndados_newton <- data.frame()\nfor (m in m_values) {\n  for (aceleracao in a) {\n    forca <- calcular_forca(m, aceleracao)\n    dados_newton <- rbind(dados_newton, data.frame(Aceleração = aceleracao, Força = forca, Massa = m))\n  }\n}\n\n# Gráfico animado para Segunda Lei de Newton\nggplot(dados_newton, aes(x = Aceleração, y = Força, group = Massa)) +\n  geom_line(aes(color = as.factor(Massa))) +\n  labs(title = 'Força (F) em Função da Aceleração (a)',\n       subtitle = 'Massa = {frame_time} kg',\n       x = 'Aceleração (m/s²)', y = 'Força (N)', color = 'Massa') +\n  transition_time(Massa) +\n  ease_aes('linear')\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\ngeom_line(aes(color = as.factor(Massa)), size = 1) +  # Linhas com espessura padrão\n```\n\n</div>\n\n\\\n\n<!-- ############## LEI DE OHM ############### -->\n\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Lei de Ohm - resistância, potencial, e corrente (EM13CNT303, EM13CNT304)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados\nresistencias <- seq(1, 10, by = 1)  # Resistência de 1 a 10 Ohms\ncorrente <- seq(0, 5, length.out = 100)  # Corrente de 0 a 5 Amperes\ndados <- data.frame()\n\n# Criando um dataframe com os dados\nfor (R in resistencias) {\n  for (I in corrente) {\n    V <- I * R  # Calculando a Tensão\n    P <- V * I  # Calculando a Potência\n    dados <- rbind(dados, data.frame(Corrente = I, Resistência = R, Tensão = V, Potência = P))\n  }\n}\n\n# Gráfico animado para Lei de Ohm e Potência\np <- ggplot(dados, aes(x = Corrente, y = Tensão)) +\n  geom_line(aes(color = as.factor(Resistência), group = Resistência)) +\n  geom_point(aes(size = Potência), alpha = 0.5) +\n  labs(title = 'Lei de Ohm: Tensão vs Corrente',\n       subtitle = 'Resistência = {frame_time} Ohms',\n       x = 'Corrente (A)', y = 'Tensão (V)', color = 'Resistência', size = 'Potência (W)') +\n  transition_time(Resistência) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados\nresistencias <- seq(1, 10, by = 1)  # Resistência de 1 a 10 Ohms\ncorrente <- seq(0, 5, length.out = 100)  # Corrente de 0 a 5 Amperes\ndados <- data.frame()\n\n# Criando um dataframe com os dados\nfor (R in resistencias) {\n  for (I in corrente) {\n    V <- I * R  # Calculando a Tensão\n    P <- V * I  # Calculando a Potência\n    dados <- rbind(dados, data.frame(Corrente = I, Resistência = R, Tensão = V, Potência = P))\n  }\n}\n\n# Gráfico animado para Lei de Ohm e Potência\np <- ggplot(dados, aes(x = Corrente, y = Tensão)) +\n  geom_line(aes(color = as.factor(Resistência), group = Resistência)) +\n  geom_point(aes(size = Potência), alpha = 0.5) +\n  labs(title = 'Lei de Ohm: Tensão vs Corrente',\n       subtitle = 'Resistência = {frame_time} Ohms',\n       x = 'Corrente (A)', y = 'Tensão (V)', color = 'Resistência', size = 'Potência (W)') +\n  transition_time(Resistência) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\ngeom_point(aes(size = Potência), alpha = 0.6) +  # Pontos com tamanho de acordo com a potência\n\n```\n\n</div>\n\n\\\n\n<!-- ############## POTÊNCIA E CONSUMO ENERGÉTICO ############### -->\n\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Energia elétrica e consumo residencial (EM13CNT405, EM13CNT306)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados dos eletrodomésticos (potência em kW)\neletrodomesticos <- data.frame(\n  Nome = c(\"Lâmpada\", \"Ventilador\", \"Geladeira\", \"Computador\"),\n  Potencia = c(0.1, 0.15, 0.2, 0.5)  # Potências em kW\n)\n\n# Tempo (em horas) para o qual calculamos o consumo\ntempo <- seq(0, 24, length.out = 100)  # 0 a 24 horas\n\n# Criando um dataframe com o consumo de energia\ndados_consumo <- data.frame()\n\nfor (i in 1:nrow(eletrodomesticos)) {\n  consumo <- eletrodomesticos$Potencia[i] * tempo  # Consumo em kWh\n  dados_consumo <- rbind(dados_consumo, \n                          data.frame(Tempo = tempo, \n                                     Consumo = consumo, \n                                     Eletrodomestico = eletrodomesticos$Nome[i]))\n}\n\n# Gráfico animado para o consumo de energia\np <- ggplot(dados_consumo, aes(x = Tempo, y = Consumo, color = Eletrodomestico, group = Eletrodomestico)) +\n  geom_line(size = 1.2) +\n  labs(title = 'Consumo de Energia Residencial (kWh)',\n       x = 'Tempo (horas)', y = 'Consumo (kWh)', color = 'Eletrodoméstico') +\n  transition_states(Eletrodomestico, transition_length = 2, state_length = 1) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Dados dos eletrodomésticos (potência em kW)\neletrodomesticos <- data.frame(\n  Nome = c(\"Lâmpada\", \"Ventilador\", \"Geladeira\", \"Computador\"),\n  Potencia = c(0.1, 0.15, 0.2, 0.5)  # Potências em kW\n)\n\n# Tempo (em horas) para o qual calculamos o consumo\ntempo <- seq(0, 24, length.out = 100)  # 0 a 24 horas\n\n# Criando um dataframe com o consumo de energia\ndados_consumo <- data.frame()\n\nfor (i in 1:nrow(eletrodomesticos)) {\n  consumo <- eletrodomesticos$Potencia[i] * tempo  # Consumo em kWh\n  dados_consumo <- rbind(dados_consumo, \n                          data.frame(Tempo = tempo, \n                                     Consumo = consumo, \n                                     Eletrodomestico = eletrodomesticos$Nome[i]))\n}\n\n# Gráfico animado para o consumo de energia\np <- ggplot(dados_consumo, aes(x = Tempo, y = Consumo, color = Eletrodomestico, group = Eletrodomestico)) +\n  geom_line(size = 1.2) +\n  labs(title = 'Consumo de Energia Residencial (kWh)',\n       x = 'Tempo (horas)', y = 'Consumo (kWh)', color = 'Eletrodoméstico') +\n  transition_states(Eletrodomestico, transition_length = 2, state_length = 1) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\ngeom_line(size = 1.4) +  # Linhas com espessura um pouco maior para melhor visibilidade\n\n```\n\n</div>\n\n\\\n\n\n<!-- ############## CONVERSÃO DE TEMPERATURA ############### -->\n\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Conversão de temperatura - Celsius, Kelvin, e Fahrenheit (EM13MAT403, EM13CNT205)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Intervalo de temperatura em Celsius\ncelsius <- seq(-100, 100, by = 1)\n\n# Cálculo das conversões\ntemp_data <- data.frame(\n  Celsius = celsius,\n  Fahrenheit = celsius * 9/5 + 32,\n  Kelvin = celsius + 273.15\n)\n\n# Reorganizando os dados para melhor visualização\ntemp_data_long <- reshape2::melt(temp_data, id.vars = \"Celsius\")\n\n# Gráfico animado\np <- ggplot(temp_data_long, aes(x = Celsius, y = value, color = variable)) +\n  geom_line(size = 1.2) +\n  labs(title = 'Conversão de Temperatura',\n       x = 'Temperatura em Celsius', y = 'Temperatura Convertida',\n       color = 'Escala') +\n  transition_reveal(Celsius) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(gganimate)\n\n# Intervalo de temperatura em Celsius\ncelsius <- seq(-100, 100, by = 1)\n\n# Cálculo das conversões\ntemp_data <- data.frame(\n  Celsius = celsius,\n  Fahrenheit = celsius * 9/5 + 32,\n  Kelvin = celsius + 273.15\n)\n\n# Reorganizando os dados para melhor visualização\ntemp_data_long <- reshape2::melt(temp_data, id.vars = \"Celsius\")\n\n# Gráfico animado\np <- ggplot(temp_data_long, aes(x = Celsius, y = value, color = variable)) +\n  geom_line(size = 1.2) +\n  labs(title = 'Conversão de Temperatura',\n       x = 'Temperatura em Celsius', y = 'Temperatura Convertida',\n       color = 'Escala') +\n  transition_reveal(Celsius) +\n  ease_aes('linear')\n\n# Exibindo o gráfico\np\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nease_aes('cubic-in-out') +  # Mudança na animação para transição mais suave\n\n```\n\n</div>\n\n\\\n\n<!-- ############## DILATAÇÃO TÉRMICA ############### -->\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Dilatação térmica - superficial, volumétrica, e de líquidos (EM13CNT304, EM13CNT305)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(plotly)\n\n# Valores iniciais\narea_inicial <- 100  # Área inicial (cm^2)\nvolume_inicial <- 100  # Volume inicial (cm^3)\nbeta <- 1.2e-5  # Coeficiente de dilatação superficial\ngama_solido <- 3.6e-5  # Coeficiente de dilatação volumétrica\ngama_liquido <- 4.0e-5  # Coeficiente de dilatação volumétrica de líquidos\n\n# Variação de temperatura (0 a 100 °C)\ndelta_T <- seq(0, 100, by = 1)\n\n# Cálculo das dilatações\ndilatacao_superficial <- area_inicial * beta * delta_T\ndilatacao_volumetrica <- volume_inicial * gama_solido * delta_T\ndilatacao_liquido <- volume_inicial * gama_liquido * delta_T\n\n# Dataframes para gráficos\ndados_superficie <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_superficial)\ndados_volumetrica <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_volumetrica)\ndados_liquido <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_liquido)\n\n# Criando os gráficos\ngrafico_superficie <- ggplot(dados_superficie, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Dilatação Superficial\", x = \"Temperatura (°C)\", y = \"ΔA (cm^2)\")\n\ngrafico_volumetrica <- ggplot(dados_volumetrica, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"red\") +\n  labs(title = \"Dilatação Volumétrica\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\ngrafico_liquido <- ggplot(dados_liquido, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"green\") +\n  labs(title = \"Dilatação de Líquidos\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\n# Exibindo os gráficos lado a lado\nggplotly(grafico_superficie + grafico_volumetrica + grafico_liquido)\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(patchwork)\n\n# Valores iniciais\narea_inicial <- 100  # Área inicial (cm^2)\nvolume_inicial <- 100  # Volume inicial (cm^3)\nbeta <- 1.2e-5  # Coeficiente de dilatação superficial\ngama_solido <- 3.6e-5  # Coeficiente de dilatação volumétrica\ngama_liquido <- 4.0e-5  # Coeficiente de dilatação volumétrica de líquidos\n\n# Variação de temperatura (0 a 100 °C)\ndelta_T <- seq(0, 100, by = 1)\n\n# Cálculo das dilatações\ndilatacao_superficial <- area_inicial * beta * delta_T\ndilatacao_volumetrica <- volume_inicial * gama_solido * delta_T\ndilatacao_liquido <- volume_inicial * gama_liquido * delta_T\n\n# Dataframes para gráficos\ndados_superficie <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_superficial)\ndados_volumetrica <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_volumetrica)\ndados_liquido <- data.frame(Temperatura = delta_T, Dilatacao = dilatacao_liquido)\n\n# Criando os gráficos\ngrafico_superficie <- ggplot(dados_superficie, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Dilatação Superficial\", x = \"Temperatura (°C)\", y = \"ΔA (cm^2)\")\n\ngrafico_volumetrica <- ggplot(dados_volumetrica, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"red\") +\n  labs(title = \"Dilatação Volumétrica\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\ngrafico_liquido <- ggplot(dados_liquido, aes(x = Temperatura, y = Dilatacao)) +\n  geom_line(color = \"green\") +\n  labs(title = \"Dilatação de Líquidos\", x = \"Temperatura (°C)\", y = \"ΔV (cm^3)\")\n\n# Exibindo os gráficos lado a lado\ngrafico_superficie + grafico_volumetrica + grafico_liquido\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Abaixo de geom_line()\ngeom_point(color = \"blue\", size = 2) +  # Adicionando pontos\n\n```\n\n</div>\n\n\\\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Corrente Alternada - Capacitor (EM13CNT202)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(plotly)\n\n# Valores de x\nx <- seq(0, 5 * pi, length.out = 100)\n\nplot_ly() %>%\n  add_trace(x = x, y = sin(x), mode = 'lines', name = 'Potencial') %>%\n  add_trace(x = 1.4*x, y = 0.9*cos(x)-0.4, mode = 'lines', name = 'Corrente') %>%\n  layout(\n    title = 'Tensão e Corrente num Capacitor',\n    xaxis = list(title = 'Ângulo (radianos)', range=c(0,15)), \n    yaxis = list(title = 'Valor'),\n    showlegend = TRUE\n  )\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(plotly)\n\n# Valores de x\nx <- seq(0, 5 * pi, length.out = 100)\n\nplot_ly() %>%\n  add_trace(x = x, y = sin(x), mode = 'lines', name = 'Potencial') %>%\n  add_trace(x = 1.4*x, y = 0.9*cos(x)-0.4, mode = 'lines', name = 'Corrente') %>%\n  layout(\n    title = 'Tensão e Corrente num Capacitor',\n    xaxis = list(title = 'Ângulo (radianos)', range=c(0,15)), \n    yaxis = list(title = 'Valor'),\n    showlegend = TRUE\n  )\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\nadd_trace(x = x, y = sin(x), mode = 'lines', name = 'Potencial', \n            line = list(color = 'blue', width = 2, dash = 'dot')) %>%  # Linha pontilhada azul\n\n```\n\n</div>\n\n\\\n\n<!-- ### EFICIÊNCIA DE MÁQUINA TÉRMICA E TEMPERATURA -->\n\n<div class=\"fis-fundo\">  <!--modifica para cada área-->\n\n## Rendimento de máquina térmica em função da temperatura (EM13CNT102, EM13CNT103)\n\n<!-- ::: {.grid} -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, echo=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Função para gerar os dados e o gráfico com base na temperatura de meia-eficiência (ou temperatura de saturação)\ngenerate_plot_data <- function(b) {\n  a <- 1 # rendimento máximo da máquina térmica\n  x <- seq(0, 300, length.out = 100) # faixa de temperatura\n  y <- a * x / (b + x) # equação que relaciona a temperatura ao rendimento (máximo = 1)\n  data.frame(x, y)\n}\n\n# Inicialize o gráfico com b = 1\ninitial_b <- 1 # valor inicial de b (temperatura de meia-saturação)\nplot_data <- generate_plot_data(initial_b)\n\n# Criando o gráfico inicial usando o pacote ggplot2\np <- ggplot(plot_data, aes(x = x, y = y)) +\n  geom_line() +\n  labs(title = paste(\"Rendimento de uma máquina térmica em função da temperatura\"),\n       x = \"Temperatura (C)\",\n       y = \"Fração de Rendimento\") +\n  theme_minimal() +\n  ylim(0, 1)\n\n# Convertendo para um objeto plotly\nfig <- ggplotly(p)\n\n# Definindo os passos para o slider\nsteps <- lapply(seq(0, 100, by = 10), function(b) {\n  list(\n    label = as.character(b),\n    method = \"restyle\",\n    args = list(\n      list(\n        x = list(generate_plot_data(b)$x),\n        y = list(generate_plot_data(b)$y)\n      ),\n      list(title = paste(\"Rendimento em função do valor de meia-saturação:\", b))\n    )\n  )\n})\n\n# Adicionando o slider para o parâmetro 'b' (temperatura de meia-saturação)\nfig <- fig %>%\n  layout(\n    sliders = list(\n      list(\n        active = 0,\n        currentvalue = list(prefix = \"Meia-Saturação: \"),\n        steps = steps\n      )\n    )\n  )\n\n# Visualize o gráfico\nfig\n\n```\n<!-- ::: -->\n\n<!-- ::: {.g-col-6} -->\n\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Função para gerar os dados e o gráfico com base na temperatura de meia-eficiência (ou temperatura de saturação)\ngenerate_plot_data <- function(b) {\n  a <- 1 # rendimento máximo da máquina térmica\n  x <- seq(0, 300, length.out = 100) # faixa de temperatura\n  y <- a * x / (b + x) # equação que relaciona a temperatura ao rendimento (máximo = 1)\n  data.frame(x, y)\n}\n\n# Inicialize o gráfico com b = 1\ninitial_b <- 1 # valor inicial de b (temperatura de meia-saturação)\nplot_data <- generate_plot_data(initial_b)\n\n# Criando o gráfico inicial usando o pacote ggplot2\np <- ggplot(plot_data, aes(x = x, y = y)) +\n  geom_line() +\n  labs(title = paste(\"Rendimento de uma máquina térmica em função da temperatura\"),\n       x = \"Temperatura (C)\",\n       y = \"Fração de Rendimento\") +\n  theme_minimal() +\n  ylim(0, 1)\n\n# Convertendo para um objeto plotly\nfig <- ggplotly(p)\n\n# Definindo os passos para o slider\nsteps <- lapply(seq(0, 100, by = 10), function(b) {\n  list(\n    label = as.character(b),\n    method = \"restyle\",\n    args = list(\n      list(\n        x = list(generate_plot_data(b)$x),\n        y = list(generate_plot_data(b)$y)\n      ),\n      list(title = paste(\"Rendimento em função do valor de meia-saturação:\", b))\n    )\n  )\n})\n\n# Adicionando o slider para o parâmetro 'b' (temperatura de meia-saturação)\nfig <- fig %>%\n  layout(\n    sliders = list(\n      list(\n        active = 0,\n        currentvalue = list(prefix = \"Meia-Saturação: \"),\n        steps = steps\n      )\n    )\n  )\n\n# Visualize o gráfico\nfig\n\n```\n\n<!-- ::: -->\n\n<!-- ::: -->\n\n</div>\n\n<div class=\"fis-fundo2\"> <!--modifica para cada área-->\n\n**Sugestões:**\n\n|       Experimente modificar o gráfico, usando/substituindo alternativamente os comandos abaixo no trecho de código:\n\n```{r, eval =FALSE}\n# Dentro de steps\n list(\n        x = list(generate_plot_data(b)$x),\n        y = list(generate_plot_data(b)$y),\n        line = list(color = colorRampPalette(c(\"blue\", \"green\"))(11)[b/10 + 1])  # Faixa de cores variando de azul a verde\n),\n\n```\n\n</div>\n\n\\\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"number-sections":true,"toc":true,"output-file":"fisica.html"},"language":{"toc-title-document":"Índice","toc-title-website":"Nesta página","related-formats-title":"Outros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fonte","other-links-title":"Outros Links","code-links-title":"Ligações de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Caderno do Artigo","notebook-preview-download":"Baixar Caderno","notebook-preview-download-src":"Descarregar código fonte","notebook-preview-back":"Voltar ao Artigo","manuscript-meca-bundle":"Arquivo MECA","section-title-abstract":"Resumo","section-title-appendices":"Apêndices","section-title-footnotes":"Notas de rodapé","section-title-references":"Referências","section-title-reuse":"Reuso","section-title-copyright":"Direito autoral","section-title-citation":"Citação","appendix-attribution-cite-as":"Por favor, cite este trabalho como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licença","title-block-author-single":"Autor","title-block-author-plural":"Autores","title-block-affiliation-single":"Afiliação","title-block-affiliation-plural":"Afiliações","title-block-published":"Data de Publicação","title-block-modified":"Data de Modificação","title-block-keywords":"Palavras-chave","callout-tip-title":"Dica","callout-note-title":"Nota","callout-warning-title":"Aviso","callout-important-title":"Importante","callout-caution-title":"Cuidado","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar o código","code-tools-hide-all-code":"Esconder o código","code-tools-view-source":"Ver o código fonte","code-tools-source-code":"Código fonte","tools-share":"Share","tools-download":"Download","code-line":"Linha","code-lines":"Linhas","copy-button-tooltip":"Copiar para a área de transferência","copy-button-tooltip-success":"Copiada","repo-action-links-edit":"Editar essa página","repo-action-links-source":"Ver o código fonte","repo-action-links-issue":"Criar uma issue","back-to-top":"De volta ao topo","search-no-results-text":"Nenhum resultado","search-matching-documents-text":"documentos correspondentes","search-copy-link-title":"Copiar link para a busca","search-hide-matches-text":"Esconder correspondências adicionais","search-more-match-text":"mais correspondência neste documento","search-more-matches-text":"mais correspondências neste documento","search-clear-button-title":"Limpar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Procurar","toggle-section":"Alternar seção","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo escuro","toggle-reader-mode":"Alternar modo de leitor","toggle-navigation":"Alternar de navegação","crossref-fig-title":"Figura","crossref-tbl-title":"Tabela","crossref-lst-title":"Listagem","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolário","crossref-prp-title":"Proposição","crossref-cnj-title":"Conjetura","crossref-def-title":"Definição","crossref-exm-title":"Exemplo","crossref-exr-title":"Exercício","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apêndice","crossref-sec-prefix":"Seção","crossref-eq-prefix":"Equação","crossref-lof-title":"Lista de Figuras","crossref-lot-title":"Lista de Tabelas","crossref-lol-title":"Lista de Listagens","environment-proof-title":"Comprovação","environment-remark-title":"Comentário","environment-solution-title":"Solução","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Pré-selecionado","listing-page-order-by-date-asc":"Mais velho","listing-page-order-by-date-desc":"O mais novo","listing-page-order-by-number-desc":"Decrescente","listing-page-order-by-number-asc":"Crescente","listing-page-field-date":"Data","listing-page-field-title":"Título","listing-page-field-description":"Descrição","listing-page-field-author":"Autor","listing-page-field-filename":"Nome do arquivo","listing-page-field-filemodified":"Arquivo modificado","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tempo de leitura","listing-page-field-wordcount":"Contagem de Palavras","listing-page-field-categories":"Categorias","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Tudo","listing-page-no-matches":"Nenhum item correspondente","listing-page-words":"{0} palavras","listing-page-filter":"Filtro","draft":"Rascunho"},"metadata":{"lang":"pt","fig-responsive":true,"quarto-version":"1.7.22","theme":{"light":"flatly"},"title":"Física","class":"fundo-basico"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}